{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Pipe, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nfunction NgOtpInputComponent_div_0_input_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 3, 4);\n    i0.ɵɵlistener(\"paste\", function NgOtpInputComponent_div_0_input_1_Template_input_paste_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return ctx_r5.handlePaste($event);\n    })(\"keyup\", function NgOtpInputComponent_div_0_input_1_Template_input_keyup_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const i_r3 = restoredCtx.index;\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return ctx_r7.onKeyUp($event, i_r3);\n    })(\"input\", function NgOtpInputComponent_div_0_input_1_Template_input_input_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.onInput($event);\n    })(\"keydown\", function NgOtpInputComponent_div_0_input_1_Template_input_keydown_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const i_r3 = restoredCtx.index;\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.onKeyDown($event, i_r3);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"otp-input \", ctx_r1.config.inputClass, \"\");\n    i0.ɵɵpropertyInterpolate2(\"id\", \"otp_\", i_r3, \"_\", ctx_r1.componentKey, \"\");\n    i0.ɵɵproperty(\"pattern\", ctx_r1.config.allowNumbersOnly ? \"\\\\d*\" : \"\")(\"type\", ctx_r1.inputType)(\"placeholder\", (ctx_r1.config == null ? null : ctx_r1.config.placeholder) || \"\")(\"ngStyle\", ctx_r1.config.inputStyles)(\"formControl\", ctx_r1.otpForm.controls[item_r2]);\n  }\n}\nfunction NgOtpInputComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, NgOtpInputComponent_div_0_input_1_Template, 2, 10, \"input\", 2);\n    i0.ɵɵpipe(2, \"keys\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMapInterpolate1(\"ng-otp-input-wrapper wrapper \", ctx_r0.config.containerClass, \"\");\n    i0.ɵɵpropertyInterpolate1(\"id\", \"c_\", ctx_r0.componentKey, \"\");\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0.config.containerStyles);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 6, ctx_r0.otpForm == null ? null : ctx_r0.otpForm.controls));\n  }\n}\nclass KeyboardUtil {\n  static ifBackspaceOrDelete(event) {\n    return this.ifKey(event, 'Backspace;Delete;Del');\n  }\n  static ifRightArrow(event) {\n    return this.ifKey(event, 'ArrowRight;Right');\n  }\n  static ifLeftArrow(event) {\n    return this.ifKey(event, 'ArrowLeft;Left');\n  }\n  static ifSpacebar(event) {\n    return this.ifKey(event, 'Spacebar; '); //don't remove the space after ; as this will check for space key\n  }\n\n  static ifKey(event, keys) {\n    let keysToCheck = keys.split(';');\n    return keysToCheck.some(k => k === event.key);\n  }\n}\nclass KeysPipe {\n  transform(value) {\n    return Object.keys(value);\n  }\n}\n/** @nocollapse */\nKeysPipe.ɵfac = function KeysPipe_Factory(t) {\n  return new (t || KeysPipe)();\n};\n/** @nocollapse */\nKeysPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"keys\",\n  type: KeysPipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KeysPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'keys'\n    }]\n  }], null, null);\n})();\nclass NgOtpInputComponent {\n  constructor(keysPipe) {\n    this.keysPipe = keysPipe;\n    this.config = {\n      length: 4\n    };\n    // tslint:disable-next-line: no-output-on-prefix\n    this.onInputChange = new EventEmitter();\n    this.inputControls = new Array(this.config.length);\n    this.componentKey = Math.random().toString(36).substring(2) + new Date().getTime().toString(36);\n  }\n  get inputType() {\n    var _a, _b;\n    return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.isPasswordInput) ? 'password' : ((_b = this.config) === null || _b === void 0 ? void 0 : _b.allowNumbersOnly) ? 'tel' : 'text';\n  }\n  ngOnInit() {\n    this.otpForm = new FormGroup({});\n    for (let index = 0; index < this.config.length; index++) {\n      this.otpForm.addControl(this.getControlName(index), new FormControl());\n    }\n    this.otpForm.valueChanges.subscribe(v => {\n      this.keysPipe.transform(this.otpForm.controls).forEach(k => {\n        var val = this.otpForm.controls[k].value;\n        if (val && val.length > 1) {\n          if (val.length >= this.config.length) {\n            this.setValue(val);\n          } else {\n            this.rebuildValue();\n          }\n        }\n      });\n    });\n  }\n  ngAfterViewInit() {\n    if (!this.config.disableAutoFocus) {\n      const containerItem = document.getElementById(`c_${this.componentKey}`);\n      if (containerItem) {\n        const ele = containerItem.getElementsByClassName('otp-input')[0];\n        if (ele && ele.focus) {\n          ele.focus();\n        }\n      }\n    }\n  }\n  getControlName(idx) {\n    return `ctrl_${idx}`;\n  }\n  onKeyDown($event, inputIdx) {\n    if (KeyboardUtil.ifSpacebar($event)) {\n      $event.preventDefault();\n      return false;\n    }\n  }\n  onInput($event) {\n    let newVal = this.currentVal ? `${this.currentVal}${$event.target.value}` : $event.target.value;\n    if (this.config.allowNumbersOnly && !this.validateNumber(newVal)) {\n      $event.target.value = '';\n      $event.stopPropagation();\n      $event.preventDefault();\n      return;\n    }\n  }\n  onKeyUp($event, inputIdx) {\n    const nextInputId = this.appendKey(`otp_${inputIdx + 1}`);\n    const prevInputId = this.appendKey(`otp_${inputIdx - 1}`);\n    if (KeyboardUtil.ifRightArrow($event)) {\n      $event.preventDefault();\n      this.setSelected(nextInputId);\n      return;\n    }\n    if (KeyboardUtil.ifLeftArrow($event)) {\n      $event.preventDefault();\n      this.setSelected(prevInputId);\n      return;\n    }\n    if (KeyboardUtil.ifBackspaceOrDelete($event) && !$event.target.value) {\n      this.setSelected(prevInputId);\n      this.rebuildValue();\n      return;\n    }\n    if (!$event.target.value) {\n      return;\n    }\n    if (this.ifValidKeyCode($event)) {\n      this.setSelected(nextInputId);\n    }\n    this.rebuildValue();\n  }\n  validateNumber(val) {\n    return val && /^\\d*\\.?\\d*$/.test(val);\n  }\n  appendKey(id) {\n    return `${id}_${this.componentKey}`;\n  }\n  setSelected(eleId) {\n    this.focusTo(eleId);\n    const ele = document.getElementById(eleId);\n    if (ele && ele.setSelectionRange) {\n      setTimeout(() => {\n        ele.setSelectionRange(0, 1);\n      }, 0);\n    }\n  }\n  ifValidKeyCode(event) {\n    const inp = event.key;\n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n    return isMobile || /[a-zA-Z0-9-_]/.test(inp) || this.config.allowKeyCodes && this.config.allowKeyCodes.includes(event.keyCode);\n  }\n  focusTo(eleId) {\n    const ele = document.getElementById(eleId);\n    if (ele) {\n      ele.focus();\n    }\n  }\n  // method to set component value\n  setValue(value) {\n    if (this.config.allowNumbersOnly && isNaN(value)) {\n      return;\n    }\n    this.otpForm.reset();\n    if (!value) {\n      this.rebuildValue();\n      return;\n    }\n    value = value.toString().replace(/\\s/g, ''); // remove whitespace\n    Array.from(value).forEach((c, idx) => {\n      if (this.otpForm.get(this.getControlName(idx))) {\n        this.otpForm.get(this.getControlName(idx)).setValue(c);\n      }\n    });\n    if (!this.config.disableAutoFocus) {\n      const containerItem = document.getElementById(`c_${this.componentKey}`);\n      var indexOfElementToFocus = value.length < this.config.length ? value.length : this.config.length - 1;\n      let ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\n      if (ele && ele.focus) {\n        ele.focus();\n      }\n    }\n    this.rebuildValue();\n  }\n  rebuildValue() {\n    var _a;\n    let val = '';\n    this.keysPipe.transform(this.otpForm.controls).forEach(k => {\n      if (this.otpForm.controls[k].value) {\n        let ctrlVal = this.otpForm.controls[k].value;\n        let isLengthExceed = ctrlVal.length > 1;\n        let isCaseTransformEnabled = !this.config.allowNumbersOnly && this.config.letterCase && (this.config.letterCase.toLocaleLowerCase() == 'upper' || this.config.letterCase.toLocaleLowerCase() == 'lower');\n        ctrlVal = ctrlVal[0];\n        let transformedVal = isCaseTransformEnabled ? this.config.letterCase.toLocaleLowerCase() == 'upper' ? ctrlVal.toUpperCase() : ctrlVal.toLowerCase() : ctrlVal;\n        if (isCaseTransformEnabled && transformedVal == ctrlVal) {\n          isCaseTransformEnabled = false;\n        } else {\n          ctrlVal = transformedVal;\n        }\n        val += ctrlVal;\n        if (isLengthExceed || isCaseTransformEnabled) {\n          this.otpForm.controls[k].setValue(ctrlVal);\n        }\n      }\n    });\n    if ((_a = this.formCtrl) === null || _a === void 0 ? void 0 : _a.setValue) {\n      this.formCtrl.setValue(val);\n    }\n    this.onInputChange.emit(val);\n    this.currentVal = val;\n  }\n  handlePaste(e) {\n    // Get pasted data via clipboard API\n    let clipboardData = e.clipboardData || window['clipboardData'];\n    if (clipboardData) {\n      var pastedData = clipboardData.getData('Text');\n    }\n    // Stop data actually being pasted into div\n    e.stopPropagation();\n    e.preventDefault();\n    if (!pastedData || this.config.allowNumbersOnly && !this.validateNumber(pastedData)) {\n      return;\n    }\n    this.setValue(pastedData);\n  }\n}\n/** @nocollapse */\nNgOtpInputComponent.ɵfac = function NgOtpInputComponent_Factory(t) {\n  return new (t || NgOtpInputComponent)(i0.ɵɵdirectiveInject(KeysPipe));\n};\n/** @nocollapse */\nNgOtpInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgOtpInputComponent,\n  selectors: [[\"ng-otp-input\"]],\n  inputs: {\n    config: \"config\",\n    formCtrl: \"formCtrl\"\n  },\n  outputs: {\n    onInputChange: \"onInputChange\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"class\", \"id\", \"ngStyle\", 4, \"ngIf\"], [3, \"id\", \"ngStyle\"], [\"autocomplete\", \"one-time-code\", 3, \"pattern\", \"type\", \"placeholder\", \"ngStyle\", \"class\", \"formControl\", \"id\", \"paste\", \"keyup\", \"input\", \"keydown\", 4, \"ngFor\", \"ngForOf\"], [\"autocomplete\", \"one-time-code\", 3, \"pattern\", \"type\", \"placeholder\", \"ngStyle\", \"formControl\", \"id\", \"paste\", \"keyup\", \"input\", \"keydown\"], [\"inp\", \"\"]],\n  template: function NgOtpInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NgOtpInputComponent_div_0_Template, 3, 8, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.otpForm == null ? null : ctx.otpForm.controls);\n    }\n  },\n  directives: [i2.NgIf, i2.NgStyle, i2.NgForOf, i3.DefaultValueAccessor, i3.PatternValidator, i3.NgControlStatus, i3.FormControlDirective],\n  pipes: [KeysPipe],\n  styles: [\".otp-input[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.ng-otp-input-wrapper[_ngcontent-%COMP%]   .otp-input[_ngcontent-%COMP%]:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input[_ngcontent-%COMP%]{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input[_ngcontent-%COMP%]{width:30px;font-size:18px;height:30px}}\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgOtpInputComponent, [{\n    type: Component,\n    args: [{\n      // tslint:disable-next-line: component-selector\n      selector: 'ng-otp-input',\n      templateUrl: './ng-otp-input.component.html',\n      styleUrls: ['./ng-otp-input.component.scss']\n    }]\n  }], function () {\n    return [{\n      type: KeysPipe\n    }];\n  }, {\n    config: [{\n      type: Input\n    }],\n    onInputChange: [{\n      type: Output\n    }],\n    formCtrl: [{\n      type: Input\n    }]\n  });\n})();\nclass NgOtpInputModule {}\n/** @nocollapse */\nNgOtpInputModule.ɵfac = function NgOtpInputModule_Factory(t) {\n  return new (t || NgOtpInputModule)();\n};\n/** @nocollapse */\nNgOtpInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgOtpInputModule\n});\n/** @nocollapse */\nNgOtpInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [KeysPipe],\n  imports: [[CommonModule, FormsModule, ReactiveFormsModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgOtpInputModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, ReactiveFormsModule],\n      declarations: [NgOtpInputComponent, KeysPipe],\n      exports: [NgOtpInputComponent],\n      providers: [KeysPipe]\n    }]\n  }], null, null);\n})();\nclass Config {}\n\n/*\r\n * Public API Surface of ng-otp-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgOtpInputComponent, Config as NgOtpInputConfig, NgOtpInputModule };","map":{"version":3,"names":["i0","Pipe","EventEmitter","Component","Input","Output","NgModule","i3","FormGroup","FormControl","FormsModule","ReactiveFormsModule","i2","CommonModule","NgOtpInputComponent_div_0_input_1_Template","rf","ctx","_r6","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","NgOtpInputComponent_div_0_input_1_Template_input_paste_0_listener","$event","ɵɵrestoreView","ctx_r5","ɵɵnextContext","handlePaste","NgOtpInputComponent_div_0_input_1_Template_input_keyup_0_listener","restoredCtx","i_r3","index","ctx_r7","onKeyUp","NgOtpInputComponent_div_0_input_1_Template_input_input_0_listener","ctx_r8","onInput","NgOtpInputComponent_div_0_input_1_Template_input_keydown_0_listener","ctx_r9","onKeyDown","ɵɵelementEnd","item_r2","$implicit","ctx_r1","ɵɵclassMapInterpolate1","config","inputClass","ɵɵpropertyInterpolate2","componentKey","ɵɵproperty","allowNumbersOnly","inputType","placeholder","inputStyles","otpForm","controls","NgOtpInputComponent_div_0_Template","ɵɵtemplate","ɵɵpipe","ctx_r0","containerClass","ɵɵpropertyInterpolate1","containerStyles","ɵɵadvance","ɵɵpipeBind1","KeyboardUtil","ifBackspaceOrDelete","event","ifKey","ifRightArrow","ifLeftArrow","ifSpacebar","keys","keysToCheck","split","some","k","key","KeysPipe","transform","value","Object","ɵfac","KeysPipe_Factory","t","ɵpipe","ɵɵdefinePipe","name","type","pure","ngDevMode","ɵsetClassMetadata","args","NgOtpInputComponent","constructor","keysPipe","length","onInputChange","inputControls","Array","Math","random","toString","substring","Date","getTime","_a","_b","isPasswordInput","ngOnInit","addControl","getControlName","valueChanges","subscribe","v","forEach","val","setValue","rebuildValue","ngAfterViewInit","disableAutoFocus","containerItem","document","getElementById","ele","getElementsByClassName","focus","idx","inputIdx","preventDefault","newVal","currentVal","target","validateNumber","stopPropagation","nextInputId","appendKey","prevInputId","setSelected","ifValidKeyCode","test","id","eleId","focusTo","setSelectionRange","setTimeout","inp","isMobile","navigator","userAgent","allowKeyCodes","includes","keyCode","isNaN","reset","replace","from","c","get","indexOfElementToFocus","ctrlVal","isLengthExceed","isCaseTransformEnabled","letterCase","toLocaleLowerCase","transformedVal","toUpperCase","toLowerCase","formCtrl","emit","e","clipboardData","window","pastedData","getData","NgOtpInputComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","inputs","outputs","decls","vars","consts","template","NgOtpInputComponent_Template","directives","NgIf","NgStyle","NgForOf","DefaultValueAccessor","PatternValidator","NgControlStatus","FormControlDirective","pipes","styles","selector","templateUrl","styleUrls","NgOtpInputModule","NgOtpInputModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","declarations","exports","Config","NgOtpInputConfig"],"sources":["/home/unutu/go/src/github.com/thteam47/admin-portal/node_modules/ng-otp-input/fesm2015/ng-otp-input.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Pipe, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass KeyboardUtil {\r\n    static ifBackspaceOrDelete(event) {\r\n        return this.ifKey(event, 'Backspace;Delete;Del');\r\n    }\r\n    static ifRightArrow(event) {\r\n        return this.ifKey(event, 'ArrowRight;Right');\r\n    }\r\n    static ifLeftArrow(event) {\r\n        return this.ifKey(event, 'ArrowLeft;Left');\r\n    }\r\n    static ifSpacebar(event) {\r\n        return this.ifKey(event, 'Spacebar; '); //don't remove the space after ; as this will check for space key\r\n    }\r\n    static ifKey(event, keys) {\r\n        let keysToCheck = keys.split(';');\r\n        return keysToCheck.some(k => k === event.key);\r\n    }\r\n}\n\nclass KeysPipe {\r\n    transform(value) {\r\n        return Object.keys(value);\r\n    }\r\n}\r\n/** @nocollapse */ KeysPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: KeysPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\r\n/** @nocollapse */ KeysPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: KeysPipe, name: \"keys\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: KeysPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'keys'\r\n                }]\r\n        }] });\n\nclass NgOtpInputComponent {\r\n    constructor(keysPipe) {\r\n        this.keysPipe = keysPipe;\r\n        this.config = { length: 4 };\r\n        // tslint:disable-next-line: no-output-on-prefix\r\n        this.onInputChange = new EventEmitter();\r\n        this.inputControls = new Array(this.config.length);\r\n        this.componentKey = Math.random()\r\n            .toString(36)\r\n            .substring(2) + new Date().getTime().toString(36);\r\n    }\r\n    get inputType() {\r\n        var _a, _b;\r\n        return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.isPasswordInput)\r\n            ? 'password'\r\n            : ((_b = this.config) === null || _b === void 0 ? void 0 : _b.allowNumbersOnly)\r\n                ? 'tel'\r\n                : 'text';\r\n    }\r\n    ngOnInit() {\r\n        this.otpForm = new FormGroup({});\r\n        for (let index = 0; index < this.config.length; index++) {\r\n            this.otpForm.addControl(this.getControlName(index), new FormControl());\r\n        }\r\n        this.otpForm.valueChanges.subscribe((v) => {\r\n            this.keysPipe.transform(this.otpForm.controls).forEach((k) => {\r\n                var val = this.otpForm.controls[k].value;\r\n                if (val && val.length > 1) {\r\n                    if (val.length >= this.config.length) {\r\n                        this.setValue(val);\r\n                    }\r\n                    else {\r\n                        this.rebuildValue();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ngAfterViewInit() {\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            if (containerItem) {\r\n                const ele = containerItem.getElementsByClassName('otp-input')[0];\r\n                if (ele && ele.focus) {\r\n                    ele.focus();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getControlName(idx) {\r\n        return `ctrl_${idx}`;\r\n    }\r\n    onKeyDown($event, inputIdx) {\r\n        if (KeyboardUtil.ifSpacebar($event)) {\r\n            $event.preventDefault();\r\n            return false;\r\n        }\r\n    }\r\n    onInput($event) {\r\n        let newVal = this.currentVal ? `${this.currentVal}${$event.target.value}` : $event.target.value;\r\n        if (this.config.allowNumbersOnly && !this.validateNumber(newVal)) {\r\n            $event.target.value = '';\r\n            $event.stopPropagation();\r\n            $event.preventDefault();\r\n            return;\r\n        }\r\n    }\r\n    onKeyUp($event, inputIdx) {\r\n        const nextInputId = this.appendKey(`otp_${inputIdx + 1}`);\r\n        const prevInputId = this.appendKey(`otp_${inputIdx - 1}`);\r\n        if (KeyboardUtil.ifRightArrow($event)) {\r\n            $event.preventDefault();\r\n            this.setSelected(nextInputId);\r\n            return;\r\n        }\r\n        if (KeyboardUtil.ifLeftArrow($event)) {\r\n            $event.preventDefault();\r\n            this.setSelected(prevInputId);\r\n            return;\r\n        }\r\n        if (KeyboardUtil.ifBackspaceOrDelete($event) && !$event.target.value) {\r\n            this.setSelected(prevInputId);\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        if (!$event.target.value) {\r\n            return;\r\n        }\r\n        if (this.ifValidKeyCode($event)) {\r\n            this.setSelected(nextInputId);\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    validateNumber(val) {\r\n        return val && /^\\d*\\.?\\d*$/.test(val);\r\n    }\r\n    appendKey(id) {\r\n        return `${id}_${this.componentKey}`;\r\n    }\r\n    setSelected(eleId) {\r\n        this.focusTo(eleId);\r\n        const ele = document.getElementById(eleId);\r\n        if (ele && ele.setSelectionRange) {\r\n            setTimeout(() => {\r\n                ele.setSelectionRange(0, 1);\r\n            }, 0);\r\n        }\r\n    }\r\n    ifValidKeyCode(event) {\r\n        const inp = event.key;\r\n        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n        return (isMobile ||\r\n            /[a-zA-Z0-9-_]/.test(inp) ||\r\n            (this.config.allowKeyCodes &&\r\n                this.config.allowKeyCodes.includes(event.keyCode)));\r\n    }\r\n    focusTo(eleId) {\r\n        const ele = document.getElementById(eleId);\r\n        if (ele) {\r\n            ele.focus();\r\n        }\r\n    }\r\n    // method to set component value\r\n    setValue(value) {\r\n        if (this.config.allowNumbersOnly && isNaN(value)) {\r\n            return;\r\n        }\r\n        this.otpForm.reset();\r\n        if (!value) {\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        value = value.toString().replace(/\\s/g, ''); // remove whitespace\r\n        Array.from(value).forEach((c, idx) => {\r\n            if (this.otpForm.get(this.getControlName(idx))) {\r\n                this.otpForm.get(this.getControlName(idx)).setValue(c);\r\n            }\r\n        });\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            var indexOfElementToFocus = value.length < this.config.length ? value.length : (this.config.length - 1);\r\n            let ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\r\n            if (ele && ele.focus) {\r\n                ele.focus();\r\n            }\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    rebuildValue() {\r\n        var _a;\r\n        let val = '';\r\n        this.keysPipe.transform(this.otpForm.controls).forEach(k => {\r\n            if (this.otpForm.controls[k].value) {\r\n                let ctrlVal = this.otpForm.controls[k].value;\r\n                let isLengthExceed = ctrlVal.length > 1;\r\n                let isCaseTransformEnabled = !this.config.allowNumbersOnly && this.config.letterCase && (this.config.letterCase.toLocaleLowerCase() == 'upper' || this.config.letterCase.toLocaleLowerCase() == 'lower');\r\n                ctrlVal = ctrlVal[0];\r\n                let transformedVal = isCaseTransformEnabled ? this.config.letterCase.toLocaleLowerCase() == 'upper' ? ctrlVal.toUpperCase() : ctrlVal.toLowerCase() : ctrlVal;\r\n                if (isCaseTransformEnabled && transformedVal == ctrlVal) {\r\n                    isCaseTransformEnabled = false;\r\n                }\r\n                else {\r\n                    ctrlVal = transformedVal;\r\n                }\r\n                val += ctrlVal;\r\n                if (isLengthExceed || isCaseTransformEnabled) {\r\n                    this.otpForm.controls[k].setValue(ctrlVal);\r\n                }\r\n            }\r\n        });\r\n        if ((_a = this.formCtrl) === null || _a === void 0 ? void 0 : _a.setValue) {\r\n            this.formCtrl.setValue(val);\r\n        }\r\n        this.onInputChange.emit(val);\r\n        this.currentVal = val;\r\n    }\r\n    handlePaste(e) {\r\n        // Get pasted data via clipboard API\r\n        let clipboardData = e.clipboardData || window['clipboardData'];\r\n        if (clipboardData) {\r\n            var pastedData = clipboardData.getData('Text');\r\n        }\r\n        // Stop data actually being pasted into div\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        if (!pastedData || (this.config.allowNumbersOnly && !this.validateNumber(pastedData))) {\r\n            return;\r\n        }\r\n        this.setValue(pastedData);\r\n    }\r\n}\r\n/** @nocollapse */ NgOtpInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputComponent, deps: [{ token: KeysPipe }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgOtpInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: NgOtpInputComponent, selector: \"ng-otp-input\", inputs: { config: \"config\", formCtrl: \"formCtrl\" }, outputs: { onInputChange: \"onInputChange\" }, ngImport: i0, template: \"<div class=\\\"ng-otp-input-wrapper wrapper {{config.containerClass}}\\\" id=\\\"c_{{componentKey}}\\\" *ngIf=\\\"otpForm?.controls\\\"\\r\\n  [ngStyle]=\\\"config.containerStyles\\\">\\r\\n  <input (paste)=\\\"handlePaste($event)\\\" [pattern]=\\\"config.allowNumbersOnly ? '\\\\\\\\d*' : ''\\\" [type]=\\\"inputType\\\"  [placeholder]=\\\"config?.placeholder || ''\\\"\\r\\n    [ngStyle]=\\\"config.inputStyles\\\" \\r\\n    class=\\\"otp-input {{config.inputClass}}\\\" autocomplete=\\\"one-time-code\\\" *ngFor=\\\"let item of otpForm?.controls | keys;let i=index\\\"\\r\\n    [formControl]=\\\"otpForm.controls[item]\\\" #inp id=\\\"otp_{{i}}_{{componentKey}}\\\" \\r\\n    (keyup)=\\\"onKeyUp($event,i)\\\" (input)=\\\"onInput($event)\\\" (keydown)=\\\"onKeyDown($event,i)\\\" >\\r\\n</div>\", styles: [\".otp-input{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.ng-otp-input-wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input{width:30px;font-size:18px;height:30px}}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i3.PatternValidator, selector: \"[pattern][formControlName],[pattern][formControl],[pattern][ngModel]\", inputs: [\"pattern\"] }, { type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i3.FormControlDirective, selector: \"[formControl]\", inputs: [\"disabled\", \"formControl\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }], pipes: { \"keys\": KeysPipe } });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    // tslint:disable-next-line: component-selector\r\n                    selector: 'ng-otp-input',\r\n                    templateUrl: './ng-otp-input.component.html',\r\n                    styleUrls: ['./ng-otp-input.component.scss']\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: KeysPipe }]; }, propDecorators: { config: [{\r\n                type: Input\r\n            }], onInputChange: [{\r\n                type: Output\r\n            }], formCtrl: [{\r\n                type: Input\r\n            }] } });\n\nclass NgOtpInputModule {\r\n}\r\n/** @nocollapse */ NgOtpInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgOtpInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputModule, declarations: [NgOtpInputComponent, KeysPipe], imports: [CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule], exports: [NgOtpInputComponent] });\r\n/** @nocollapse */ NgOtpInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputModule, providers: [KeysPipe], imports: [[\r\n            CommonModule,\r\n            FormsModule,\r\n            ReactiveFormsModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule,\r\n                        FormsModule,\r\n                        ReactiveFormsModule\r\n                    ],\r\n                    declarations: [NgOtpInputComponent, KeysPipe],\r\n                    exports: [NgOtpInputComponent],\r\n                    providers: [KeysPipe]\r\n                }]\r\n        }] });\n\nclass Config {\r\n}\n\n/*\r\n * Public API Surface of ng-otp-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgOtpInputComponent, Config as NgOtpInputConfig, NgOtpInputModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}