{"ast":null,"code":"/**\r\n * Event Dispatcher module is used for registering listeners and dispatching\r\n * events across amCharts system.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Disposer } from \"./Disposer\";\nimport * as $array from \"./Array\";\nimport * as $async from \"./AsyncPending\";\nimport * as $type from \"./Type\";\n/*export interface IEventDispatcher<T> {\r\n    isDisposed(): boolean;\r\n    dispose(): void;\r\n    hasListeners(): boolean;\r\n    enable(): void;\r\n    disable(): void;\r\n    enableType<Key extends keyof T>(type: Key): void;\r\n    disableType<Key extends keyof T>(type: Key, amount?: number): void;\r\n    isEnabled<Key extends keyof T>(type: Key): boolean;\r\n    has<C, Key extends keyof T>(type: Key, callback?: (this: C, event: T[Key]) => void, context?: C): boolean;\r\n    dispatchImmediately<Key extends keyof T>(type: Key, event: T[Key]): void;\r\n    dispatch<Key extends keyof T>(type: Key, event: T[Key]): void;\r\n    onAll<C, Key extends keyof T>(callback: (this: C, type: Key, event: T[Key]) => void, context?: C): IDisposer;\r\n    on<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;\r\n    once<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;\r\n    off<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;\r\n    off<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;\r\n    copyFrom(source: this): void;\r\n}*/\n/**\r\n * Universal Event Dispatcher.\r\n *\r\n * @important\r\n */\nvar EventDispatcher = /** @class */function () {\n  /**\r\n   * Constructor\r\n   */\n  function EventDispatcher() {\n    this._listeners = [];\n    this._killed = [];\n    this._disabled = {};\n    this._iterating = 0;\n    this._enabled = true;\n    this._disposed = false;\n  }\n  /**\r\n   * Returns if this object has been already disposed.\r\n   *\r\n   * @return Disposed?\r\n   */\n  EventDispatcher.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Dispose (destroy) this object.\r\n   */\n  EventDispatcher.prototype.dispose = function () {\n    if (!this._disposed) {\n      this._disposed = true;\n      var a = this._listeners;\n      this._iterating = 1;\n      this._listeners = null;\n      this._disabled = null;\n      try {\n        $array.each(a, function (x) {\n          x.disposer.dispose();\n        });\n      } finally {\n        this._killed = null;\n        this._iterating = null;\n      }\n    }\n  };\n  /**\r\n   * Checks if this particular event dispatcher has any listeners set.\r\n   *\r\n   * @return Has listeners?\r\n   */\n  EventDispatcher.prototype.hasListeners = function () {\n    return this._listeners.length !== 0;\n  };\n  /**\r\n   * Checks if this particular event dispatcher has any particular listeners set.\r\n   *\r\n   * @return Has particular event listeners?\r\n   */\n  EventDispatcher.prototype.hasListenersByType = function (type) {\n    return $array.any(this._listeners, function (x) {\n      return (x.type === null || x.type === type) && !x.killed;\n    });\n  };\n  /**\r\n   * Enable dispatching of events if they were previously disabled by\r\n   * `disable()`.\r\n   */\n  EventDispatcher.prototype.enable = function () {\n    this._enabled = true;\n  };\n  /**\r\n   * Disable dispatching of events until re-enabled by `enable()`.\r\n   */\n  EventDispatcher.prototype.disable = function () {\n    this._enabled = false;\n  };\n  /**\r\n   * Enable dispatching particular event, if it was disabled before by\r\n   * `disableType()`.\r\n   *\r\n   * @param type Event type\r\n   */\n  EventDispatcher.prototype.enableType = function (type) {\n    delete this._disabled[type];\n  };\n  /**\r\n   * Disable dispatching of events for a certain event type.\r\n   *\r\n   * Optionally, can set how many dispatches to skip before automatically\r\n   * re-enabling the dispatching.\r\n   *\r\n   * @param type    Event type\r\n   * @param amount  Number of event dispatches to skip\r\n   */\n  EventDispatcher.prototype.disableType = function (type, amount) {\n    if (amount === void 0) {\n      amount = Infinity;\n    }\n    this._disabled[type] = amount;\n  };\n  /**\r\n   * Removes listener from dispatcher.\r\n   *\r\n   * Will throw an exception if such listener does not exists.\r\n   *\r\n   * @param listener Listener to remove\r\n   */\n  EventDispatcher.prototype._removeListener = function (listener) {\n    if (this._iterating === 0) {\n      var index = this._listeners.indexOf(listener);\n      if (index === -1) {\n        throw new Error(\"Invalid state: could not remove listener\");\n      }\n      this._listeners.splice(index, 1);\n    } else {\n      this._killed.push(listener);\n    }\n  };\n  /**\r\n   * Removes existing listener by certain parameters.\r\n   *\r\n   * @param once         Listener's once setting\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   */\n  EventDispatcher.prototype._removeExistingListener = function (once, type, callback, context) {\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n    this._eachListener(function (info) {\n      if (info.once === once &&\n      // TODO is this correct ?\n      info.type === type && (callback == null || info.callback === callback) && info.context === context) {\n        info.disposer.dispose();\n      }\n    });\n  };\n  /**\r\n   * Checks if dispatching for particular event type is enabled.\r\n   *\r\n   * @param type  Event type\r\n   * @return Enabled?\r\n   */\n  EventDispatcher.prototype.isEnabled = function (type) {\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n    // TODO is this check correct ?\n    return this._enabled && this._listeners.length > 0 && this.hasListenersByType(type) && this._disabled[type] == null;\n  };\n  /**\r\n   * Checks if there's already a listener with specific parameters.\r\n   *\r\n   * @param type      Listener's type\r\n   * @param callback  Callback function\r\n   * @param context   Callback context\r\n   * @return Has listener?\r\n   */\n  EventDispatcher.prototype.has = function (type, callback, context) {\n    var index = $array.findIndex(this._listeners, function (info) {\n      return info.once !== true &&\n      // Ignoring \"once\" listeners\n      info.type === type && (callback == null || info.callback === callback) && info.context === context;\n    });\n    return index !== -1;\n  };\n  /**\r\n   * Checks whether event of the particular type should be dispatched.\r\n   *\r\n   * @param type  Event type\r\n   * @return Dispatch?\r\n   */\n  EventDispatcher.prototype._shouldDispatch = function (type) {\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n    var count = this._disabled[type];\n    if (!$type.isNumber(count)) {\n      return this._enabled;\n    } else {\n      if (count <= 1) {\n        delete this._disabled[type];\n      } else {\n        --this._disabled[type];\n      }\n      return false;\n    }\n  };\n  /**\r\n   * [_eachListener description]\r\n   *\r\n   * All of this extra code is needed when a listener is removed while iterating\r\n   *\r\n   * @todo Description\r\n   * @param fn [description]\r\n   */\n  EventDispatcher.prototype._eachListener = function (fn) {\n    var _this = this;\n    ++this._iterating;\n    try {\n      $array.each(this._listeners, fn);\n    } finally {\n      --this._iterating;\n      // TODO should this be inside or outside the finally ?\n      if (this._iterating === 0 && this._killed.length !== 0) {\n        // Remove killed listeners\n        $array.each(this._killed, function (killed) {\n          _this._removeListener(killed);\n        });\n        this._killed.length = 0;\n      }\n    }\n  };\n  /**\r\n   * Dispatches an event immediately without waiting for next cycle.\r\n   *\r\n   * @param type   Event type\r\n   * @param event  Event object\r\n   * @todo automatically add in type and target properties if they are missing\r\n   */\n  EventDispatcher.prototype.dispatchImmediately = function (type, event) {\n    if (this._shouldDispatch(type)) {\n      // TODO check if it's faster to use an object of listeners rather than a single big array\n      // TODO if the function throws, maybe it should keep going ?\n      this._eachListener(function (listener) {\n        if (!listener.killed && (listener.type === null || listener.type === type)) {\n          listener.dispatch(type, event);\n        }\n      });\n    }\n  };\n  /**\r\n   * Shelves the event to be dispatched within next update cycle.\r\n   *\r\n   * @param type   Event type\r\n   * @param event  Event object\r\n   * @todo automatically add in type and target properties if they are missing\r\n   */\n  EventDispatcher.prototype.dispatch = function (type, event) {\n    if (this._shouldDispatch(type)) {\n      this._eachListener(function (listener) {\n        // TODO check if it's faster to use an object of listeners rather than a single big array\n        if (!listener.killed && (listener.type === null || listener.type === type)) {\n          // TODO if the function throws, maybe it should keep going ?\n          // TODO dispatch during the update cycle, rather than using whenIdle\n          $async.whenIdle(function () {\n            if (!listener.killed) {\n              listener.dispatch(type, event);\n            }\n          });\n        }\n      });\n    }\n  };\n  /**\r\n   * Creates, catalogs and returns an [[EventListener]].\r\n   *\r\n   * Event listener can be disposed.\r\n   *\r\n   * @param once         Listener's once setting\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n   * @param dispatch\r\n   * @returns An event listener\r\n   */\n  EventDispatcher.prototype._on = function (once, type, callback, context, shouldClone, dispatch) {\n    var _this = this;\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n    this._removeExistingListener(once, type, callback, context);\n    var info = {\n      type: type,\n      callback: callback,\n      context: context,\n      shouldClone: shouldClone,\n      dispatch: dispatch,\n      killed: false,\n      once: once,\n      disposer: new Disposer(function () {\n        info.killed = true;\n        _this._removeListener(info);\n      })\n    };\n    this._listeners.push(info);\n    return info;\n  };\n  /**\r\n   * Creates an event listener to be invoked on **any** event.\r\n   *\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n   * @returns A disposable event listener\r\n   * @todo what if `listen` is called on the same function twice ?\r\n   */\n  EventDispatcher.prototype.onAll = function (callback, context, shouldClone) {\n    if (shouldClone === void 0) {\n      shouldClone = true;\n    }\n    return this._on(false, null, callback, context, shouldClone, function (type, event) {\n      return callback.call(context, type, event);\n    }).disposer;\n  };\n  /**\r\n   * Creates an event listener to be invoked on a specific event type.\r\n   *\r\n   * ```TypeScript\r\n   * series.events.on(\"hidden\", (ev) => {\r\n   *   console.log(\"Series hidden: \" + ev.target.name);\r\n   * }, this);\r\n   * ```\r\n   * ```JavaScript\r\n   * series.events.on(\"hidden\", function(ev) {\r\n   *   console.log(\"Series hidden: \" + ev.target.name);\r\n   * }, this);\r\n   * ```\r\n   * ```JSON\r\n   * {\r\n   *   // ...\r\n   *   \"series\": [{\r\n   *     // ...\r\n   *     \"events\": {\r\n   *     \t\"hidden\": function(ev) {\r\n   *     \t  console.log(\"Series hidden: \" + ev.target.name);\r\n   *     \t}\r\n   *     }\r\n   *   }]\r\n   * }\r\n   * ```\r\n   *\r\n   * The above will invoke our custom event handler whenever series we put\r\n   * event on is hidden.\r\n   *\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n   * @returns A disposable event listener\r\n   * @todo what if `listen` is called on the same function twice ?\r\n   */\n  EventDispatcher.prototype.on = function (type, callback, context, shouldClone) {\n    if (shouldClone === void 0) {\n      shouldClone = true;\n    }\n    return this._on(false, type, callback, context, shouldClone, function (type, event) {\n      return callback.call(context, event);\n    }).disposer;\n  };\n  /**\r\n   * Creates an event listener to be invoked on a specific event type once.\r\n   *\r\n   * Once the event listener is invoked, it is automatically disposed.\r\n   *\r\n   * ```TypeScript\r\n   * series.events.on(\"hidden\", (ev) => {\r\n   *   console.log(\"Series hidden: \" + ev.target.name);\r\n   * }, this);\r\n   * ```\r\n   * ```JavaScript\r\n   * series.events.on(\"hidden\", function(ev) {\r\n   *   console.log(\"Series hidden: \" + ev.target.name);\r\n   * }, this);\r\n   * ```\r\n   * ```JSON\r\n   * {\r\n   *   // ...\r\n   *   \"series\": [{\r\n   *     // ...\r\n   *     \"events\": {\r\n   *     \t\"hidden\": function(ev) {\r\n   *     \t  console.log(\"Series hidden: \" + ev.target.name);\r\n   *     \t}\r\n   *     }\r\n   *   }]\r\n   * }\r\n   * ```\r\n   *\r\n   * The above will invoke our custom event handler the first time series we\r\n   * put event on is hidden.\r\n   *\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n   * @returns A disposable event listener\r\n   * @todo what if `listen` is called on the same function twice ?\r\n   */\n  EventDispatcher.prototype.once = function (type, callback, context, shouldClone) {\n    if (shouldClone === void 0) {\n      shouldClone = true;\n    }\n    var x = this._on(true, type, callback, context, shouldClone, function (type, event) {\n      x.disposer.dispose();\n      callback.call(context, event);\n    });\n    // TODO maybe this should return a different Disposer ?\n    return x.disposer;\n  };\n  /**\r\n   * Removes the event listener with specific parameters.\r\n   *\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   */\n  EventDispatcher.prototype.off = function (type, callback, context) {\n    this._removeExistingListener(false, type, callback, context);\n  };\n  /**\r\n   * Copies all dispatcher parameters, including listeners, from another event\r\n   * dispatcher.\r\n   *\r\n   * @param source Source event dispatcher\r\n   */\n  EventDispatcher.prototype.copyFrom = function (source) {\n    var _this = this;\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n    if (source === this) {\n      throw new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\n    }\n    $array.each(source._listeners, function (x) {\n      // TODO is this correct ?\n      if (!x.killed && x.shouldClone) {\n        if (x.type === null) {\n          _this.onAll(x.callback, x.context);\n        } else if (x.once) {\n          _this.once(x.type, x.callback, x.context);\n        } else {\n          _this.on(x.type, x.callback, x.context);\n        }\n      }\n    });\n  };\n  return EventDispatcher;\n}();\nexport { EventDispatcher };\n/**\r\n * A version of the [[EventDispatcher]] that dispatches events for a specific\r\n * target object.\r\n *\r\n * @important\r\n */\nvar TargetedEventDispatcher = /** @class */function (_super) {\n  __extends(TargetedEventDispatcher, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param target Event dispatcher target\r\n   */\n  function TargetedEventDispatcher(target) {\n    var _this = _super.call(this) || this;\n    _this.target = target;\n    return _this;\n  }\n  /**\r\n   * Copies all dispatcher parameters, including listeners, from another event\r\n   * dispatcher.\r\n   *\r\n   * @param source Source event dispatcher\r\n   */\n  TargetedEventDispatcher.prototype.copyFrom = function (source) {\n    var _this = this;\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n    if (source === this) {\n      throw new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\n    }\n    $array.each(source._listeners, function (x) {\n      // TODO very hacky\n      if (x.context === source.target) {\n        return;\n      }\n      // TODO is this correct ?\n      if (!x.killed && x.shouldClone) {\n        if (x.type === null) {\n          _this.onAll(x.callback, x.context);\n        } else if (x.once) {\n          _this.once(x.type, x.callback, x.context);\n        } else {\n          _this.on(x.type, x.callback, x.context);\n        }\n      }\n    });\n  };\n  return TargetedEventDispatcher;\n}(EventDispatcher);\nexport { TargetedEventDispatcher };","map":{"version":3,"names":["__extends","Disposer","$array","$async","$type","EventDispatcher","_listeners","_killed","_disabled","_iterating","_enabled","_disposed","prototype","isDisposed","dispose","a","each","x","disposer","hasListeners","length","hasListenersByType","type","any","killed","enable","disable","enableType","disableType","amount","Infinity","_removeListener","listener","index","indexOf","Error","splice","push","_removeExistingListener","once","callback","context","_eachListener","info","isEnabled","has","findIndex","_shouldDispatch","count","isNumber","fn","_this","dispatchImmediately","event","dispatch","whenIdle","_on","shouldClone","onAll","call","on","off","copyFrom","source","TargetedEventDispatcher","_super","target"],"sources":["/home/unutu/go/src/github.com/thteam47/admin-portal/node_modules/@amcharts/amcharts4/.internal/core/utils/EventDispatcher.js"],"sourcesContent":["/**\r\n * Event Dispatcher module is used for registering listeners and dispatching\r\n * events across amCharts system.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Disposer } from \"./Disposer\";\r\nimport * as $array from \"./Array\";\r\nimport * as $async from \"./AsyncPending\";\r\nimport * as $type from \"./Type\";\r\n/*export interface IEventDispatcher<T> {\r\n    isDisposed(): boolean;\r\n    dispose(): void;\r\n    hasListeners(): boolean;\r\n    enable(): void;\r\n    disable(): void;\r\n    enableType<Key extends keyof T>(type: Key): void;\r\n    disableType<Key extends keyof T>(type: Key, amount?: number): void;\r\n    isEnabled<Key extends keyof T>(type: Key): boolean;\r\n    has<C, Key extends keyof T>(type: Key, callback?: (this: C, event: T[Key]) => void, context?: C): boolean;\r\n    dispatchImmediately<Key extends keyof T>(type: Key, event: T[Key]): void;\r\n    dispatch<Key extends keyof T>(type: Key, event: T[Key]): void;\r\n    onAll<C, Key extends keyof T>(callback: (this: C, type: Key, event: T[Key]) => void, context?: C): IDisposer;\r\n    on<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;\r\n    once<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;\r\n    off<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;\r\n    off<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;\r\n    copyFrom(source: this): void;\r\n}*/\r\n/**\r\n * Universal Event Dispatcher.\r\n *\r\n * @important\r\n */\r\nvar EventDispatcher = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function EventDispatcher() {\r\n        this._listeners = [];\r\n        this._killed = [];\r\n        this._disabled = {};\r\n        this._iterating = 0;\r\n        this._enabled = true;\r\n        this._disposed = false;\r\n    }\r\n    /**\r\n     * Returns if this object has been already disposed.\r\n     *\r\n     * @return Disposed?\r\n     */\r\n    EventDispatcher.prototype.isDisposed = function () {\r\n        return this._disposed;\r\n    };\r\n    /**\r\n     * Dispose (destroy) this object.\r\n     */\r\n    EventDispatcher.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            this._disposed = true;\r\n            var a = this._listeners;\r\n            this._iterating = 1;\r\n            this._listeners = null;\r\n            this._disabled = null;\r\n            try {\r\n                $array.each(a, function (x) {\r\n                    x.disposer.dispose();\r\n                });\r\n            }\r\n            finally {\r\n                this._killed = null;\r\n                this._iterating = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks if this particular event dispatcher has any listeners set.\r\n     *\r\n     * @return Has listeners?\r\n     */\r\n    EventDispatcher.prototype.hasListeners = function () {\r\n        return this._listeners.length !== 0;\r\n    };\r\n    /**\r\n     * Checks if this particular event dispatcher has any particular listeners set.\r\n     *\r\n     * @return Has particular event listeners?\r\n     */\r\n    EventDispatcher.prototype.hasListenersByType = function (type) {\r\n        return $array.any(this._listeners, function (x) { return (x.type === null || x.type === type) && !x.killed; });\r\n    };\r\n    /**\r\n     * Enable dispatching of events if they were previously disabled by\r\n     * `disable()`.\r\n     */\r\n    EventDispatcher.prototype.enable = function () {\r\n        this._enabled = true;\r\n    };\r\n    /**\r\n     * Disable dispatching of events until re-enabled by `enable()`.\r\n     */\r\n    EventDispatcher.prototype.disable = function () {\r\n        this._enabled = false;\r\n    };\r\n    /**\r\n     * Enable dispatching particular event, if it was disabled before by\r\n     * `disableType()`.\r\n     *\r\n     * @param type Event type\r\n     */\r\n    EventDispatcher.prototype.enableType = function (type) {\r\n        delete this._disabled[type];\r\n    };\r\n    /**\r\n     * Disable dispatching of events for a certain event type.\r\n     *\r\n     * Optionally, can set how many dispatches to skip before automatically\r\n     * re-enabling the dispatching.\r\n     *\r\n     * @param type    Event type\r\n     * @param amount  Number of event dispatches to skip\r\n     */\r\n    EventDispatcher.prototype.disableType = function (type, amount) {\r\n        if (amount === void 0) { amount = Infinity; }\r\n        this._disabled[type] = amount;\r\n    };\r\n    /**\r\n     * Removes listener from dispatcher.\r\n     *\r\n     * Will throw an exception if such listener does not exists.\r\n     *\r\n     * @param listener Listener to remove\r\n     */\r\n    EventDispatcher.prototype._removeListener = function (listener) {\r\n        if (this._iterating === 0) {\r\n            var index = this._listeners.indexOf(listener);\r\n            if (index === -1) {\r\n                throw new Error(\"Invalid state: could not remove listener\");\r\n            }\r\n            this._listeners.splice(index, 1);\r\n        }\r\n        else {\r\n            this._killed.push(listener);\r\n        }\r\n    };\r\n    /**\r\n     * Removes existing listener by certain parameters.\r\n     *\r\n     * @param once         Listener's once setting\r\n     * @param type         Listener's type\r\n     * @param callback     Callback function\r\n     * @param context      Callback context\r\n     */\r\n    EventDispatcher.prototype._removeExistingListener = function (once, type, callback, context) {\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        this._eachListener(function (info) {\r\n            if (info.once === once && // TODO is this correct ?\r\n                info.type === type &&\r\n                (callback == null || info.callback === callback) &&\r\n                info.context === context) {\r\n                info.disposer.dispose();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Checks if dispatching for particular event type is enabled.\r\n     *\r\n     * @param type  Event type\r\n     * @return Enabled?\r\n     */\r\n    EventDispatcher.prototype.isEnabled = function (type) {\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        // TODO is this check correct ?\r\n        return this._enabled && this._listeners.length > 0 && this.hasListenersByType(type) && this._disabled[type] == null;\r\n    };\r\n    /**\r\n     * Checks if there's already a listener with specific parameters.\r\n     *\r\n     * @param type      Listener's type\r\n     * @param callback  Callback function\r\n     * @param context   Callback context\r\n     * @return Has listener?\r\n     */\r\n    EventDispatcher.prototype.has = function (type, callback, context) {\r\n        var index = $array.findIndex(this._listeners, function (info) {\r\n            return info.once !== true && // Ignoring \"once\" listeners\r\n                info.type === type &&\r\n                (callback == null || info.callback === callback) &&\r\n                info.context === context;\r\n        });\r\n        return index !== -1;\r\n    };\r\n    /**\r\n     * Checks whether event of the particular type should be dispatched.\r\n     *\r\n     * @param type  Event type\r\n     * @return Dispatch?\r\n     */\r\n    EventDispatcher.prototype._shouldDispatch = function (type) {\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        var count = this._disabled[type];\r\n        if (!$type.isNumber(count)) {\r\n            return this._enabled;\r\n        }\r\n        else {\r\n            if (count <= 1) {\r\n                delete this._disabled[type];\r\n            }\r\n            else {\r\n                --this._disabled[type];\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * [_eachListener description]\r\n     *\r\n     * All of this extra code is needed when a listener is removed while iterating\r\n     *\r\n     * @todo Description\r\n     * @param fn [description]\r\n     */\r\n    EventDispatcher.prototype._eachListener = function (fn) {\r\n        var _this = this;\r\n        ++this._iterating;\r\n        try {\r\n            $array.each(this._listeners, fn);\r\n        }\r\n        finally {\r\n            --this._iterating;\r\n            // TODO should this be inside or outside the finally ?\r\n            if (this._iterating === 0 && this._killed.length !== 0) {\r\n                // Remove killed listeners\r\n                $array.each(this._killed, function (killed) {\r\n                    _this._removeListener(killed);\r\n                });\r\n                this._killed.length = 0;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Dispatches an event immediately without waiting for next cycle.\r\n     *\r\n     * @param type   Event type\r\n     * @param event  Event object\r\n     * @todo automatically add in type and target properties if they are missing\r\n     */\r\n    EventDispatcher.prototype.dispatchImmediately = function (type, event) {\r\n        if (this._shouldDispatch(type)) {\r\n            // TODO check if it's faster to use an object of listeners rather than a single big array\r\n            // TODO if the function throws, maybe it should keep going ?\r\n            this._eachListener(function (listener) {\r\n                if (!listener.killed && (listener.type === null || listener.type === type)) {\r\n                    listener.dispatch(type, event);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Shelves the event to be dispatched within next update cycle.\r\n     *\r\n     * @param type   Event type\r\n     * @param event  Event object\r\n     * @todo automatically add in type and target properties if they are missing\r\n     */\r\n    EventDispatcher.prototype.dispatch = function (type, event) {\r\n        if (this._shouldDispatch(type)) {\r\n            this._eachListener(function (listener) {\r\n                // TODO check if it's faster to use an object of listeners rather than a single big array\r\n                if (!listener.killed && (listener.type === null || listener.type === type)) {\r\n                    // TODO if the function throws, maybe it should keep going ?\r\n                    // TODO dispatch during the update cycle, rather than using whenIdle\r\n                    $async.whenIdle(function () {\r\n                        if (!listener.killed) {\r\n                            listener.dispatch(type, event);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Creates, catalogs and returns an [[EventListener]].\r\n     *\r\n     * Event listener can be disposed.\r\n     *\r\n     * @param once         Listener's once setting\r\n     * @param type         Listener's type\r\n     * @param callback     Callback function\r\n     * @param context      Callback context\r\n     * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n     * @param dispatch\r\n     * @returns An event listener\r\n     */\r\n    EventDispatcher.prototype._on = function (once, type, callback, context, shouldClone, dispatch) {\r\n        var _this = this;\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        this._removeExistingListener(once, type, callback, context);\r\n        var info = {\r\n            type: type,\r\n            callback: callback,\r\n            context: context,\r\n            shouldClone: shouldClone,\r\n            dispatch: dispatch,\r\n            killed: false,\r\n            once: once,\r\n            disposer: new Disposer(function () {\r\n                info.killed = true;\r\n                _this._removeListener(info);\r\n            })\r\n        };\r\n        this._listeners.push(info);\r\n        return info;\r\n    };\r\n    /**\r\n     * Creates an event listener to be invoked on **any** event.\r\n     *\r\n     * @param callback     Callback function\r\n     * @param context      Callback context\r\n     * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n     * @returns A disposable event listener\r\n     * @todo what if `listen` is called on the same function twice ?\r\n     */\r\n    EventDispatcher.prototype.onAll = function (callback, context, shouldClone) {\r\n        if (shouldClone === void 0) { shouldClone = true; }\r\n        return this._on(false, null, callback, context, shouldClone, function (type, event) { return callback.call(context, type, event); }).disposer;\r\n    };\r\n    /**\r\n     * Creates an event listener to be invoked on a specific event type.\r\n     *\r\n     * ```TypeScript\r\n     * series.events.on(\"hidden\", (ev) => {\r\n     *   console.log(\"Series hidden: \" + ev.target.name);\r\n     * }, this);\r\n     * ```\r\n     * ```JavaScript\r\n     * series.events.on(\"hidden\", function(ev) {\r\n     *   console.log(\"Series hidden: \" + ev.target.name);\r\n     * }, this);\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"events\": {\r\n     *     \t\"hidden\": function(ev) {\r\n     *     \t  console.log(\"Series hidden: \" + ev.target.name);\r\n     *     \t}\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * The above will invoke our custom event handler whenever series we put\r\n     * event on is hidden.\r\n     *\r\n     * @param type         Listener's type\r\n     * @param callback     Callback function\r\n     * @param context      Callback context\r\n     * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n     * @returns A disposable event listener\r\n     * @todo what if `listen` is called on the same function twice ?\r\n     */\r\n    EventDispatcher.prototype.on = function (type, callback, context, shouldClone) {\r\n        if (shouldClone === void 0) { shouldClone = true; }\r\n        return this._on(false, type, callback, context, shouldClone, function (type, event) { return callback.call(context, event); }).disposer;\r\n    };\r\n    /**\r\n     * Creates an event listener to be invoked on a specific event type once.\r\n     *\r\n     * Once the event listener is invoked, it is automatically disposed.\r\n     *\r\n     * ```TypeScript\r\n     * series.events.on(\"hidden\", (ev) => {\r\n     *   console.log(\"Series hidden: \" + ev.target.name);\r\n     * }, this);\r\n     * ```\r\n     * ```JavaScript\r\n     * series.events.on(\"hidden\", function(ev) {\r\n     *   console.log(\"Series hidden: \" + ev.target.name);\r\n     * }, this);\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"events\": {\r\n     *     \t\"hidden\": function(ev) {\r\n     *     \t  console.log(\"Series hidden: \" + ev.target.name);\r\n     *     \t}\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * The above will invoke our custom event handler the first time series we\r\n     * put event on is hidden.\r\n     *\r\n     * @param type         Listener's type\r\n     * @param callback     Callback function\r\n     * @param context      Callback context\r\n     * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n     * @returns A disposable event listener\r\n     * @todo what if `listen` is called on the same function twice ?\r\n     */\r\n    EventDispatcher.prototype.once = function (type, callback, context, shouldClone) {\r\n        if (shouldClone === void 0) { shouldClone = true; }\r\n        var x = this._on(true, type, callback, context, shouldClone, function (type, event) {\r\n            x.disposer.dispose();\r\n            callback.call(context, event);\r\n        });\r\n        // TODO maybe this should return a different Disposer ?\r\n        return x.disposer;\r\n    };\r\n    /**\r\n     * Removes the event listener with specific parameters.\r\n     *\r\n     * @param type         Listener's type\r\n     * @param callback     Callback function\r\n     * @param context      Callback context\r\n     */\r\n    EventDispatcher.prototype.off = function (type, callback, context) {\r\n        this._removeExistingListener(false, type, callback, context);\r\n    };\r\n    /**\r\n     * Copies all dispatcher parameters, including listeners, from another event\r\n     * dispatcher.\r\n     *\r\n     * @param source Source event dispatcher\r\n     */\r\n    EventDispatcher.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        if (source === this) {\r\n            throw new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\r\n        }\r\n        $array.each(source._listeners, function (x) {\r\n            // TODO is this correct ?\r\n            if (!x.killed && x.shouldClone) {\r\n                if (x.type === null) {\r\n                    _this.onAll(x.callback, x.context);\r\n                }\r\n                else if (x.once) {\r\n                    _this.once(x.type, x.callback, x.context);\r\n                }\r\n                else {\r\n                    _this.on(x.type, x.callback, x.context);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    return EventDispatcher;\r\n}());\r\nexport { EventDispatcher };\r\n/**\r\n * A version of the [[EventDispatcher]] that dispatches events for a specific\r\n * target object.\r\n *\r\n * @important\r\n */\r\nvar TargetedEventDispatcher = /** @class */ (function (_super) {\r\n    __extends(TargetedEventDispatcher, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param target Event dispatcher target\r\n     */\r\n    function TargetedEventDispatcher(target) {\r\n        var _this = _super.call(this) || this;\r\n        _this.target = target;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Copies all dispatcher parameters, including listeners, from another event\r\n     * dispatcher.\r\n     *\r\n     * @param source Source event dispatcher\r\n     */\r\n    TargetedEventDispatcher.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        if (source === this) {\r\n            throw new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\r\n        }\r\n        $array.each(source._listeners, function (x) {\r\n            // TODO very hacky\r\n            if (x.context === source.target) {\r\n                return;\r\n            }\r\n            // TODO is this correct ?\r\n            if (!x.killed && x.shouldClone) {\r\n                if (x.type === null) {\r\n                    _this.onAll(x.callback, x.context);\r\n                }\r\n                else if (x.once) {\r\n                    _this.once(x.type, x.callback, x.context);\r\n                }\r\n                else {\r\n                    _this.on(x.type, x.callback, x.context);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    return TargetedEventDispatcher;\r\n}(EventDispatcher));\r\nexport { TargetedEventDispatcher };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}