{"ast":null,"code":"/**\r\n * A collection of network-related functions\r\n */\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $type from \"./Type\";\n/**\r\n * Loads an external file via its URL.\r\n *\r\n * Please note that this is an asynchronous function.\r\n *\r\n * It will not return the result, but rather a `Promise`.\r\n *\r\n * You can use the `await` notion, or `then()`.\r\n *\r\n * ```TypeScript\r\n * // Using await\r\n * let response = await Net.load( \"http://www.my.com/data.json\" );\r\n * console.log( response.response );\r\n *\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n * ```JavaScript\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n *\r\n * @async\r\n * @param url      URL for the file to load\r\n * @param target   A target element that is requesting the net load\r\n * @param options  Request options\r\n * @return Result (Promise)\r\n */\nexport function load(url, target, options) {\n  return new Promise(function (success, error) {\n    // Is return type Blob?\n    var isBlob = $type.hasValue(options) && options.responseType == \"blob\";\n    // Create request and set up handlers\n    var xhr = new XMLHttpRequest();\n    xhr.onload = function () {\n      if (xhr.status === 200) {\n        var response = void 0;\n        var blob_1;\n        if (isBlob) {\n          blob_1 = xhr.response;\n          readBlob(blob_1).then(function (response) {\n            var output = {\n              xhr: xhr,\n              error: false,\n              response: response,\n              blob: blob_1,\n              type: xhr.getResponseHeader(\"Content-Type\"),\n              target: target\n            };\n            success(output);\n          });\n          return;\n        } else {\n          response = xhr.responseText || xhr.response;\n        }\n        var output = {\n          xhr: xhr,\n          error: false,\n          response: response,\n          blob: blob_1,\n          type: xhr.getResponseHeader(\"Content-Type\"),\n          target: target\n        };\n        success(output);\n      } else {\n        error({\n          xhr: xhr,\n          error: true,\n          type: xhr.getResponseHeader(\"Content-Type\"),\n          target: target\n        });\n      }\n    };\n    xhr.onerror = function () {\n      error({\n        xhr: xhr,\n        error: true,\n        type: xhr.getResponseHeader(\"Content-Type\"),\n        target: target\n      });\n    };\n    // Open request\n    xhr.open(\"GET\", url, true);\n    if (options && options.withCredentials) {\n      xhr.withCredentials = true;\n    }\n    // Process options\n    if ($type.hasValue(options)) {\n      if ($type.hasValue(options.requestHeaders)) {\n        for (var i = 0; i < options.requestHeaders.length; i++) {\n          var header = options.requestHeaders[i];\n          xhr.setRequestHeader(header.key, header.value);\n        }\n      }\n      if ($type.hasValue(options.responseType)) {\n        xhr.responseType = options.responseType;\n      }\n    }\n    // Send request\n    xhr.send();\n  });\n}\n/**\r\n * Returns textual representation of a Blob object.\r\n *\r\n * @param   blob  Target blob\r\n * @return        Text promise\r\n */\nexport function readBlob(blob) {\n  return new Promise(function (success, error) {\n    var reader = new FileReader();\n    reader.onload = function (event) {\n      success(reader.result);\n    };\n    reader.onerror = function (e) {\n      error(e);\n    };\n    reader.readAsText(blob);\n  });\n}","map":{"version":3,"names":["$type","load","url","target","options","Promise","success","error","isBlob","hasValue","responseType","xhr","XMLHttpRequest","onload","status","response","blob_1","readBlob","then","output","blob","type","getResponseHeader","responseText","onerror","open","withCredentials","requestHeaders","i","length","header","setRequestHeader","key","value","send","reader","FileReader","event","result","e","readAsText"],"sources":["/home/unutu/go/src/github.com/thteam47/admin-portal/node_modules/@amcharts/amcharts4/.internal/core/utils/Net.js"],"sourcesContent":["/**\r\n * A collection of network-related functions\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $type from \"./Type\";\r\n/**\r\n * Loads an external file via its URL.\r\n *\r\n * Please note that this is an asynchronous function.\r\n *\r\n * It will not return the result, but rather a `Promise`.\r\n *\r\n * You can use the `await` notion, or `then()`.\r\n *\r\n * ```TypeScript\r\n * // Using await\r\n * let response = await Net.load( \"http://www.my.com/data.json\" );\r\n * console.log( response.response );\r\n *\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n * ```JavaScript\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n *\r\n * @async\r\n * @param url      URL for the file to load\r\n * @param target   A target element that is requesting the net load\r\n * @param options  Request options\r\n * @return Result (Promise)\r\n */\r\nexport function load(url, target, options) {\r\n    return new Promise(function (success, error) {\r\n        // Is return type Blob?\r\n        var isBlob = $type.hasValue(options) && options.responseType == \"blob\";\r\n        // Create request and set up handlers\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.onload = function () {\r\n            if (xhr.status === 200) {\r\n                var response = void 0;\r\n                var blob_1;\r\n                if (isBlob) {\r\n                    blob_1 = xhr.response;\r\n                    readBlob(blob_1).then(function (response) {\r\n                        var output = {\r\n                            xhr: xhr,\r\n                            error: false,\r\n                            response: response,\r\n                            blob: blob_1,\r\n                            type: xhr.getResponseHeader(\"Content-Type\"),\r\n                            target: target\r\n                        };\r\n                        success(output);\r\n                    });\r\n                    return;\r\n                }\r\n                else {\r\n                    response = xhr.responseText || xhr.response;\r\n                }\r\n                var output = {\r\n                    xhr: xhr,\r\n                    error: false,\r\n                    response: response,\r\n                    blob: blob_1,\r\n                    type: xhr.getResponseHeader(\"Content-Type\"),\r\n                    target: target\r\n                };\r\n                success(output);\r\n            }\r\n            else {\r\n                error({\r\n                    xhr: xhr,\r\n                    error: true,\r\n                    type: xhr.getResponseHeader(\"Content-Type\"),\r\n                    target: target\r\n                });\r\n            }\r\n        };\r\n        xhr.onerror = function () {\r\n            error({\r\n                xhr: xhr,\r\n                error: true,\r\n                type: xhr.getResponseHeader(\"Content-Type\"),\r\n                target: target\r\n            });\r\n        };\r\n        // Open request\r\n        xhr.open(\"GET\", url, true);\r\n        if (options && options.withCredentials) {\r\n            xhr.withCredentials = true;\r\n        }\r\n        // Process options\r\n        if ($type.hasValue(options)) {\r\n            if ($type.hasValue(options.requestHeaders)) {\r\n                for (var i = 0; i < options.requestHeaders.length; i++) {\r\n                    var header = options.requestHeaders[i];\r\n                    xhr.setRequestHeader(header.key, header.value);\r\n                }\r\n            }\r\n            if ($type.hasValue(options.responseType)) {\r\n                xhr.responseType = options.responseType;\r\n            }\r\n        }\r\n        // Send request\r\n        xhr.send();\r\n    });\r\n}\r\n/**\r\n * Returns textual representation of a Blob object.\r\n *\r\n * @param   blob  Target blob\r\n * @return        Text promise\r\n */\r\nexport function readBlob(blob) {\r\n    return new Promise(function (success, error) {\r\n        var reader = new FileReader();\r\n        reader.onload = function (event) {\r\n            success(reader.result);\r\n        };\r\n        reader.onerror = function (e) {\r\n            error(e);\r\n        };\r\n        reader.readAsText(blob);\r\n    });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}