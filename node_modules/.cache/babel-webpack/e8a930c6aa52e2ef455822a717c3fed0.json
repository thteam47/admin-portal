{"ast":null,"code":"import { Ajax, extend, getValue, isNullOrUndefined, merge, setValue } from '@syncfusion/ej2-base';\n\n/**\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\n */\nclass Query {\n  /**\n   * Constructor for Query class.\n   * @param  {string|string[]} from?\n   * @hidden\n   */\n  constructor(from) {\n    /** @hidden */\n    this.subQuery = null;\n    /** @hidden */\n    this.isChild = false;\n    /** @hidden */\n    this.distincts = [];\n    this.queries = [];\n    this.key = '';\n    this.fKey = '';\n    if (typeof from === 'string') {\n      this.fromTable = from;\n    } else if (from && from instanceof Array) {\n      this.lookups = from;\n    }\n    this.expands = [];\n    this.sortedColumns = [];\n    this.groupedColumns = [];\n    this.subQuery = null;\n    this.isChild = false;\n    this.params = [];\n    this.lazyLoad = [];\n    return this;\n  }\n  /**\n   * Sets the primary key.\n   * @param  {string} field - Defines the column field.\n   */\n  setKey(field) {\n    this.key = field;\n    return this;\n  }\n  /**\n   * Sets default DataManager to execute query.\n   * @param  {DataManager} dataManager - Defines the DataManager.\n   */\n  using(dataManager) {\n    this.dataManager = dataManager;\n    return this;\n  }\n  /**\n   * Executes query with the given DataManager.\n   * @param  {DataManager} dataManager - Defines the DataManager.\n   * @param  {Function} done - Defines the success callback.\n   * @param  {Function} fail - Defines the failure callback.\n   * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\n   *\n   * <pre>\n   * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\n   * let query: Query = new Query();\n   * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\n   * let promise: Promise< Object > = query.execute(dataManager);\n   * promise.then((e: { result: Object }) => { });\n   * </pre>\n   */\n  execute(dataManager, done, fail, always) {\n    dataManager = dataManager || this.dataManager;\n    if (dataManager) {\n      return dataManager.executeQuery(this, done, fail, always);\n    }\n    return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n  }\n  /**\n   * Executes query with the local datasource.\n   * @param  {DataManager} dataManager - Defines the DataManager.\n   */\n  executeLocal(dataManager) {\n    dataManager = dataManager || this.dataManager;\n    if (dataManager) {\n      return dataManager.executeLocal(this);\n    }\n    return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n  }\n  /**\n   * Creates deep copy of the Query object.\n   */\n  clone() {\n    let cloned = new Query();\n    cloned.queries = this.queries.slice(0);\n    cloned.key = this.key;\n    cloned.isChild = this.isChild;\n    cloned.dataManager = this.dataManager;\n    cloned.fromTable = this.fromTable;\n    cloned.params = this.params.slice(0);\n    cloned.expands = this.expands.slice(0);\n    cloned.sortedColumns = this.sortedColumns.slice(0);\n    cloned.groupedColumns = this.groupedColumns.slice(0);\n    cloned.subQuerySelector = this.subQuerySelector;\n    cloned.subQuery = this.subQuery;\n    cloned.fKey = this.fKey;\n    cloned.isCountRequired = this.isCountRequired;\n    cloned.distincts = this.distincts.slice(0);\n    cloned.lazyLoad = this.lazyLoad.slice(0);\n    return cloned;\n  }\n  /**\n   * Specifies the name of table to retrieve data in query execution.\n   * @param  {string} tableName - Defines the table name.\n   */\n  from(tableName) {\n    this.fromTable = tableName;\n    return this;\n  }\n  /**\n   * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\n   * @param  {string} key - Defines the key of additional parameter.\n   * @param  {Function|string} value - Defines the value for the key.\n   */\n  addParams(key, value) {\n    if (typeof value === 'function') {\n      this.params.push({\n        key: key,\n        fn: value\n      });\n    } else {\n      this.params.push({\n        key: key,\n        value: value\n      });\n    }\n    return this;\n  }\n  /**\n   * @hidden\n   */\n  distinct(fields) {\n    if (typeof fields === 'string') {\n      this.distincts = [].slice.call([fields], 0);\n    } else {\n      this.distincts = fields.slice(0);\n    }\n    return this;\n  }\n  /**\n   * Expands the related table.\n   * @param  {string|Object[]} tables\n   */\n  expand(tables) {\n    if (typeof tables === 'string') {\n      this.expands = [].slice.call([tables], 0);\n    } else {\n      this.expands = tables.slice(0);\n    }\n    return this;\n  }\n  /**\n   * Filter data with given filter criteria.\n   * @param  {string|Predicate} fieldName - Defines the column field or Predicate.\n   * @param  {string} operator - Defines the operator how to filter data.\n   * @param  {string|number|boolean} value - Defines the values to match with data.\n   * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   */\n  where(fieldName, operator, value, ignoreCase, ignoreAccent) {\n    operator = operator ? operator.toLowerCase() : null;\n    let predicate = null;\n    if (typeof fieldName === 'string') {\n      predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);\n    } else if (fieldName instanceof Predicate) {\n      predicate = fieldName;\n    }\n    this.queries.push({\n      fn: 'onWhere',\n      e: predicate\n    });\n    return this;\n  }\n  /**\n   * Search data with given search criteria.\n   * @param  {string|number|boolean} searchKey - Defines the search key.\n   * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n   * @param  {string} operator - Defines the operator how to search data.\n   * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   */\n  search(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {\n    if (typeof fieldNames === 'string') {\n      fieldNames = [fieldNames];\n    }\n    if (!operator || operator === 'none') {\n      operator = 'contains';\n    }\n    let comparer = DataUtil.fnOperators[operator];\n    this.queries.push({\n      fn: 'onSearch',\n      e: {\n        fieldNames: fieldNames,\n        operator: operator,\n        searchKey: searchKey,\n        ignoreCase: ignoreCase,\n        ignoreAccent: ignoreAccent,\n        comparer: comparer\n      }\n    });\n    return this;\n  }\n  /**\n   * Sort the data with given sort criteria.\n   * By default, sort direction is ascending.\n   * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n   * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n   */\n  sortBy(fieldName, comparer, isFromGroup) {\n    return this.sortByForeignKey(fieldName, comparer, isFromGroup);\n  }\n  /**\n   * Sort the data with given sort criteria.\n   * By default, sort direction is ascending.\n   * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n   * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n   * @param  {string} direction - Defines the sort direction .\n   */\n  sortByForeignKey(fieldName, comparer, isFromGroup, direction) {\n    let order = !isNullOrUndefined(direction) ? direction : 'ascending';\n    let sorts;\n    let temp;\n    if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\n      fieldName = fieldName.replace(/ desc$/i, '');\n      comparer = 'descending';\n    }\n    if (!comparer || typeof comparer === 'string') {\n      order = comparer ? comparer.toLowerCase() : 'ascending';\n      comparer = DataUtil.fnSort(comparer);\n    }\n    if (isFromGroup) {\n      sorts = Query.filterQueries(this.queries, 'onSortBy');\n      for (let i = 0; i < sorts.length; i++) {\n        temp = sorts[i].e.fieldName;\n        if (typeof temp === 'string') {\n          if (temp === fieldName) {\n            return this;\n          }\n        } else if (temp instanceof Array) {\n          for (let j = 0; j < temp.length; j++) {\n            if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\n              return this;\n            }\n          }\n        }\n      }\n    }\n    this.queries.push({\n      fn: 'onSortBy',\n      e: {\n        fieldName: fieldName,\n        comparer: comparer,\n        direction: order\n      }\n    });\n    return this;\n  }\n  /**\n   * Sorts data in descending order.\n   * @param  {string} fieldName - Defines the column field.\n   */\n  sortByDesc(fieldName) {\n    return this.sortBy(fieldName, 'descending');\n  }\n  /**\n   * Groups data with the given field name.\n   * @param  {string} fieldName - Defines the column field.\n   */\n  group(fieldName, fn, format) {\n    this.sortBy(fieldName, null, true);\n    this.queries.push({\n      fn: 'onGroup',\n      e: {\n        fieldName: fieldName,\n        comparer: fn ? fn : null,\n        format: format ? format : null\n      }\n    });\n    return this;\n  }\n  /**\n   * Gets data based on the given page index and size.\n   * @param  {number} pageIndex - Defines the current page index.\n   * @param  {number} pageSize - Defines the no of records per page.\n   */\n  page(pageIndex, pageSize) {\n    this.queries.push({\n      fn: 'onPage',\n      e: {\n        pageIndex: pageIndex,\n        pageSize: pageSize\n      }\n    });\n    return this;\n  }\n  /**\n   * Gets data based on the given start and end index.\n   * @param  {number} start - Defines the start index of the datasource.\n   * @param  {number} end - Defines the end index of the datasource.\n   */\n  range(start, end) {\n    this.queries.push({\n      fn: 'onRange',\n      e: {\n        start: start,\n        end: end\n      }\n    });\n    return this;\n  }\n  /**\n   * Gets data from the top of the data source based on given number of records count.\n   * @param  {number} nos - Defines the no of records to retrieve from datasource.\n   */\n  take(nos) {\n    this.queries.push({\n      fn: 'onTake',\n      e: {\n        nos: nos\n      }\n    });\n    return this;\n  }\n  /**\n   * Skips data with given number of records count from the top of the data source.\n   * @param  {number} nos - Defines the no of records skip in the datasource.\n   */\n  skip(nos) {\n    this.queries.push({\n      fn: 'onSkip',\n      e: {\n        nos: nos\n      }\n    });\n    return this;\n  }\n  /**\n   * Selects specified columns from the data source.\n   * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n   */\n  select(fieldNames) {\n    if (typeof fieldNames === 'string') {\n      fieldNames = [].slice.call([fieldNames], 0);\n    }\n    this.queries.push({\n      fn: 'onSelect',\n      e: {\n        fieldNames: fieldNames\n      }\n    });\n    return this;\n  }\n  /**\n   * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\n   * @param  {Query} query - Defines the query to relate two tables.\n   * @param  {Function} selectorFn - Defines the custom function to select records.\n   */\n  hierarchy(query, selectorFn) {\n    this.subQuerySelector = selectorFn;\n    this.subQuery = query;\n    return this;\n  }\n  /**\n   * Sets the foreign key which is used to get data from the related table.\n   * @param  {string} key - Defines the foreign key.\n   */\n  foreignKey(key) {\n    this.fKey = key;\n    return this;\n  }\n  /**\n   * It is used to get total number of records in the DataManager execution result.\n   */\n  requiresCount() {\n    this.isCountRequired = true;\n    return this;\n  }\n  //type - sum, avg, min, max\n  /**\n   * Aggregate the data with given type and field name.\n   * @param  {string} type - Defines the aggregate type.\n   * @param  {string} field - Defines the column field to aggregate.\n   */\n  aggregate(type, field) {\n    this.queries.push({\n      fn: 'onAggregates',\n      e: {\n        field: field,\n        type: type\n      }\n    });\n    return this;\n  }\n  /**\n   * Pass array of filterColumn query for performing filter operation.\n   * @param  {QueryOptions[]} queries\n   * @param  {string} name\n   * @hidden\n   */\n  static filterQueries(queries, name) {\n    return queries.filter(q => {\n      return q.fn === name;\n    });\n  }\n  /**\n   * To get the list of queries which is already filtered in current data source.\n   * @param  {Object[]} queries\n   * @param  {string[]} singles\n   * @hidden\n   */\n  static filterQueryLists(queries, singles) {\n    let filtered = queries.filter(q => {\n      return singles.indexOf(q.fn) !== -1;\n    });\n    let res = {};\n    for (let i = 0; i < filtered.length; i++) {\n      if (!res[filtered[i].fn]) {\n        res[filtered[i].fn] = filtered[i].e;\n      }\n    }\n    return res;\n  }\n}\n/**\n * Predicate class is used to generate complex filter criteria.\n * This will be used by DataManager to perform multiple filtering operation.\n */\nclass Predicate {\n  /**\n   * Constructor for Predicate class.\n   * @param  {string|Predicate} field\n   * @param  {string} operator\n   * @param  {string|number|boolean|Predicate|Predicate[]} value\n   * @param  {boolean=false} ignoreCase\n   * @hidden\n   */\n  constructor(field, operator, value, ignoreCase = false, ignoreAccent) {\n    /** @hidden */\n    this.ignoreAccent = false;\n    /** @hidden */\n    this.isComplex = false;\n    if (typeof field === 'string') {\n      this.field = field;\n      this.operator = operator.toLowerCase();\n      this.value = value;\n      this.ignoreCase = ignoreCase;\n      this.ignoreAccent = ignoreAccent;\n      this.isComplex = false;\n      this.comparer = DataUtil.fnOperators.processOperator(this.operator);\n    } else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\n      this.isComplex = true;\n      this.condition = operator.toLowerCase();\n      this.predicates = [field];\n      if (value instanceof Array) {\n        [].push.apply(this.predicates, value);\n      } else {\n        this.predicates.push(value);\n      }\n    }\n    return this;\n  }\n  /**\n   * Adds n-number of new predicates on existing predicate with “and” condition.\n   * @param  {Object[]} args - Defines the collection of predicates.\n   */\n  static and(...args) {\n    return Predicate.combinePredicates([].slice.call(args, 0), 'and');\n  }\n  /**\n   * Adds new predicate on existing predicate with “and” condition.\n   * @param  {string} field - Defines the column field.\n   * @param  {string} operator - Defines the operator how to filter data.\n   * @param  {string} value - Defines the values to match with data.\n   * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   */\n  and(field, operator, value, ignoreCase, ignoreAccent) {\n    return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);\n  }\n  /**\n   * Adds n-number of new predicates on existing predicate with “or” condition.\n   * @param  {Object[]} args - Defines the collection of predicates.\n   */\n  static or(...args) {\n    return Predicate.combinePredicates([].slice.call(args, 0), 'or');\n  }\n  /**\n   * Adds new predicate on existing predicate with “or” condition.\n   * @param  {string} field - Defines the column field.\n   * @param  {string} operator - Defines the operator how to filter data.\n   * @param  {string} value - Defines the values to match with data.\n   * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   */\n  or(field, operator, value, ignoreCase, ignoreAccent) {\n    return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);\n  }\n  /**\n   * Converts plain JavaScript object to Predicate object.\n   * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\n   */\n  static fromJson(json) {\n    if (json instanceof Array) {\n      let res = [];\n      for (let i = 0, len = json.length; i < len; i++) {\n        res.push(this.fromJSONData(json[i]));\n      }\n      return res;\n    }\n    let pred = json;\n    return this.fromJSONData(pred);\n  }\n  /**\n   * Validate the record based on the predicates.\n   * @param  {Object} record - Defines the datasource record.\n   */\n  validate(record) {\n    let predicate = this.predicates ? this.predicates : [];\n    let isAnd;\n    let ret;\n    if (!this.isComplex && this.comparer) {\n      return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n    }\n    isAnd = this.condition === 'and';\n    for (let i = 0; i < predicate.length; i++) {\n      ret = predicate[i].validate(record);\n      if (isAnd) {\n        if (!ret) {\n          return false;\n        }\n      } else {\n        if (ret) {\n          return true;\n        }\n      }\n    }\n    return isAnd;\n  }\n  /**\n   * Converts predicates to plain JavaScript.\n   * This method is uses Json stringify when serializing Predicate object.\n   */\n  toJson() {\n    let predicates;\n    let p;\n    if (this.isComplex) {\n      predicates = [];\n      p = this.predicates;\n      for (let i = 0; i < p.length; i++) {\n        predicates.push(p[i].toJson());\n      }\n    }\n    return {\n      isComplex: this.isComplex,\n      field: this.field,\n      operator: this.operator,\n      value: this.value,\n      ignoreCase: this.ignoreCase,\n      ignoreAccent: this.ignoreAccent,\n      condition: this.condition,\n      predicates: predicates\n    };\n  }\n  static combinePredicates(predicates, operator) {\n    if (predicates.length === 1) {\n      if (!(predicates[0] instanceof Array)) {\n        return predicates[0];\n      }\n      predicates = predicates[0];\n    }\n    return new Predicate(predicates[0], operator, predicates.slice(1));\n  }\n  static combine(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {\n    if (field instanceof Predicate) {\n      return Predicate[condition](pred, field);\n    }\n    if (typeof field === 'string') {\n      return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));\n    }\n    return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\n  }\n  static fromJSONData(json) {\n    let preds = json.predicates || [];\n    let len = preds.length;\n    let predicates = [];\n    let result;\n    for (let i = 0; i < len; i++) {\n      predicates.push(this.fromJSONData(preds[i]));\n    }\n    if (!json.isComplex) {\n      result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);\n    } else {\n      result = new Predicate(predicates[0], json.condition, predicates.slice(1));\n    }\n    return result;\n  }\n}\nconst consts = {\n  GroupGuid: '{271bbba0-1ee7}'\n};\n/**\n * Data manager common utility methods.\n * @hidden\n */\nclass DataUtil {\n  /**\n   * Returns the value by invoking the provided parameter function.\n   * If the paramater is not of type function then it will be returned as it is.\n   * @param  {Function|string|string[]|number} value\n   * @param  {Object} inst?\n   * @hidden\n   */\n  static getValue(value, inst) {\n    if (typeof value === 'function') {\n      return value.call(inst || {});\n    }\n    return value;\n  }\n  /**\n   * Returns true if the input string ends with given string.\n   * @param  {string} input\n   * @param  {string} substr\n   */\n  static endsWith(input, substr) {\n    return input.slice && input.slice(-substr.length) === substr;\n  }\n  /**\n   * Returns true if the input string starts with given string.\n   * @param  {string} str\n   * @param  {string} startstr\n   */\n  static startsWith(input, start) {\n    return input.slice(0, start.length) === start;\n  }\n  /**\n   * To return the sorting function based on the string.\n   * @param  {string} order\n   * @hidden\n   */\n  static fnSort(order) {\n    order = order ? DataUtil.toLowerCase(order) : 'ascending';\n    if (order === 'ascending') {\n      return this.fnAscending;\n    }\n    return this.fnDescending;\n  }\n  /**\n   * Comparer function which is used to sort the data in ascending order.\n   * @param  {string|number} x\n   * @param  {string|number} y\n   * @returns number\n   */\n  static fnAscending(x, y) {\n    if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n      return -1;\n    }\n    if (y === null || y === undefined) {\n      return -1;\n    }\n    if (typeof x === 'string') {\n      return x.localeCompare(y);\n    }\n    if (x === null || x === undefined) {\n      return 1;\n    }\n    return x - y;\n  }\n  /**\n   * Comparer function which is used to sort the data in descending order.\n   * @param  {string|number} x\n   * @param  {string|number} y\n   * @returns number\n   */\n  static fnDescending(x, y) {\n    if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n      return -1;\n    }\n    if (y === null || y === undefined) {\n      return 1;\n    }\n    if (typeof x === 'string') {\n      return x.localeCompare(y) * -1;\n    }\n    if (x === null || x === undefined) {\n      return -1;\n    }\n    return y - x;\n  }\n  static extractFields(obj, fields) {\n    let newObj = {};\n    for (let i = 0; i < fields.length; i++) {\n      newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);\n    }\n    return newObj;\n  }\n  /**\n   * Select objects by given fields from jsonArray.\n   * @param  {Object[]} jsonArray\n   * @param  {string[]} fields\n   */\n  static select(jsonArray, fields) {\n    let newData = [];\n    for (let i = 0; i < jsonArray.length; i++) {\n      newData.push(this.extractFields(jsonArray[i], fields));\n    }\n    return newData;\n  }\n  /**\n   * Group the input data based on the field name.\n   * It also performs aggregation of the grouped records based on the aggregates paramater.\n   * @param  {Object[]} jsonArray\n   * @param  {string} field?\n   * @param  {Object[]} agg?\n   * @param  {number} level?\n   * @param  {Object[]} groupDs?\n   */\n  static group(jsonArray, field, aggregates, level, groupDs, format, isLazyLoad) {\n    level = level || 1;\n    let jsonData = jsonArray;\n    let guid = 'GroupGuid';\n    if (jsonData.GroupGuid === consts[guid]) {\n      for (let j = 0; j < jsonData.length; j++) {\n        if (!isNullOrUndefined(groupDs)) {\n          let indx = -1;\n          let temp = groupDs.filter(e => {\n            return e.key === jsonData[j].key;\n          });\n          indx = groupDs.indexOf(temp[0]);\n          jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format, isLazyLoad);\n          jsonData[j].count = groupDs[indx].count;\n        } else {\n          jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format, isLazyLoad);\n          jsonData[j].count = jsonData[j].items.length;\n        }\n      }\n      jsonData.childLevels += 1;\n      return jsonData;\n    }\n    let grouped = {};\n    let groupedArray = [];\n    groupedArray.GroupGuid = consts[guid];\n    groupedArray.level = level;\n    groupedArray.childLevels = 0;\n    groupedArray.records = jsonData;\n    for (let i = 0; i < jsonData.length; i++) {\n      let val = this.getVal(jsonData, i, field);\n      if (!isNullOrUndefined(format)) {\n        val = format(val, field);\n      }\n      if (!grouped[val]) {\n        grouped[val] = {\n          key: val,\n          count: 0,\n          items: [],\n          aggregates: {},\n          field: field\n        };\n        groupedArray.push(grouped[val]);\n        if (!isNullOrUndefined(groupDs)) {\n          let tempObj = groupDs.filter(e => {\n            return e.key === grouped[val].key;\n          });\n          grouped[val].count = tempObj[0].count;\n        }\n      }\n      grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;\n      if (!isLazyLoad || isLazyLoad && aggregates.length) {\n        grouped[val].items.push(jsonData[i]);\n      }\n    }\n    if (aggregates && aggregates.length) {\n      for (let i = 0; i < groupedArray.length; i++) {\n        let res = {};\n        let fn;\n        let aggs = aggregates;\n        for (let j = 0; j < aggregates.length; j++) {\n          fn = DataUtil.aggregates[aggregates[j].type];\n          if (!isNullOrUndefined(groupDs)) {\n            let temp = groupDs.filter(e => {\n              return e.key === groupedArray[i].key;\n            });\n            if (fn) {\n              res[aggs[j].field + ' - ' + aggs[j].type] = fn(temp[0].items, aggs[j].field);\n            }\n          } else {\n            if (fn) {\n              res[aggs[j].field + ' - ' + aggs[j].type] = fn(groupedArray[i].items, aggs[j].field);\n            }\n          }\n        }\n        groupedArray[i].aggregates = res;\n      }\n    }\n    if (isLazyLoad && groupedArray.length && aggregates.length) {\n      for (let i = 0; i < groupedArray.length; i++) {\n        groupedArray[i].items = [];\n      }\n    }\n    return jsonData.length && groupedArray || jsonData;\n  }\n  /**\n   * It is used to categorize the multiple items based on a specific field in jsonArray.\n   * The hierarchical queries are commonly required when you use foreign key binding.\n   * @param  {string} fKey\n   * @param  {string} from\n   * @param  {Object[]} source\n   * @param  {Group} lookup?\n   * @param  {string} pKey?\n   * @hidden\n   */\n  static buildHierarchy(fKey, from, source, lookup, pKey) {\n    let i;\n    let grp = {};\n    let temp;\n    if (lookup.result) {\n      lookup = lookup.result;\n    }\n    if (lookup.GroupGuid) {\n      this.throwError('DataManager: Do not have support Grouping in hierarchy');\n    }\n    for (i = 0; i < lookup.length; i++) {\n      let fKeyData = this.getObject(fKey, lookup[i]);\n      temp = grp[fKeyData] || (grp[fKeyData] = []);\n      temp.push(lookup[i]);\n    }\n    for (i = 0; i < source.length; i++) {\n      let fKeyData = this.getObject(pKey || fKey, source[i]);\n      source[i][from] = grp[fKeyData];\n    }\n  }\n  /**\n   * The method used to get the field names which started with specified characters.\n   * @param  {Object} obj\n   * @param  {string[]} fields?\n   * @param  {string} prefix?\n   * @hidden\n   */\n  static getFieldList(obj, fields, prefix) {\n    if (prefix === undefined) {\n      prefix = '';\n    }\n    if (fields === undefined || fields === null) {\n      return this.getFieldList(obj, [], prefix);\n    }\n    let copyObj = obj;\n    let keys = Object.keys(obj);\n    for (let prop of keys) {\n      if (typeof copyObj[prop] === 'object' && !(copyObj[prop] instanceof Array)) {\n        this.getFieldList(copyObj[prop], fields, prefix + prop + '.');\n      } else {\n        fields.push(prefix + prop);\n      }\n    }\n    return fields;\n  }\n  /**\n   * Gets the value of the property in the given object.\n   * The complex object can be accessed by providing the field names concatenated with dot(.).\n   * @param  {string} nameSpace - The name of the property to be accessed.\n   * @param  {Object} from - Defines the source object.\n   */\n  static getObject(nameSpace, from) {\n    if (!nameSpace) {\n      return from;\n    }\n    if (!from) {\n      return undefined;\n    }\n    if (nameSpace.indexOf('.') === -1) {\n      return from[nameSpace];\n    }\n    let value = from;\n    let splits = nameSpace.split('.');\n    for (let i = 0; i < splits.length; i++) {\n      if (value == null) {\n        break;\n      }\n      value = value[splits[i]];\n    }\n    return value;\n  }\n  /**\n   * To set value for the nameSpace in desired object.\n   * @param {string} nameSpace - String value to the get the inner object.\n   * @param {Object} value - Value that you need to set.\n   * @param {Object} obj - Object to get the inner object value.\n   * @return { [key: string]: Object; } | Object\n   * @hidden\n   */\n  static setValue(nameSpace, value, obj) {\n    let keys = nameSpace.toString().split('.');\n    let start = obj || {};\n    let fromObj = start;\n    let i;\n    let length = keys.length;\n    let key;\n    for (i = 0; i < length; i++) {\n      key = keys[i];\n      if (i + 1 === length) {\n        fromObj[key] = value === undefined ? undefined : value;\n      } else if (isNullOrUndefined(fromObj[key])) {\n        fromObj[key] = {};\n      }\n      fromObj = fromObj[key];\n    }\n    return start;\n  }\n  /**\n   * Sort the given data based on the field and comparer.\n   * @param  {Object[]} ds - Defines the input data.\n   * @param  {string} field - Defines the field to be sorted.\n   * @param  {Function} comparer - Defines the comparer function used to sort the records.\n   */\n  static sort(ds, field, comparer) {\n    if (ds.length <= 1) {\n      return ds;\n    }\n    let middle = parseInt((ds.length / 2).toString(), 10);\n    let left = ds.slice(0, middle);\n    let right = ds.slice(middle);\n    left = this.sort(left, field, comparer);\n    right = this.sort(right, field, comparer);\n    return this.merge(left, right, field, comparer);\n  }\n  static ignoreDiacritics(value) {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    let result = value.split('');\n    let newValue = result.map(temp => temp in DataUtil.diacritics ? DataUtil.diacritics[temp] : temp);\n    return newValue.join('');\n  }\n  static merge(left, right, fieldName, comparer) {\n    let result = [];\n    let current;\n    while (left.length > 0 || right.length > 0) {\n      if (left.length > 0 && right.length > 0) {\n        if (comparer) {\n          current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;\n        } else {\n          current = left[0][fieldName] < left[0][fieldName] ? left : right;\n        }\n      } else {\n        current = left.length > 0 ? left : right;\n      }\n      result.push(current.shift());\n    }\n    return result;\n  }\n  static getVal(array, index, field) {\n    return field ? this.getObject(field, array[index]) : array[index];\n  }\n  static toLowerCase(val) {\n    return val ? typeof val === 'string' ? val.toLowerCase() : val.toString() : val === 0 || val === false ? val.toString() : '';\n  }\n  /**\n   * To perform the filter operation with specified adaptor and returns the result.\n   * @param  {Object} adaptor\n   * @param  {string} fnName\n   * @param  {Object} param1?\n   * @param  {Object} param2?\n   * @hidden\n   */\n  static callAdaptorFunction(adaptor, fnName, param1, param2) {\n    if (fnName in adaptor) {\n      let res = adaptor[fnName](param1, param2);\n      if (!isNullOrUndefined(res)) {\n        param1 = res;\n      }\n    }\n    return param1;\n  }\n  static getAddParams(adp, dm, query) {\n    let req = {};\n    DataUtil.callAdaptorFunction(adp, 'addParams', {\n      dm: dm,\n      query: query,\n      params: query.params,\n      reqParams: req\n    });\n    return req;\n  }\n  /**\n   * Checks wheather the given input is a plain object or not.\n   * @param  {Object|Object[]} obj\n   */\n  static isPlainObject(obj) {\n    return !!obj && obj.constructor === Object;\n  }\n  /**\n   * Returns true when the browser cross origin request.\n   */\n  static isCors() {\n    let xhr = null;\n    let request = 'XMLHttpRequest';\n    try {\n      xhr = new window[request]();\n    } catch (e) {\n      // No exception handling\n    }\n    return !!xhr && 'withCredentials' in xhr;\n  }\n  /**\n   * Generate random GUID value which will be prefixed with the given value.\n   * @param  {string} prefix\n   */\n  static getGuid(prefix) {\n    let hexs = '0123456789abcdef';\n    let rand;\n    return (prefix || '') + '00000000-0000-4000-0000-000000000000'.replace(/0/g, (val, i) => {\n      if ('crypto' in window && 'getRandomValues' in crypto) {\n        let arr = new Uint8Array(1);\n        window.crypto.getRandomValues(arr);\n        rand = arr[0] % 16 | 0;\n      } else {\n        rand = Math.random() * 16 | 0;\n      }\n      return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];\n    });\n  }\n  /**\n   * Checks wheather the given value is null or not.\n   * @param  {string|Object} val\n   * @returns boolean\n   */\n  static isNull(val) {\n    return val === undefined || val === null;\n  }\n  /**\n   * To get the required items from collection of objects.\n   * @param  {Object[]} array\n   * @param  {string} field\n   * @param  {Function} comparer\n   * @returns Object\n   * @hidden\n   */\n  static getItemFromComparer(array, field, comparer) {\n    let keyVal;\n    let current;\n    let key;\n    let i = 0;\n    let castRequired = typeof DataUtil.getVal(array, 0, field) === 'string';\n    if (array.length) {\n      while (isNullOrUndefined(keyVal) && i < array.length) {\n        keyVal = DataUtil.getVal(array, i, field);\n        key = array[i++];\n      }\n    }\n    for (; i < array.length; i++) {\n      current = DataUtil.getVal(array, i, field);\n      if (isNullOrUndefined(current)) {\n        continue;\n      }\n      if (castRequired) {\n        keyVal = +keyVal;\n        current = +current;\n      }\n      if (comparer(keyVal, current) > 0) {\n        keyVal = current;\n        key = array[i];\n      }\n    }\n    return key;\n  }\n  /**\n   * To get distinct values of Array or Array of Objects.\n   * @param  {Object[]} json\n   * @param  {string} field\n   * @param  {boolean} requiresCompleteRecord\n   * @returns Object[]\n   * * distinct array of objects is return when requiresCompleteRecord set as true.\n   * @hidden\n   */\n  static distinct(json, fieldName, requiresCompleteRecord) {\n    requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;\n    let result = [];\n    let val;\n    let tmp = {};\n    json.forEach((data, index) => {\n      val = typeof json[index] === 'object' ? DataUtil.getVal(json, index, fieldName) : json[index];\n      if (!(val in tmp)) {\n        result.push(!requiresCompleteRecord ? val : json[index]);\n        tmp[val] = 1;\n      }\n    });\n    return result;\n  }\n  /**\n   * Process the given records based on the datamanager string.\n   * @param  {string} datamanager\n   * @param  {Object[]} records\n   */\n  static processData(dm, records) {\n    let query = this.prepareQuery(dm);\n    let sampledata = new DataManager(records);\n    if (dm.requiresCounts) {\n      query.requiresCount();\n    }\n    let result = sampledata.executeLocal(query);\n    let returnValue = {\n      result: dm.requiresCounts ? result.result : result,\n      count: result.count,\n      aggregates: JSON.stringify(result.aggregates)\n    };\n    return dm.requiresCounts ? returnValue : result;\n  }\n  static prepareQuery(dm) {\n    let query = new Query();\n    if (dm.select) {\n      query.select(dm.select);\n    }\n    if (dm.where) {\n      let where = DataUtil.parse.parseJson(dm.where);\n      where.filter(pred => {\n        if (isNullOrUndefined(pred.condition)) {\n          query.where(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent);\n        } else {\n          let predicateList = [];\n          if (pred.field) {\n            predicateList.push(new Predicate(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent));\n          } else {\n            predicateList = predicateList.concat(this.getPredicate(pred.predicates));\n          }\n          if (pred.condition == 'or') {\n            query.where(Predicate.or(predicateList));\n          } else if (pred.condition == 'and') {\n            query.where(Predicate.and(predicateList));\n          }\n        }\n      });\n    }\n    if (dm.search) {\n      let search = DataUtil.parse.parseJson(dm.search);\n      search.filter(e => query.search(e.key, e.fields, e['operator'], e['ignoreCase'], e['ignoreAccent']));\n    }\n    if (dm.aggregates) {\n      dm.aggregates.filter(e => query.aggregate(e.type, e.field));\n    }\n    if (dm.sorted) {\n      dm.sorted.filter(e => query.sortBy(e.name, e.direction));\n    }\n    if (dm.skip) {\n      query.skip(dm.skip);\n    }\n    if (dm.take) {\n      query.take(dm.take);\n    }\n    if (dm.group) {\n      dm.group.filter(grp => query.group(grp));\n    }\n    return query;\n  }\n  static getPredicate(pred) {\n    let mainPred = [];\n    for (let i = 0; i < pred.length; i++) {\n      let e = pred[i];\n      if (e.field) {\n        mainPred.push(new Predicate(e.field, e.operator, e.value, e.ignoreCase, e.ignoreAccent));\n      } else {\n        let childPred = [];\n        let cpre = this.getPredicate(e.predicates);\n        for (const prop of Object.keys(cpre)) {\n          childPred.push(cpre[prop]);\n        }\n        mainPred.push(e.condition == 'or' ? Predicate.or(childPred) : Predicate.and(childPred));\n      }\n    }\n    return mainPred;\n  }\n}\n/**\n * Specifies the value which will be used to adjust the date value to server timezone.\n * @default null\n */\nDataUtil.serverTimezoneOffset = null;\n/**\n * Species whether are not to be parsed with serverTimezoneOffset value.\n * @hidden\n */\nDataUtil.timeZoneHandling = true;\n/**\n * Throw error with the given string as message.\n * @param  {string} er\n */\nDataUtil.throwError = error => {\n  try {\n    throw new Error(error);\n  } catch (e) {\n    throw e.message + '\\n' + e.stack;\n  }\n};\nDataUtil.aggregates = {\n  /**\n   * Calculate sum of the given field in the data.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   */\n  sum: (ds, field) => {\n    let result = 0;\n    let val;\n    let castRequired = typeof DataUtil.getVal(ds, 0, field) !== 'number';\n    for (let i = 0; i < ds.length; i++) {\n      val = DataUtil.getVal(ds, i, field);\n      if (!isNaN(val) && val !== null) {\n        if (castRequired) {\n          val = +val;\n        }\n        result += val;\n      }\n    }\n    return result;\n  },\n  /**\n   * Calculate average value of the given field in the data.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   */\n  average: (ds, field) => {\n    return DataUtil.aggregates.sum(ds, field) / ds.length;\n  },\n  /**\n   * Returns the min value of the data based on the field.\n   * @param  {Object[]} ds\n   * @param  {string|Function} field\n   */\n  min: (ds, field) => {\n    let comparer;\n    if (typeof field === 'function') {\n      comparer = field;\n      field = null;\n    }\n    return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));\n  },\n  /**\n   * Returns the max value of the data based on the field.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   * @returns number\n   */\n  max: (ds, field) => {\n    let comparer;\n    if (typeof field === 'function') {\n      comparer = field;\n      field = null;\n    }\n    return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));\n  },\n  /**\n   * Returns the total number of true value present in the data based on the given boolean field name.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   */\n  truecount: (ds, field) => {\n    return new DataManager(ds).executeLocal(new Query().where(field, 'equal', true, true)).length;\n  },\n  /**\n   * Returns the total number of false value present in the data based on the given boolean field name.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   */\n  falsecount: (ds, field) => {\n    return new DataManager(ds).executeLocal(new Query().where(field, 'equal', false, true)).length;\n  },\n  /**\n   * Returns the length of the given data.\n   * @param  {Object[]} ds\n   * @param  {string} field?\n   * @returns number\n   */\n  count: (ds, field) => {\n    return ds.length;\n  }\n};\n/**\n * Specifies the Object with filter operators.\n */\nDataUtil.operatorSymbols = {\n  '<': 'lessthan',\n  '>': 'greaterthan',\n  '<=': 'lessthanorequal',\n  '>=': 'greaterthanorequal',\n  '==': 'equal',\n  '!=': 'notequal',\n  '*=': 'contains',\n  '$=': 'endswith',\n  '^=': 'startswith'\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * * It will be used for date/number type filter query.\n */\nDataUtil.odBiOperator = {\n  '<': ' lt ',\n  '>': ' gt ',\n  '<=': ' le ',\n  '>=': ' ge ',\n  '==': ' eq ',\n  '!=': ' ne ',\n  'lessthan': ' lt ',\n  'lessthanorequal': ' le ',\n  'greaterthan': ' gt ',\n  'greaterthanorequal': ' ge ',\n  'equal': ' eq ',\n  'notequal': ' ne '\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odUniOperator = {\n  '$=': 'endswith',\n  '^=': 'startswith',\n  '*=': 'substringof',\n  'endswith': 'endswith',\n  'startswith': 'startswith',\n  'contains': 'substringof'\n};\n/**\n * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odv4UniOperator = {\n  '$=': 'endswith',\n  '^=': 'startswith',\n  '*=': 'contains',\n  'endswith': 'endswith',\n  'startswith': 'startswith',\n  'contains': 'contains'\n};\nDataUtil.diacritics = {\n  '\\u24B6': 'A',\n  '\\uFF21': 'A',\n  '\\u00C0': 'A',\n  '\\u00C1': 'A',\n  '\\u00C2': 'A',\n  '\\u1EA6': 'A',\n  '\\u1EA4': 'A',\n  '\\u1EAA': 'A',\n  '\\u1EA8': 'A',\n  '\\u00C3': 'A',\n  '\\u0100': 'A',\n  '\\u0102': 'A',\n  '\\u1EB0': 'A',\n  '\\u1EAE': 'A',\n  '\\u1EB4': 'A',\n  '\\u1EB2': 'A',\n  '\\u0226': 'A',\n  '\\u01E0': 'A',\n  '\\u00C4': 'A',\n  '\\u01DE': 'A',\n  '\\u1EA2': 'A',\n  '\\u00C5': 'A',\n  '\\u01FA': 'A',\n  '\\u01CD': 'A',\n  '\\u0200': 'A',\n  '\\u0202': 'A',\n  '\\u1EA0': 'A',\n  '\\u1EAC': 'A',\n  '\\u1EB6': 'A',\n  '\\u1E00': 'A',\n  '\\u0104': 'A',\n  '\\u023A': 'A',\n  '\\u2C6F': 'A',\n  '\\uA732': 'AA',\n  '\\u00C6': 'AE',\n  '\\u01FC': 'AE',\n  '\\u01E2': 'AE',\n  '\\uA734': 'AO',\n  '\\uA736': 'AU',\n  '\\uA738': 'AV',\n  '\\uA73A': 'AV',\n  '\\uA73C': 'AY',\n  '\\u24B7': 'B',\n  '\\uFF22': 'B',\n  '\\u1E02': 'B',\n  '\\u1E04': 'B',\n  '\\u1E06': 'B',\n  '\\u0243': 'B',\n  '\\u0182': 'B',\n  '\\u0181': 'B',\n  '\\u24B8': 'C',\n  '\\uFF23': 'C',\n  '\\u0106': 'C',\n  '\\u0108': 'C',\n  '\\u010A': 'C',\n  '\\u010C': 'C',\n  '\\u00C7': 'C',\n  '\\u1E08': 'C',\n  '\\u0187': 'C',\n  '\\u023B': 'C',\n  '\\uA73E': 'C',\n  '\\u24B9': 'D',\n  '\\uFF24': 'D',\n  '\\u1E0A': 'D',\n  '\\u010E': 'D',\n  '\\u1E0C': 'D',\n  '\\u1E10': 'D',\n  '\\u1E12': 'D',\n  '\\u1E0E': 'D',\n  '\\u0110': 'D',\n  '\\u018B': 'D',\n  '\\u018A': 'D',\n  '\\u0189': 'D',\n  '\\uA779': 'D',\n  '\\u01F1': 'DZ',\n  '\\u01C4': 'DZ',\n  '\\u01F2': 'Dz',\n  '\\u01C5': 'Dz',\n  '\\u24BA': 'E',\n  '\\uFF25': 'E',\n  '\\u00C8': 'E',\n  '\\u00C9': 'E',\n  '\\u00CA': 'E',\n  '\\u1EC0': 'E',\n  '\\u1EBE': 'E',\n  '\\u1EC4': 'E',\n  '\\u1EC2': 'E',\n  '\\u1EBC': 'E',\n  '\\u0112': 'E',\n  '\\u1E14': 'E',\n  '\\u1E16': 'E',\n  '\\u0114': 'E',\n  '\\u0116': 'E',\n  '\\u00CB': 'E',\n  '\\u1EBA': 'E',\n  '\\u011A': 'E',\n  '\\u0204': 'E',\n  '\\u0206': 'E',\n  '\\u1EB8': 'E',\n  '\\u1EC6': 'E',\n  '\\u0228': 'E',\n  '\\u1E1C': 'E',\n  '\\u0118': 'E',\n  '\\u1E18': 'E',\n  '\\u1E1A': 'E',\n  '\\u0190': 'E',\n  '\\u018E': 'E',\n  '\\u24BB': 'F',\n  '\\uFF26': 'F',\n  '\\u1E1E': 'F',\n  '\\u0191': 'F',\n  '\\uA77B': 'F',\n  '\\u24BC': 'G',\n  '\\uFF27': 'G',\n  '\\u01F4': 'G',\n  '\\u011C': 'G',\n  '\\u1E20': 'G',\n  '\\u011E': 'G',\n  '\\u0120': 'G',\n  '\\u01E6': 'G',\n  '\\u0122': 'G',\n  '\\u01E4': 'G',\n  '\\u0193': 'G',\n  '\\uA7A0': 'G',\n  '\\uA77D': 'G',\n  '\\uA77E': 'G',\n  '\\u24BD': 'H',\n  '\\uFF28': 'H',\n  '\\u0124': 'H',\n  '\\u1E22': 'H',\n  '\\u1E26': 'H',\n  '\\u021E': 'H',\n  '\\u1E24': 'H',\n  '\\u1E28': 'H',\n  '\\u1E2A': 'H',\n  '\\u0126': 'H',\n  '\\u2C67': 'H',\n  '\\u2C75': 'H',\n  '\\uA78D': 'H',\n  '\\u24BE': 'I',\n  '\\uFF29': 'I',\n  '\\u00CC': 'I',\n  '\\u00CD': 'I',\n  '\\u00CE': 'I',\n  '\\u0128': 'I',\n  '\\u012A': 'I',\n  '\\u012C': 'I',\n  '\\u0130': 'I',\n  '\\u00CF': 'I',\n  '\\u1E2E': 'I',\n  '\\u1EC8': 'I',\n  '\\u01CF': 'I',\n  '\\u0208': 'I',\n  '\\u020A': 'I',\n  '\\u1ECA': 'I',\n  '\\u012E': 'I',\n  '\\u1E2C': 'I',\n  '\\u0197': 'I',\n  '\\u24BF': 'J',\n  '\\uFF2A': 'J',\n  '\\u0134': 'J',\n  '\\u0248': 'J',\n  '\\u24C0': 'K',\n  '\\uFF2B': 'K',\n  '\\u1E30': 'K',\n  '\\u01E8': 'K',\n  '\\u1E32': 'K',\n  '\\u0136': 'K',\n  '\\u1E34': 'K',\n  '\\u0198': 'K',\n  '\\u2C69': 'K',\n  '\\uA740': 'K',\n  '\\uA742': 'K',\n  '\\uA744': 'K',\n  '\\uA7A2': 'K',\n  '\\u24C1': 'L',\n  '\\uFF2C': 'L',\n  '\\u013F': 'L',\n  '\\u0139': 'L',\n  '\\u013D': 'L',\n  '\\u1E36': 'L',\n  '\\u1E38': 'L',\n  '\\u013B': 'L',\n  '\\u1E3C': 'L',\n  '\\u1E3A': 'L',\n  '\\u0141': 'L',\n  '\\u023D': 'L',\n  '\\u2C62': 'L',\n  '\\u2C60': 'L',\n  '\\uA748': 'L',\n  '\\uA746': 'L',\n  '\\uA780': 'L',\n  '\\u01C7': 'LJ',\n  '\\u01C8': 'Lj',\n  '\\u24C2': 'M',\n  '\\uFF2D': 'M',\n  '\\u1E3E': 'M',\n  '\\u1E40': 'M',\n  '\\u1E42': 'M',\n  '\\u2C6E': 'M',\n  '\\u019C': 'M',\n  '\\u24C3': 'N',\n  '\\uFF2E': 'N',\n  '\\u01F8': 'N',\n  '\\u0143': 'N',\n  '\\u00D1': 'N',\n  '\\u1E44': 'N',\n  '\\u0147': 'N',\n  '\\u1E46': 'N',\n  '\\u0145': 'N',\n  '\\u1E4A': 'N',\n  '\\u1E48': 'N',\n  '\\u0220': 'N',\n  '\\u019D': 'N',\n  '\\uA790': 'N',\n  '\\uA7A4': 'N',\n  '\\u01CA': 'NJ',\n  '\\u01CB': 'Nj',\n  '\\u24C4': 'O',\n  '\\uFF2F': 'O',\n  '\\u00D2': 'O',\n  '\\u00D3': 'O',\n  '\\u00D4': 'O',\n  '\\u1ED2': 'O',\n  '\\u1ED0': 'O',\n  '\\u1ED6': 'O',\n  '\\u1ED4': 'O',\n  '\\u00D5': 'O',\n  '\\u1E4C': 'O',\n  '\\u022C': 'O',\n  '\\u1E4E': 'O',\n  '\\u014C': 'O',\n  '\\u1E50': 'O',\n  '\\u1E52': 'O',\n  '\\u014E': 'O',\n  '\\u022E': 'O',\n  '\\u0230': 'O',\n  '\\u00D6': 'O',\n  '\\u022A': 'O',\n  '\\u1ECE': 'O',\n  '\\u0150': 'O',\n  '\\u01D1': 'O',\n  '\\u020C': 'O',\n  '\\u020E': 'O',\n  '\\u01A0': 'O',\n  '\\u1EDC': 'O',\n  '\\u1EDA': 'O',\n  '\\u1EE0': 'O',\n  '\\u1EDE': 'O',\n  '\\u1EE2': 'O',\n  '\\u1ECC': 'O',\n  '\\u1ED8': 'O',\n  '\\u01EA': 'O',\n  '\\u01EC': 'O',\n  '\\u00D8': 'O',\n  '\\u01FE': 'O',\n  '\\u0186': 'O',\n  '\\u019F': 'O',\n  '\\uA74A': 'O',\n  '\\uA74C': 'O',\n  '\\u01A2': 'OI',\n  '\\uA74E': 'OO',\n  '\\u0222': 'OU',\n  '\\u24C5': 'P',\n  '\\uFF30': 'P',\n  '\\u1E54': 'P',\n  '\\u1E56': 'P',\n  '\\u01A4': 'P',\n  '\\u2C63': 'P',\n  '\\uA750': 'P',\n  '\\uA752': 'P',\n  '\\uA754': 'P',\n  '\\u24C6': 'Q',\n  '\\uFF31': 'Q',\n  '\\uA756': 'Q',\n  '\\uA758': 'Q',\n  '\\u024A': 'Q',\n  '\\u24C7': 'R',\n  '\\uFF32': 'R',\n  '\\u0154': 'R',\n  '\\u1E58': 'R',\n  '\\u0158': 'R',\n  '\\u0210': 'R',\n  '\\u0212': 'R',\n  '\\u1E5A': 'R',\n  '\\u1E5C': 'R',\n  '\\u0156': 'R',\n  '\\u1E5E': 'R',\n  '\\u024C': 'R',\n  '\\u2C64': 'R',\n  '\\uA75A': 'R',\n  '\\uA7A6': 'R',\n  '\\uA782': 'R',\n  '\\u24C8': 'S',\n  '\\uFF33': 'S',\n  '\\u1E9E': 'S',\n  '\\u015A': 'S',\n  '\\u1E64': 'S',\n  '\\u015C': 'S',\n  '\\u1E60': 'S',\n  '\\u0160': 'S',\n  '\\u1E66': 'S',\n  '\\u1E62': 'S',\n  '\\u1E68': 'S',\n  '\\u0218': 'S',\n  '\\u015E': 'S',\n  '\\u2C7E': 'S',\n  '\\uA7A8': 'S',\n  '\\uA784': 'S',\n  '\\u24C9': 'T',\n  '\\uFF34': 'T',\n  '\\u1E6A': 'T',\n  '\\u0164': 'T',\n  '\\u1E6C': 'T',\n  '\\u021A': 'T',\n  '\\u0162': 'T',\n  '\\u1E70': 'T',\n  '\\u1E6E': 'T',\n  '\\u0166': 'T',\n  '\\u01AC': 'T',\n  '\\u01AE': 'T',\n  '\\u023E': 'T',\n  '\\uA786': 'T',\n  '\\uA728': 'TZ',\n  '\\u24CA': 'U',\n  '\\uFF35': 'U',\n  '\\u00D9': 'U',\n  '\\u00DA': 'U',\n  '\\u00DB': 'U',\n  '\\u0168': 'U',\n  '\\u1E78': 'U',\n  '\\u016A': 'U',\n  '\\u1E7A': 'U',\n  '\\u016C': 'U',\n  '\\u00DC': 'U',\n  '\\u01DB': 'U',\n  '\\u01D7': 'U',\n  '\\u01D5': 'U',\n  '\\u01D9': 'U',\n  '\\u1EE6': 'U',\n  '\\u016E': 'U',\n  '\\u0170': 'U',\n  '\\u01D3': 'U',\n  '\\u0214': 'U',\n  '\\u0216': 'U',\n  '\\u01AF': 'U',\n  '\\u1EEA': 'U',\n  '\\u1EE8': 'U',\n  '\\u1EEE': 'U',\n  '\\u1EEC': 'U',\n  '\\u1EF0': 'U',\n  '\\u1EE4': 'U',\n  '\\u1E72': 'U',\n  '\\u0172': 'U',\n  '\\u1E76': 'U',\n  '\\u1E74': 'U',\n  '\\u0244': 'U',\n  '\\u24CB': 'V',\n  '\\uFF36': 'V',\n  '\\u1E7C': 'V',\n  '\\u1E7E': 'V',\n  '\\u01B2': 'V',\n  '\\uA75E': 'V',\n  '\\u0245': 'V',\n  '\\uA760': 'VY',\n  '\\u24CC': 'W',\n  '\\uFF37': 'W',\n  '\\u1E80': 'W',\n  '\\u1E82': 'W',\n  '\\u0174': 'W',\n  '\\u1E86': 'W',\n  '\\u1E84': 'W',\n  '\\u1E88': 'W',\n  '\\u2C72': 'W',\n  '\\u24CD': 'X',\n  '\\uFF38': 'X',\n  '\\u1E8A': 'X',\n  '\\u1E8C': 'X',\n  '\\u24CE': 'Y',\n  '\\uFF39': 'Y',\n  '\\u1EF2': 'Y',\n  '\\u00DD': 'Y',\n  '\\u0176': 'Y',\n  '\\u1EF8': 'Y',\n  '\\u0232': 'Y',\n  '\\u1E8E': 'Y',\n  '\\u0178': 'Y',\n  '\\u1EF6': 'Y',\n  '\\u1EF4': 'Y',\n  '\\u01B3': 'Y',\n  '\\u024E': 'Y',\n  '\\u1EFE': 'Y',\n  '\\u24CF': 'Z',\n  '\\uFF3A': 'Z',\n  '\\u0179': 'Z',\n  '\\u1E90': 'Z',\n  '\\u017B': 'Z',\n  '\\u017D': 'Z',\n  '\\u1E92': 'Z',\n  '\\u1E94': 'Z',\n  '\\u01B5': 'Z',\n  '\\u0224': 'Z',\n  '\\u2C7F': 'Z',\n  '\\u2C6B': 'Z',\n  '\\uA762': 'Z',\n  '\\u24D0': 'a',\n  '\\uFF41': 'a',\n  '\\u1E9A': 'a',\n  '\\u00E0': 'a',\n  '\\u00E1': 'a',\n  '\\u00E2': 'a',\n  '\\u1EA7': 'a',\n  '\\u1EA5': 'a',\n  '\\u1EAB': 'a',\n  '\\u1EA9': 'a',\n  '\\u00E3': 'a',\n  '\\u0101': 'a',\n  '\\u0103': 'a',\n  '\\u1EB1': 'a',\n  '\\u1EAF': 'a',\n  '\\u1EB5': 'a',\n  '\\u1EB3': 'a',\n  '\\u0227': 'a',\n  '\\u01E1': 'a',\n  '\\u00E4': 'a',\n  '\\u01DF': 'a',\n  '\\u1EA3': 'a',\n  '\\u00E5': 'a',\n  '\\u01FB': 'a',\n  '\\u01CE': 'a',\n  '\\u0201': 'a',\n  '\\u0203': 'a',\n  '\\u1EA1': 'a',\n  '\\u1EAD': 'a',\n  '\\u1EB7': 'a',\n  '\\u1E01': 'a',\n  '\\u0105': 'a',\n  '\\u2C65': 'a',\n  '\\u0250': 'a',\n  '\\uA733': 'aa',\n  '\\u00E6': 'ae',\n  '\\u01FD': 'ae',\n  '\\u01E3': 'ae',\n  '\\uA735': 'ao',\n  '\\uA737': 'au',\n  '\\uA739': 'av',\n  '\\uA73B': 'av',\n  '\\uA73D': 'ay',\n  '\\u24D1': 'b',\n  '\\uFF42': 'b',\n  '\\u1E03': 'b',\n  '\\u1E05': 'b',\n  '\\u1E07': 'b',\n  '\\u0180': 'b',\n  '\\u0183': 'b',\n  '\\u0253': 'b',\n  '\\u24D2': 'c',\n  '\\uFF43': 'c',\n  '\\u0107': 'c',\n  '\\u0109': 'c',\n  '\\u010B': 'c',\n  '\\u010D': 'c',\n  '\\u00E7': 'c',\n  '\\u1E09': 'c',\n  '\\u0188': 'c',\n  '\\u023C': 'c',\n  '\\uA73F': 'c',\n  '\\u2184': 'c',\n  '\\u24D3': 'd',\n  '\\uFF44': 'd',\n  '\\u1E0B': 'd',\n  '\\u010F': 'd',\n  '\\u1E0D': 'd',\n  '\\u1E11': 'd',\n  '\\u1E13': 'd',\n  '\\u1E0F': 'd',\n  '\\u0111': 'd',\n  '\\u018C': 'd',\n  '\\u0256': 'd',\n  '\\u0257': 'd',\n  '\\uA77A': 'd',\n  '\\u01F3': 'dz',\n  '\\u01C6': 'dz',\n  '\\u24D4': 'e',\n  '\\uFF45': 'e',\n  '\\u00E8': 'e',\n  '\\u00E9': 'e',\n  '\\u00EA': 'e',\n  '\\u1EC1': 'e',\n  '\\u1EBF': 'e',\n  '\\u1EC5': 'e',\n  '\\u1EC3': 'e',\n  '\\u1EBD': 'e',\n  '\\u0113': 'e',\n  '\\u1E15': 'e',\n  '\\u1E17': 'e',\n  '\\u0115': 'e',\n  '\\u0117': 'e',\n  '\\u00EB': 'e',\n  '\\u1EBB': 'e',\n  '\\u011B': 'e',\n  '\\u0205': 'e',\n  '\\u0207': 'e',\n  '\\u1EB9': 'e',\n  '\\u1EC7': 'e',\n  '\\u0229': 'e',\n  '\\u1E1D': 'e',\n  '\\u0119': 'e',\n  '\\u1E19': 'e',\n  '\\u1E1B': 'e',\n  '\\u0247': 'e',\n  '\\u025B': 'e',\n  '\\u01DD': 'e',\n  '\\u24D5': 'f',\n  '\\uFF46': 'f',\n  '\\u1E1F': 'f',\n  '\\u0192': 'f',\n  '\\uA77C': 'f',\n  '\\u24D6': 'g',\n  '\\uFF47': 'g',\n  '\\u01F5': 'g',\n  '\\u011D': 'g',\n  '\\u1E21': 'g',\n  '\\u011F': 'g',\n  '\\u0121': 'g',\n  '\\u01E7': 'g',\n  '\\u0123': 'g',\n  '\\u01E5': 'g',\n  '\\u0260': 'g',\n  '\\uA7A1': 'g',\n  '\\u1D79': 'g',\n  '\\uA77F': 'g',\n  '\\u24D7': 'h',\n  '\\uFF48': 'h',\n  '\\u0125': 'h',\n  '\\u1E23': 'h',\n  '\\u1E27': 'h',\n  '\\u021F': 'h',\n  '\\u1E25': 'h',\n  '\\u1E29': 'h',\n  '\\u1E2B': 'h',\n  '\\u1E96': 'h',\n  '\\u0127': 'h',\n  '\\u2C68': 'h',\n  '\\u2C76': 'h',\n  '\\u0265': 'h',\n  '\\u0195': 'hv',\n  '\\u24D8': 'i',\n  '\\uFF49': 'i',\n  '\\u00EC': 'i',\n  '\\u00ED': 'i',\n  '\\u00EE': 'i',\n  '\\u0129': 'i',\n  '\\u012B': 'i',\n  '\\u012D': 'i',\n  '\\u00EF': 'i',\n  '\\u1E2F': 'i',\n  '\\u1EC9': 'i',\n  '\\u01D0': 'i',\n  '\\u0209': 'i',\n  '\\u020B': 'i',\n  '\\u1ECB': 'i',\n  '\\u012F': 'i',\n  '\\u1E2D': 'i',\n  '\\u0268': 'i',\n  '\\u0131': 'i',\n  '\\u24D9': 'j',\n  '\\uFF4A': 'j',\n  '\\u0135': 'j',\n  '\\u01F0': 'j',\n  '\\u0249': 'j',\n  '\\u24DA': 'k',\n  '\\uFF4B': 'k',\n  '\\u1E31': 'k',\n  '\\u01E9': 'k',\n  '\\u1E33': 'k',\n  '\\u0137': 'k',\n  '\\u1E35': 'k',\n  '\\u0199': 'k',\n  '\\u2C6A': 'k',\n  '\\uA741': 'k',\n  '\\uA743': 'k',\n  '\\uA745': 'k',\n  '\\uA7A3': 'k',\n  '\\u24DB': 'l',\n  '\\uFF4C': 'l',\n  '\\u0140': 'l',\n  '\\u013A': 'l',\n  '\\u013E': 'l',\n  '\\u1E37': 'l',\n  '\\u1E39': 'l',\n  '\\u013C': 'l',\n  '\\u1E3D': 'l',\n  '\\u1E3B': 'l',\n  '\\u017F': 'l',\n  '\\u0142': 'l',\n  '\\u019A': 'l',\n  '\\u026B': 'l',\n  '\\u2C61': 'l',\n  '\\uA749': 'l',\n  '\\uA781': 'l',\n  '\\uA747': 'l',\n  '\\u01C9': 'lj',\n  '\\u24DC': 'm',\n  '\\uFF4D': 'm',\n  '\\u1E3F': 'm',\n  '\\u1E41': 'm',\n  '\\u1E43': 'm',\n  '\\u0271': 'm',\n  '\\u026F': 'm',\n  '\\u24DD': 'n',\n  '\\uFF4E': 'n',\n  '\\u01F9': 'n',\n  '\\u0144': 'n',\n  '\\u00F1': 'n',\n  '\\u1E45': 'n',\n  '\\u0148': 'n',\n  '\\u1E47': 'n',\n  '\\u0146': 'n',\n  '\\u1E4B': 'n',\n  '\\u1E49': 'n',\n  '\\u019E': 'n',\n  '\\u0272': 'n',\n  '\\u0149': 'n',\n  '\\uA791': 'n',\n  '\\uA7A5': 'n',\n  '\\u01CC': 'nj',\n  '\\u24DE': 'o',\n  '\\uFF4F': 'o',\n  '\\u00F2': 'o',\n  '\\u00F3': 'o',\n  '\\u00F4': 'o',\n  '\\u1ED3': 'o',\n  '\\u1ED1': 'o',\n  '\\u1ED7': 'o',\n  '\\u1ED5': 'o',\n  '\\u00F5': 'o',\n  '\\u1E4D': 'o',\n  '\\u022D': 'o',\n  '\\u1E4F': 'o',\n  '\\u014D': 'o',\n  '\\u1E51': 'o',\n  '\\u1E53': 'o',\n  '\\u014F': 'o',\n  '\\u022F': 'o',\n  '\\u0231': 'o',\n  '\\u00F6': 'o',\n  '\\u022B': 'o',\n  '\\u1ECF': 'o',\n  '\\u0151': 'o',\n  '\\u01D2': 'o',\n  '\\u020D': 'o',\n  '\\u020F': 'o',\n  '\\u01A1': 'o',\n  '\\u1EDD': 'o',\n  '\\u1EDB': 'o',\n  '\\u1EE1': 'o',\n  '\\u1EDF': 'o',\n  '\\u1EE3': 'o',\n  '\\u1ECD': 'o',\n  '\\u1ED9': 'o',\n  '\\u01EB': 'o',\n  '\\u01ED': 'o',\n  '\\u00F8': 'o',\n  '\\u01FF': 'o',\n  '\\u0254': 'o',\n  '\\uA74B': 'o',\n  '\\uA74D': 'o',\n  '\\u0275': 'o',\n  '\\u01A3': 'oi',\n  '\\u0223': 'ou',\n  '\\uA74F': 'oo',\n  '\\u24DF': 'p',\n  '\\uFF50': 'p',\n  '\\u1E55': 'p',\n  '\\u1E57': 'p',\n  '\\u01A5': 'p',\n  '\\u1D7D': 'p',\n  '\\uA751': 'p',\n  '\\uA753': 'p',\n  '\\uA755': 'p',\n  '\\u24E0': 'q',\n  '\\uFF51': 'q',\n  '\\u024B': 'q',\n  '\\uA757': 'q',\n  '\\uA759': 'q',\n  '\\u24E1': 'r',\n  '\\uFF52': 'r',\n  '\\u0155': 'r',\n  '\\u1E59': 'r',\n  '\\u0159': 'r',\n  '\\u0211': 'r',\n  '\\u0213': 'r',\n  '\\u1E5B': 'r',\n  '\\u1E5D': 'r',\n  '\\u0157': 'r',\n  '\\u1E5F': 'r',\n  '\\u024D': 'r',\n  '\\u027D': 'r',\n  '\\uA75B': 'r',\n  '\\uA7A7': 'r',\n  '\\uA783': 'r',\n  '\\u24E2': 's',\n  '\\uFF53': 's',\n  '\\u00DF': 's',\n  '\\u015B': 's',\n  '\\u1E65': 's',\n  '\\u015D': 's',\n  '\\u1E61': 's',\n  '\\u0161': 's',\n  '\\u1E67': 's',\n  '\\u1E63': 's',\n  '\\u1E69': 's',\n  '\\u0219': 's',\n  '\\u015F': 's',\n  '\\u023F': 's',\n  '\\uA7A9': 's',\n  '\\uA785': 's',\n  '\\u1E9B': 's',\n  '\\u24E3': 't',\n  '\\uFF54': 't',\n  '\\u1E6B': 't',\n  '\\u1E97': 't',\n  '\\u0165': 't',\n  '\\u1E6D': 't',\n  '\\u021B': 't',\n  '\\u0163': 't',\n  '\\u1E71': 't',\n  '\\u1E6F': 't',\n  '\\u0167': 't',\n  '\\u01AD': 't',\n  '\\u0288': 't',\n  '\\u2C66': 't',\n  '\\uA787': 't',\n  '\\uA729': 'tz',\n  '\\u24E4': 'u',\n  '\\uFF55': 'u',\n  '\\u00F9': 'u',\n  '\\u00FA': 'u',\n  '\\u00FB': 'u',\n  '\\u0169': 'u',\n  '\\u1E79': 'u',\n  '\\u016B': 'u',\n  '\\u1E7B': 'u',\n  '\\u016D': 'u',\n  '\\u00FC': 'u',\n  '\\u01DC': 'u',\n  '\\u01D8': 'u',\n  '\\u01D6': 'u',\n  '\\u01DA': 'u',\n  '\\u1EE7': 'u',\n  '\\u016F': 'u',\n  '\\u0171': 'u',\n  '\\u01D4': 'u',\n  '\\u0215': 'u',\n  '\\u0217': 'u',\n  '\\u01B0': 'u',\n  '\\u1EEB': 'u',\n  '\\u1EE9': 'u',\n  '\\u1EEF': 'u',\n  '\\u1EED': 'u',\n  '\\u1EF1': 'u',\n  '\\u1EE5': 'u',\n  '\\u1E73': 'u',\n  '\\u0173': 'u',\n  '\\u1E77': 'u',\n  '\\u1E75': 'u',\n  '\\u0289': 'u',\n  '\\u24E5': 'v',\n  '\\uFF56': 'v',\n  '\\u1E7D': 'v',\n  '\\u1E7F': 'v',\n  '\\u028B': 'v',\n  '\\uA75F': 'v',\n  '\\u028C': 'v',\n  '\\uA761': 'vy',\n  '\\u24E6': 'w',\n  '\\uFF57': 'w',\n  '\\u1E81': 'w',\n  '\\u1E83': 'w',\n  '\\u0175': 'w',\n  '\\u1E87': 'w',\n  '\\u1E85': 'w',\n  '\\u1E98': 'w',\n  '\\u1E89': 'w',\n  '\\u2C73': 'w',\n  '\\u24E7': 'x',\n  '\\uFF58': 'x',\n  '\\u1E8B': 'x',\n  '\\u1E8D': 'x',\n  '\\u24E8': 'y',\n  '\\uFF59': 'y',\n  '\\u1EF3': 'y',\n  '\\u00FD': 'y',\n  '\\u0177': 'y',\n  '\\u1EF9': 'y',\n  '\\u0233': 'y',\n  '\\u1E8F': 'y',\n  '\\u00FF': 'y',\n  '\\u1EF7': 'y',\n  '\\u1E99': 'y',\n  '\\u1EF5': 'y',\n  '\\u01B4': 'y',\n  '\\u024F': 'y',\n  '\\u1EFF': 'y',\n  '\\u24E9': 'z',\n  '\\uFF5A': 'z',\n  '\\u017A': 'z',\n  '\\u1E91': 'z',\n  '\\u017C': 'z',\n  '\\u017E': 'z',\n  '\\u1E93': 'z',\n  '\\u1E95': 'z',\n  '\\u01B6': 'z',\n  '\\u0225': 'z',\n  '\\u0240': 'z',\n  '\\u2C6C': 'z',\n  '\\uA763': 'z',\n  '\\u0386': '\\u0391',\n  '\\u0388': '\\u0395',\n  '\\u0389': '\\u0397',\n  '\\u038A': '\\u0399',\n  '\\u03AA': '\\u0399',\n  '\\u038C': '\\u039F',\n  '\\u038E': '\\u03A5',\n  '\\u03AB': '\\u03A5',\n  '\\u038F': '\\u03A9',\n  '\\u03AC': '\\u03B1',\n  '\\u03AD': '\\u03B5',\n  '\\u03AE': '\\u03B7',\n  '\\u03AF': '\\u03B9',\n  '\\u03CA': '\\u03B9',\n  '\\u0390': '\\u03B9',\n  '\\u03CC': '\\u03BF',\n  '\\u03CD': '\\u03C5',\n  '\\u03CB': '\\u03C5',\n  '\\u03B0': '\\u03C5',\n  '\\u03C9': '\\u03C9',\n  '\\u03C2': '\\u03C3'\n};\nDataUtil.fnOperators = {\n  /**\n   * Returns true when the actual input is equal to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   * @param  {boolean} ignoreAccent?\n   */\n  equal: (actual, expected, ignoreCase, ignoreAccent) => {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected);\n    }\n    return actual === expected;\n  },\n  /**\n   * Returns true when the actual input is not equal to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  notequal: (actual, expected, ignoreCase, ignoreAccent) => {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n    return !DataUtil.fnOperators.equal(actual, expected, ignoreCase);\n  },\n  /**\n   * Returns true when the actual input is less than to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  lessthan: (actual, expected, ignoreCase) => {\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected);\n    }\n    if (isNullOrUndefined(actual)) {\n      actual = undefined;\n    }\n    return actual < expected;\n  },\n  /**\n   * Returns true when the actual input is greater than to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  greaterthan: (actual, expected, ignoreCase) => {\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected);\n    }\n    return actual > expected;\n  },\n  /**\n   * Returns true when the actual input is less than or equal to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  lessthanorequal: (actual, expected, ignoreCase) => {\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected);\n    }\n    if (isNullOrUndefined(actual)) {\n      actual = undefined;\n    }\n    return actual <= expected;\n  },\n  /**\n   * Returns true when the actual input is greater than or equal to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  greaterthanorequal: (actual, expected, ignoreCase) => {\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected);\n    }\n    return actual >= expected;\n  },\n  /**\n   * Returns true when the actual input contains the given string.\n   * @param  {string|number} actual\n   * @param  {string|number} expected\n   * @param  {boolean} ignoreCase?\n   */\n  contains: (actual, expected, ignoreCase, ignoreAccent) => {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n    if (ignoreCase) {\n      return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) !== -1;\n    }\n    return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && actual.toString().indexOf(expected) !== -1;\n  },\n  /**\n   * Returns true when the given input value is not null.\n   * @param  {string|number} actual\n   * @returns boolean\n   */\n  notnull: actual => {\n    return actual !== null;\n  },\n  /**\n   * Returns true when the given input value is null.\n   * @param  {string|number} actual\n   * @returns boolean\n   */\n  isnull: actual => {\n    return actual === null;\n  },\n  /**\n   * Returns true when the actual input starts with the given string\n   * @param  {string} actual\n   * @param  {string} expected\n   * @param  {boolean} ignoreCase?\n   */\n  startswith: (actual, expected, ignoreCase, ignoreAccent) => {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n    if (ignoreCase) {\n      return actual && expected && DataUtil.startsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n    }\n    return actual && expected && DataUtil.startsWith(actual, expected);\n  },\n  /**\n   * Returns true when the actual input ends with the given string.\n   * @param  {string} actual\n   * @param  {string} expected\n   * @param  {boolean} ignoreCase?\n   */\n  endswith: (actual, expected, ignoreCase, ignoreAccent) => {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n    if (ignoreCase) {\n      return actual && expected && DataUtil.endsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n    }\n    return actual && expected && DataUtil.endsWith(actual, expected);\n  },\n  /**\n   * It will return the filter operator based on the filter symbol.\n   * @param  {string} operator\n   * @hidden\n   */\n  processSymbols: operator => {\n    let fnName = DataUtil.operatorSymbols[operator];\n    if (fnName) {\n      let fn = DataUtil.fnOperators[fnName];\n      return fn;\n    }\n    return DataUtil.throwError('Query - Process Operator : Invalid operator');\n  },\n  /**\n   * It will return the valid filter operator based on the specified operators.\n   * @param  {string} operator\n   * @hidden\n   */\n  processOperator: operator => {\n    let fn = DataUtil.fnOperators[operator];\n    if (fn) {\n      return fn;\n    }\n    return DataUtil.fnOperators.processSymbols(operator);\n  }\n};\n/**\n * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.\n */\nDataUtil.parse = {\n  /**\n   * Parse the given string to the plain JavaScript object.\n   * @param  {string|Object|Object[]} jsonText\n   */\n  parseJson: jsonText => {\n    if (typeof jsonText === 'string') {\n      jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver);\n    } else if (jsonText instanceof Array) {\n      DataUtil.parse.iterateAndReviveArray(jsonText);\n    } else if (typeof jsonText === 'object' && jsonText !== null) {\n      DataUtil.parse.iterateAndReviveJson(jsonText);\n    }\n    return jsonText;\n  },\n  /**\n   * It will perform on array of values.\n   * @param  {string[]|Object[]} array\n   * @hidden\n   */\n  iterateAndReviveArray: array => {\n    for (let i = 0; i < array.length; i++) {\n      if (typeof array[i] === 'object' && array[i] !== null) {\n        DataUtil.parse.iterateAndReviveJson(array[i]);\n      } else if (typeof array[i] === 'string' && !/^[\\s]*\\[|^[\\s]*\\{(.)+:|\\\"/g.test(array[i])) {\n        array[i] = DataUtil.parse.jsonReviver('', array[i]);\n      } else {\n        array[i] = DataUtil.parse.parseJson(array[i]);\n      }\n    }\n  },\n  /**\n   * It will perform on JSON values\n   * @param  {JSON} json\n   * @hidden\n   */\n  iterateAndReviveJson: json => {\n    let value;\n    let keys = Object.keys(json);\n    for (let prop of keys) {\n      if (DataUtil.startsWith(prop, '__')) {\n        continue;\n      }\n      value = json[prop];\n      if (typeof value === 'object') {\n        if (value instanceof Array) {\n          DataUtil.parse.iterateAndReviveArray(value);\n        } else if (value) {\n          DataUtil.parse.iterateAndReviveJson(value);\n        }\n      } else {\n        json[prop] = DataUtil.parse.jsonReviver(json[prop], value);\n      }\n    }\n  },\n  /**\n   * It will perform on JSON values\n   * @param  {string} field\n   * @param  {string|Date} value\n   * @hidden\n   */\n  jsonReviver: (field, value) => {\n    if (typeof value === 'string') {\n      let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n      let offSet = DataUtil.timeZoneHandling ? DataUtil.serverTimezoneOffset : null;\n      if (ms) {\n        return DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);\n      } else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n        let isUTC = value.indexOf('Z') > -1 || value.indexOf('z') > -1;\n        let arr = value.split(/[^0-9.]/);\n        if (isUTC) {\n          value = DataUtil.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), DataUtil.serverTimezoneOffset, false);\n        } else {\n          let utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10));\n          let hrs = parseInt(arr[6], 10);\n          let mins = parseInt(arr[7], 10);\n          if (isNaN(hrs) && isNaN(mins)) {\n            return utcFormat;\n          }\n          if (value.indexOf('+') > -1) {\n            utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);\n          } else {\n            utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);\n          }\n          value = DataUtil.dateParse.toTimeZone(utcFormat, DataUtil.serverTimezoneOffset, false);\n        }\n        if (DataUtil.serverTimezoneOffset == null) {\n          value = DataUtil.dateParse.addSelfOffset(value);\n        }\n      }\n    }\n    return value;\n  },\n  /**\n   * Check wheather the given value is JSON or not.\n   * @param  {Object[]} jsonData\n   */\n  isJson: jsonData => {\n    if (typeof jsonData[0] === 'string') {\n      return jsonData;\n    }\n    return DataUtil.parse.parseJson(jsonData);\n  },\n  /**\n   * Checks wheather the given value is GUID or not.\n   * @param  {string} value\n   */\n  isGuid: value => {\n    let regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;\n    let match = regex.exec(value);\n    return match != null;\n  },\n  /**\n   * The method used to replace the value based on the type.\n   * @param  {Object} value\n   * @param  {boolean} stringify\n   * @hidden\n   */\n  replacer: (value, stringify) => {\n    if (DataUtil.isPlainObject(value)) {\n      return DataUtil.parse.jsonReplacer(value, stringify);\n    }\n    if (value instanceof Array) {\n      return DataUtil.parse.arrayReplacer(value);\n    }\n    if (value instanceof Date) {\n      return DataUtil.parse.jsonReplacer({\n        val: value\n      }, stringify).val;\n    }\n    return value;\n  },\n  /**\n   * It will replace the JSON value.\n   * @param  {string} key\n   * @param  {Object} val\n   * @hidden\n   */\n  jsonReplacer: (val, stringify) => {\n    let value;\n    let keys = Object.keys(val);\n    for (let prop of keys) {\n      value = val[prop];\n      if (!(value instanceof Date)) {\n        continue;\n      }\n      let d = value;\n      if (DataUtil.serverTimezoneOffset == null) {\n        val[prop] = DataUtil.dateParse.toTimeZone(d, null).toJSON();\n      } else {\n        d = new Date(+d + DataUtil.serverTimezoneOffset * 3600000);\n        val[prop] = DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(d), null).toJSON();\n      }\n    }\n    return val;\n  },\n  /**\n   * It will replace the Array of value.\n   * @param  {string} key\n   * @param  {Object[]} val\n   * @hidden\n   */\n  arrayReplacer: val => {\n    for (let i = 0; i < val.length; i++) {\n      if (DataUtil.isPlainObject(val[i])) {\n        val[i] = DataUtil.parse.jsonReplacer(val[i]);\n      } else if (val[i] instanceof Date) {\n        val[i] = DataUtil.parse.jsonReplacer({\n          date: val[i]\n        }).date;\n      }\n    }\n    return val;\n  },\n  /**\n   * It will replace the Date object with respective to UTC format value.\n   * @param  {string} key\n   * @param  {any} value\n   * @hidden\n   */\n  /* tslint:disable-next-line:no-any */\n  jsonDateReplacer: (key, value) => {\n    if (key === 'value' && value) {\n      if (typeof value === 'string') {\n        let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n        if (ms) {\n          value = DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);\n        } else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n          let arr = value.split(/[^0-9]/);\n          value = DataUtil.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);\n        }\n      }\n      if (value instanceof Date) {\n        value = DataUtil.dateParse.addSelfOffset(value);\n        if (DataUtil.serverTimezoneOffset === null) {\n          return DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(value), null).toJSON();\n        } else {\n          value = DataUtil.dateParse.toTimeZone(value, value.getTimezoneOffset() / 60 * 2 - DataUtil.serverTimezoneOffset, false);\n          return value.toJSON();\n        }\n      }\n    }\n    return value;\n  }\n};\n/**\n * @hidden\n */\nDataUtil.dateParse = {\n  addSelfOffset: input => {\n    return new Date(+input - input.getTimezoneOffset() * 60000);\n  },\n  toUTC: input => {\n    return new Date(+input + input.getTimezoneOffset() * 60000);\n  },\n  toTimeZone: (input, offset, utc) => {\n    if (offset === null) {\n      return input;\n    }\n    let unix = utc ? DataUtil.dateParse.toUTC(input) : input;\n    return new Date(+unix - offset * 3600000);\n  },\n  toLocalTime: input => {\n    let datefn = input;\n    let timeZone = -datefn.getTimezoneOffset();\n    let differenceString = timeZone >= 0 ? '+' : '-';\n    let localtimefn = num => {\n      let norm = Math.floor(Math.abs(num));\n      return (norm < 10 ? '0' : '') + norm;\n    };\n    let val = datefn.getFullYear() + '-' + localtimefn(datefn.getMonth() + 1) + '-' + localtimefn(datefn.getDate()) + 'T' + localtimefn(datefn.getHours()) + ':' + localtimefn(datefn.getMinutes()) + ':' + localtimefn(datefn.getSeconds()) + differenceString + localtimefn(timeZone / 60) + ':' + localtimefn(timeZone % 60);\n    return val;\n  }\n};\nconst consts$1 = {\n  GroupGuid: '{271bbba0-1ee7}'\n};\n/**\n * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.\n * This is the base adaptor class that other adaptors can extend.\n * @hidden\n */\nclass Adaptor {\n  /**\n   * Constructor for Adaptor class\n   * @param  {DataOptions} ds?\n   * @hidden\n   * @returns aggregates\n   */\n  constructor(ds) {\n    // common options for all the adaptors \n    this.options = {\n      from: 'table',\n      requestType: 'json',\n      sortBy: 'sorted',\n      select: 'select',\n      skip: 'skip',\n      group: 'group',\n      take: 'take',\n      search: 'search',\n      count: 'requiresCounts',\n      where: 'where',\n      aggregates: 'aggregates',\n      expand: 'expand'\n    };\n    /**\n     * Specifies the type of adaptor.\n     * @default Adaptor\n     */\n    this.type = Adaptor;\n    this.dataSource = ds;\n    this.pvt = {};\n  }\n  /**\n   * Returns the data from the query processing.\n   * @param  {Object} data\n   * @param  {DataOptions} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @returns Object\n   */\n  processResponse(data, ds, query, xhr) {\n    return data;\n  }\n}\n/**\n * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.\n * @hidden\n */\nclass JsonAdaptor extends Adaptor {\n  /**\n   * Process the JSON data based on the provided queries.\n   * @param  {DataManager} dataManager\n   * @param  {Query} query\n   * @returns Object\n   */\n  processQuery(dataManager, query) {\n    let result = dataManager.dataSource.json.slice(0);\n    let count = result.length;\n    let countFlg = true;\n    let ret;\n    let key;\n    let lazyLoad = {};\n    let keyCount = 0;\n    let group = [];\n    let page;\n    for (let i = 0; i < query.lazyLoad.length; i++) {\n      keyCount++;\n      lazyLoad[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n    }\n    let agg = {};\n    for (let i = 0; i < query.queries.length; i++) {\n      key = query.queries[i];\n      if ((key.fn === 'onPage' || key.fn === 'onGroup') && query.lazyLoad.length) {\n        if (key.fn === 'onGroup') {\n          group.push(key.e);\n        }\n        if (key.fn === 'onPage') {\n          page = key.e;\n        }\n        continue;\n      }\n      ret = this[key.fn].call(this, result, key.e, query);\n      if (key.fn === 'onAggregates') {\n        agg[key.e.field + ' - ' + key.e.type] = ret;\n      } else {\n        result = ret !== undefined ? ret : result;\n      }\n      if (key.fn === 'onPage' || key.fn === 'onSkip' || key.fn === 'onTake' || key.fn === 'onRange') {\n        countFlg = false;\n      }\n      if (countFlg) {\n        count = result.length;\n      }\n    }\n    if (keyCount) {\n      let args = {\n        query: query,\n        lazyLoad: lazyLoad,\n        result: result,\n        group: group,\n        page: page\n      };\n      let lazyLoadData = this.lazyLoadGroup(args);\n      result = lazyLoadData.result;\n      count = lazyLoadData.count;\n    }\n    if (query.isCountRequired) {\n      result = {\n        result: result,\n        count: count,\n        aggregates: agg\n      };\n    }\n    return result;\n  }\n  /**\n   * Perform lazy load grouping in JSON array based on the given query and lazy load details.\n   * @param  {LazyLoadGroupArgs} args\n   */\n  lazyLoadGroup(args) {\n    let count = 0;\n    let agg = this.getAggregate(args.query);\n    let result = args.result;\n    if (!isNullOrUndefined(args.lazyLoad.onDemandGroupInfo)) {\n      let req = args.lazyLoad.onDemandGroupInfo;\n      for (let i = req.where.length - 1; i >= 0; i--) {\n        result = this.onWhere(result, req.where[i]);\n      }\n      if (args.group.length !== req.level) {\n        let field = args.group[req.level].fieldName;\n        result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n      }\n      count = result.length;\n      let data = result;\n      result = result.slice(req.skip);\n      result = result.slice(0, req.take);\n      if (args.group.length !== req.level) {\n        this.formGroupResult(result, data);\n      }\n    } else {\n      let field = args.group[0].fieldName;\n      result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n      count = result.length;\n      let data = result;\n      if (args.page) {\n        result = this.onPage(result, args.page, args.query);\n      }\n      this.formGroupResult(result, data);\n    }\n    return {\n      result: result,\n      count: count\n    };\n  }\n  formGroupResult(result, data) {\n    if (result.length && data.length) {\n      let uid = 'GroupGuid';\n      let childLevel = 'childLevels';\n      let level = 'level';\n      let records = 'records';\n      result[uid] = data[uid];\n      result[childLevel] = data[childLevel];\n      result[level] = data[level];\n      result[records] = data[records];\n    }\n    return result;\n  }\n  /**\n   * Separate the aggregate query from the given queries\n   * @param  {Query} query\n   */\n  getAggregate(query) {\n    let aggQuery = Query.filterQueries(query.queries, 'onAggregates');\n    let agg = [];\n    if (aggQuery.length) {\n      let tmp;\n      for (let i = 0; i < aggQuery.length; i++) {\n        tmp = aggQuery[i].e;\n        agg.push({\n          type: tmp.type,\n          field: DataUtil.getValue(tmp.field, query)\n        });\n      }\n    }\n    return agg;\n  }\n  /**\n   * Performs batch update in the JSON array which add, remove and update records.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {RemoteArgs} e\n   */\n  batchRequest(dm, changes, e) {\n    let i;\n    let deletedRecordsLen = changes.deletedRecords.length;\n    for (i = 0; i < changes.addedRecords.length; i++) {\n      this.insert(dm, changes.addedRecords[i]);\n    }\n    for (i = 0; i < changes.changedRecords.length; i++) {\n      this.update(dm, e.key, changes.changedRecords[i]);\n    }\n    for (i = 0; i < deletedRecordsLen; i++) {\n      this.remove(dm, e.key, changes.deletedRecords[i]);\n    }\n    return changes;\n  }\n  /**\n   * Performs filter operation with the given data and where query.\n   * @param  {Object[]} ds\n   * @param  {{validate:Function}} e\n   */\n  onWhere(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n    return ds.filter(obj => {\n      if (e) {\n        return e.validate(obj);\n      }\n    });\n  }\n  /**\n   * Returns aggregate function based on the aggregate type.\n   * @param  {Object[]} ds\n   * @param  {{field:string} e\n   * @param  {string}} type\n   */\n  onAggregates(ds, e) {\n    let fn = DataUtil.aggregates[e.type];\n    if (!ds || !fn || ds.length === 0) {\n      return null;\n    }\n    return fn(ds, e.field);\n  }\n  /**\n   * Performs search operation based on the given query.\n   * @param  {Object[]} ds\n   * @param  {QueryOptions} e\n   */\n  onSearch(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n    if (e.fieldNames.length === 0) {\n      DataUtil.getFieldList(ds[0], e.fieldNames);\n    }\n    return ds.filter(obj => {\n      for (let j = 0; j < e.fieldNames.length; j++) {\n        if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {\n          return true;\n        }\n      }\n      return false;\n    });\n  }\n  /**\n   * Sort the data with given direction and field.\n   * @param  {Object[]} ds\n   * @param  {{comparer:(a:Object} e\n   * @param  {Object} b\n   */\n  onSortBy(ds, e, query) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n    let fnCompare;\n    let field = DataUtil.getValue(e.fieldName, query);\n    if (!field) {\n      return ds.sort(e.comparer);\n    }\n    if (field instanceof Array) {\n      field = field.slice(0);\n      for (let i = field.length - 1; i >= 0; i--) {\n        if (!field[i]) {\n          continue;\n        }\n        fnCompare = e.comparer;\n        if (DataUtil.endsWith(field[i], ' desc')) {\n          fnCompare = DataUtil.fnSort('descending');\n          field[i] = field[i].replace(' desc', '');\n        }\n        ds = DataUtil.sort(ds, field[i], fnCompare);\n      }\n      return ds;\n    }\n    return DataUtil.sort(ds, field, e.comparer);\n  }\n  /**\n   * Group the data based on the given query.\n   * @param  {Object[]} ds\n   * @param  {QueryOptions} e\n   * @param  {Query} query\n   */\n  onGroup(ds, e, query) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n    let agg = this.getAggregate(query);\n    return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);\n  }\n  /**\n   * Retrieves records based on the given page index and size.\n   * @param  {Object[]} ds\n   * @param  {{pageSize:number} e\n   * @param  {number}} pageIndex\n   * @param  {Query} query\n   */\n  onPage(ds, e, query) {\n    let size = DataUtil.getValue(e.pageSize, query);\n    let start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;\n    let end = start + size;\n    if (!ds || !ds.length) {\n      return ds;\n    }\n    return ds.slice(start, end);\n  }\n  /**\n   * Retrieves records based on the given start and end index from query.\n   * @param  {Object[]} ds\n   * @param  {{start:number} e\n   * @param  {number}} end\n   */\n  onRange(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n    return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));\n  }\n  /**\n   * Picks the given count of records from the top of the datasource.\n   * @param  {Object[]} ds\n   * @param  {{nos:number}} e\n   */\n  onTake(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n    return ds.slice(0, DataUtil.getValue(e.nos));\n  }\n  /**\n   * Skips the given count of records from the data source.\n   * @param  {Object[]} ds\n   * @param  {{nos:number}} e\n   */\n  onSkip(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n    return ds.slice(DataUtil.getValue(e.nos));\n  }\n  /**\n   * Selects specified columns from the data source.\n   * @param  {Object[]} ds\n   * @param  {{fieldNames:string}} e\n   */\n  onSelect(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n    return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));\n  }\n  /**\n   * Inserts new record in the table.\n   * @param  {DataManager} dm\n   * @param  {Object} data\n   * @param  {number} position\n   */\n  insert(dm, data, tableName, query, position) {\n    if (isNullOrUndefined(position)) {\n      return dm.dataSource.json.push(data);\n    } else {\n      return dm.dataSource.json.splice(position, 0, data);\n    }\n  }\n  /**\n   * Remove the data from the dataSource based on the key field value.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName?\n   * @returns null\n   */\n  remove(dm, keyField, value, tableName) {\n    let ds = dm.dataSource.json;\n    let i;\n    if (typeof value === 'object' && !(value instanceof Date)) {\n      value = DataUtil.getObject(keyField, value);\n    }\n    for (i = 0; i < ds.length; i++) {\n      if (DataUtil.getObject(keyField, ds[i]) === value) {\n        break;\n      }\n    }\n    return i !== ds.length ? ds.splice(i, 1) : null;\n  }\n  /**\n   * Updates existing record and saves the changes to the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName?\n   * @returns null\n   */\n  update(dm, keyField, value, tableName) {\n    let ds = dm.dataSource.json;\n    let i;\n    let key;\n    if (!isNullOrUndefined(keyField)) {\n      key = getValue(keyField, value);\n    }\n    for (i = 0; i < ds.length; i++) {\n      if (!isNullOrUndefined(keyField) && getValue(keyField, ds[i]) === key) {\n        break;\n      }\n    }\n    return i < ds.length ? merge(ds[i], value) : null;\n  }\n}\n/**\n * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.\n * It interacts with server-side for all DataManager Queries and CRUD operations.\n * @hidden\n */\nclass UrlAdaptor extends Adaptor {\n  /**\n   * Process the query to generate request body.\n   * @param  {DataManager} dm\n   * @param  {Query} query\n   * @param  {Object[]} hierarchyFilters?\n   * @returns p\n   */\n  // tslint:disable-next-line:max-func-body-length\n  processQuery(dm, query, hierarchyFilters) {\n    let queries = this.getQueryRequest(query);\n    let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n    let params = query.params;\n    let url = dm.dataSource.url;\n    let temp;\n    let skip;\n    let take = null;\n    let options = this.options;\n    let request = {\n      sorts: [],\n      groups: [],\n      filters: [],\n      searches: [],\n      aggregates: []\n    };\n    // calc Paging & Range\n    if ('onPage' in singles) {\n      temp = singles.onPage;\n      skip = DataUtil.getValue(temp.pageIndex, query);\n      take = DataUtil.getValue(temp.pageSize, query);\n      skip = (skip - 1) * take;\n    } else if ('onRange' in singles) {\n      temp = singles.onRange;\n      skip = temp.start;\n      take = temp.end - temp.start;\n    }\n    // Sorting\n    for (let i = 0; i < queries.sorts.length; i++) {\n      temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);\n      request.sorts.push(DataUtil.callAdaptorFunction(this, 'onEachSort', {\n        name: temp,\n        direction: queries.sorts[i].e.direction\n      }, query));\n    }\n    // hierarchy\n    if (hierarchyFilters) {\n      temp = this.getFiltersFrom(hierarchyFilters, query);\n      if (temp) {\n        request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', temp.toJson(), query));\n      }\n    }\n    // Filters\n    for (let i = 0; i < queries.filters.length; i++) {\n      let res = DataUtil.callAdaptorFunction(this, 'onEachWhere', queries.filters[i].e.toJson(), query);\n      if (this.getModuleName && this.getModuleName() === 'ODataV4Adaptor' && !isNullOrUndefined(queries.filters[i].e.key) && queries.filters.length > 1) {\n        res = \"(\" + res + \")\";\n      }\n      request.filters.push(res);\n      let keys = typeof request.filters[i] === 'object' ? Object.keys(request.filters[i]) : [];\n      for (let prop of keys) {\n        if (DataUtil.isNull(request[prop])) {\n          delete request[prop];\n        }\n      }\n    }\n    // Searches\n    for (let i = 0; i < queries.searches.length; i++) {\n      temp = queries.searches[i].e;\n      request.searches.push(DataUtil.callAdaptorFunction(this, 'onEachSearch', {\n        fields: temp.fieldNames,\n        operator: temp.operator,\n        key: temp.searchKey,\n        ignoreCase: temp.ignoreCase\n      }, query));\n    }\n    // Grouping\n    for (let i = 0; i < queries.groups.length; i++) {\n      request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));\n    }\n    // aggregates\n    for (let i = 0; i < queries.aggregates.length; i++) {\n      temp = queries.aggregates[i].e;\n      request.aggregates.push({\n        type: temp.type,\n        field: DataUtil.getValue(temp.field, query)\n      });\n    }\n    let req = {};\n    this.getRequestQuery(options, query, singles, request, req);\n    // Params\n    DataUtil.callAdaptorFunction(this, 'addParams', {\n      dm: dm,\n      query: query,\n      params: params,\n      reqParams: req\n    });\n    if (query.lazyLoad.length) {\n      for (let i = 0; i < query.lazyLoad.length; i++) {\n        req[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n      }\n    }\n    // cleanup\n    let keys = Object.keys(req);\n    for (let prop of keys) {\n      if (DataUtil.isNull(req[prop]) || req[prop] === '' || req[prop].length === 0) {\n        delete req[prop];\n      }\n    }\n    if (!(options.skip in req && options.take in req) && take !== null) {\n      req[options.skip] = DataUtil.callAdaptorFunction(this, 'onSkip', skip, query);\n      req[options.take] = DataUtil.callAdaptorFunction(this, 'onTake', take, query);\n    }\n    let p = this.pvt;\n    this.pvt = {};\n    if (this.options.requestType === 'json') {\n      return {\n        data: JSON.stringify(req, DataUtil.parse.jsonDateReplacer),\n        url: url,\n        pvtData: p,\n        type: 'POST',\n        contentType: 'application/json; charset=utf-8'\n      };\n    }\n    temp = this.convertToQueryString(req, query, dm);\n    temp = (dm.dataSource.url.indexOf('?') !== -1 ? '&' : '/') + temp;\n    return {\n      type: 'GET',\n      url: temp.length ? url.replace(/\\/*$/, temp) : url,\n      pvtData: p\n    };\n  }\n  getRequestQuery(options, query, singles, request, request1) {\n    let param = 'param';\n    let req = request1;\n    req[options.from] = query.fromTable;\n    if (options.apply && query.distincts.length) {\n      req[options.apply] = 'onDistinct' in this ? DataUtil.callAdaptorFunction(this, 'onDistinct', query.distincts) : '';\n    }\n    if (!query.distincts.length && options.expand) {\n      req[options.expand] = 'onExpand' in this && 'onSelect' in singles ? DataUtil.callAdaptorFunction(this, 'onExpand', {\n        selects: DataUtil.getValue(singles.onSelect.fieldNames, query),\n        expands: query.expands\n      }, query) : query.expands;\n    }\n    req[options.select] = 'onSelect' in singles && !query.distincts.length ? DataUtil.callAdaptorFunction(this, 'onSelect', DataUtil.getValue(singles.onSelect.fieldNames, query), query) : '';\n    req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, 'onCount', query.isCountRequired, query) : '';\n    req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, 'onSearch', request.searches, query) : '';\n    req[options.skip] = 'onSkip' in singles ? DataUtil.callAdaptorFunction(this, 'onSkip', DataUtil.getValue(singles.onSkip.nos, query), query) : '';\n    req[options.take] = 'onTake' in singles ? DataUtil.callAdaptorFunction(this, 'onTake', DataUtil.getValue(singles.onTake.nos, query), query) : '';\n    req[options.where] = request.filters.length || request.searches.length ? DataUtil.callAdaptorFunction(this, 'onWhere', request.filters, query) : '';\n    req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, 'onSortBy', request.sorts, query) : '';\n    req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, 'onGroup', request.groups, query) : '';\n    req[options.aggregates] = request.aggregates.length ? DataUtil.callAdaptorFunction(this, 'onAggregates', request.aggregates, query) : '';\n    req[param] = [];\n  }\n  /**\n   * Convert the object from processQuery to string which can be added query string.\n   * @param  {Object} req\n   * @param  {Query} query\n   * @param  {DataManager} dm\n   */\n  convertToQueryString(request, query, dm) {\n    return '';\n    // this needs to be overridden\n  }\n  /**\n   * Return the data from the data manager processing.\n   * @param  {DataResult} data\n   * @param  {DataOptions} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Object} request?\n   * @param  {CrudOptions} changes?\n   */\n  processResponse(data, ds, query, xhr, request, changes) {\n    if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('application/json') !== -1) {\n      let handleTimeZone = DataUtil.timeZoneHandling;\n      if (ds && !ds.timeZoneHandling) {\n        DataUtil.timeZoneHandling = false;\n      }\n      data = DataUtil.parse.parseJson(data);\n      DataUtil.timeZoneHandling = handleTimeZone;\n    }\n    let requests = request;\n    let pvt = requests.pvtData || {};\n    let groupDs = data ? data.groupDs : [];\n    if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n      return query.isCountRequired ? {\n        result: [],\n        count: 0\n      } : [];\n    }\n    let d = JSON.parse(requests.data);\n    if (d && d.action === 'batch' && data && data.addedRecords) {\n      changes.addedRecords = data.addedRecords;\n      return changes;\n    }\n    if (data && data.d) {\n      data = data.d;\n    }\n    let args = {};\n    if (data && 'count' in data) {\n      args.count = data.count;\n    }\n    args.result = data && data.result ? data.result : data;\n    let isExpand = false;\n    if (Array.isArray(data.result) && data.result.length) {\n      let key = 'key';\n      let val = 'value';\n      let level = 'level';\n      if (!isNullOrUndefined(data.result[0][key])) {\n        args.result = this.formRemoteGroupedData(args.result, 1, pvt.groups.length - 1);\n      }\n      if (query && query.lazyLoad.length && pvt.groups.length) {\n        for (let i = 0; i < query.lazyLoad.length; i++) {\n          if (query.lazyLoad[i][key] === 'onDemandGroupInfo') {\n            let value = query.lazyLoad[i][val][level];\n            if (pvt.groups.length === value) {\n              isExpand = true;\n            }\n          }\n        }\n      }\n    }\n    if (!isExpand) {\n      this.getAggregateResult(pvt, data, args, groupDs, query);\n    }\n    return DataUtil.isNull(args.count) ? args.result : {\n      result: args.result,\n      count: args.count,\n      aggregates: args.aggregates\n    };\n  }\n  formRemoteGroupedData(data, level, childLevel) {\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].items.length && Object.keys(data[i].items[0]).indexOf('key') > -1) {\n        this.formRemoteGroupedData(data[i].items, level + 1, childLevel - 1);\n      }\n    }\n    let uid = 'GroupGuid';\n    let childLvl = 'childLevels';\n    let lvl = 'level';\n    let records = 'records';\n    data[uid] = consts$1[uid];\n    data[lvl] = level;\n    data[childLvl] = childLevel;\n    data[records] = data[0].items.length ? this.getGroupedRecords(data, !isNullOrUndefined(data[0].items[records])) : [];\n    return data;\n  }\n  getGroupedRecords(data, hasRecords) {\n    let childGroupedRecords = [];\n    let records = 'records';\n    for (let i = 0; i < data.length; i++) {\n      if (!hasRecords) {\n        for (let j = 0; j < data[i].items.length; j++) {\n          childGroupedRecords.push(data[i].items[j]);\n        }\n      } else {\n        childGroupedRecords = childGroupedRecords.concat(data[i].items[records]);\n      }\n    }\n    return childGroupedRecords;\n  }\n  /**\n   * Add the group query to the adaptor`s option.\n   * @param  {Object[]} e\n   * @returns void\n   */\n  onGroup(e) {\n    this.pvt.groups = e;\n    return e;\n  }\n  /**\n   * Add the aggregate query to the adaptor`s option.\n   * @param  {Aggregates[]} e\n   * @returns void\n   */\n  onAggregates(e) {\n    this.pvt.aggregates = e;\n  }\n  /**\n   * Prepare the request body based on the newly added, removed and updated records.\n   * The result is used by the batch request.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {Object} e\n   */\n  batchRequest(dm, changes, e, query, original) {\n    let url;\n    let key;\n    return {\n      type: 'POST',\n      url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,\n      contentType: 'application/json; charset=utf-8',\n      dataType: 'json',\n      data: JSON.stringify(extend({}, {\n        changed: changes.changedRecords,\n        added: changes.addedRecords,\n        deleted: changes.deletedRecords,\n        action: 'batch',\n        table: e[url],\n        key: e[key]\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n  /**\n   * Method will trigger before send the request to server side.\n   * Used to set the custom header or modify the request options.\n   * @param  {DataManager} dm\n   * @param  {XMLHttpRequest} request\n   * @returns void\n   */\n  beforeSend(dm, request) {\n    // need to extend this method\n  }\n  /**\n   * Prepare and returns request body which is used to insert a new record in the table.\n   * @param  {DataManager} dm\n   * @param  {Object} data\n   * @param  {string} tableName\n   */\n  insert(dm, data, tableName, query) {\n    return {\n      url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        value: data,\n        table: tableName,\n        action: 'insert'\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n  /**\n   * Prepare and return request body which is used to remove record from the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {number|string} value\n   * @param  {string} tableName\n   */\n  remove(dm, keyField, value, tableName, query) {\n    return {\n      type: 'POST',\n      url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        key: value,\n        keyColumn: keyField,\n        table: tableName,\n        action: 'remove'\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n  /**\n   * Prepare and return request body which is used to update record.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName\n   */\n  update(dm, keyField, value, tableName, query) {\n    return {\n      type: 'POST',\n      url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        value: value,\n        action: 'update',\n        keyColumn: keyField,\n        key: DataUtil.getObject(keyField, value),\n        table: tableName\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n  /**\n   * To generate the predicate based on the filtered query.\n   * @param  {Object[]|string[]|number[]} data\n   * @param  {Query} query\n   * @hidden\n   */\n  getFiltersFrom(data, query) {\n    let key = query.fKey;\n    let value;\n    let prop = key;\n    let pKey = query.key;\n    let predicats = [];\n    if (typeof data[0] !== 'object') {\n      prop = null;\n    }\n    for (let i = 0; i < data.length; i++) {\n      if (typeof data[0] === 'object') {\n        value = DataUtil.getObject(pKey || prop, data[i]);\n      } else {\n        value = data[i];\n      }\n      predicats.push(new Predicate(key, 'equal', value));\n    }\n    return Predicate.or(predicats);\n  }\n  getAggregateResult(pvt, data, args, groupDs, query) {\n    let pData = data;\n    if (data && data.result) {\n      pData = data.result;\n    }\n    if (pvt && pvt.aggregates && pvt.aggregates.length) {\n      let agg = pvt.aggregates;\n      let fn;\n      let aggregateData = pData;\n      let res = {};\n      if (data.aggregate) {\n        aggregateData = data.aggregate;\n      }\n      for (let i = 0; i < agg.length; i++) {\n        fn = DataUtil.aggregates[agg[i].type];\n        if (fn) {\n          res[agg[i].field + ' - ' + agg[i].type] = fn(aggregateData, agg[i].field);\n        }\n      }\n      args.aggregates = res;\n    }\n    let key = 'key';\n    let isServerGrouping = Array.isArray(data.result) && data.result.length && !isNullOrUndefined(data.result[0][key]);\n    if (pvt && pvt.groups && pvt.groups.length && !isServerGrouping) {\n      let groups = pvt.groups;\n      for (let i = 0; i < groups.length; i++) {\n        let level = null;\n        if (!isNullOrUndefined(groupDs)) {\n          groupDs = DataUtil.group(groupDs, groups[i]);\n        }\n        let groupQuery = Query.filterQueries(query.queries, 'onGroup')[i].e;\n        pData = DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs, groupQuery.comparer);\n      }\n      args.result = pData;\n    }\n    return args;\n  }\n  getQueryRequest(query) {\n    let req = {\n      sorts: [],\n      groups: [],\n      filters: [],\n      searches: [],\n      aggregates: []\n    };\n    req.sorts = Query.filterQueries(query.queries, 'onSortBy');\n    req.groups = Query.filterQueries(query.queries, 'onGroup');\n    req.filters = Query.filterQueries(query.queries, 'onWhere');\n    req.searches = Query.filterQueries(query.queries, 'onSearch');\n    req.aggregates = Query.filterQueries(query.queries, 'onAggregates');\n    return req;\n  }\n  addParams(options) {\n    let req = options.reqParams;\n    if (options.params.length) {\n      req.params = {};\n    }\n    for (let tmp of options.params) {\n      if (req[tmp.key]) {\n        throw new Error('Query() - addParams: Custom Param is conflicting other request arguments');\n      }\n      req[tmp.key] = tmp.value;\n      if (tmp.fn) {\n        req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);\n      }\n      req.params[tmp.key] = req[tmp.key];\n    }\n  }\n}\n/**\n * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.\n * @hidden\n */\nclass ODataAdaptor extends UrlAdaptor {\n  constructor(props) {\n    super();\n    // options replaced the default adaptor options\n    this.options = extend({}, this.options, {\n      requestType: 'get',\n      accept: 'application/json;odata=light;q=1,application/json;odata=verbose;q=0.5',\n      multipartAccept: 'multipart/mixed',\n      sortBy: '$orderby',\n      select: '$select',\n      skip: '$skip',\n      take: '$top',\n      count: '$inlinecount',\n      where: '$filter',\n      expand: '$expand',\n      batch: '$batch',\n      changeSet: '--changeset_',\n      batchPre: 'batch_',\n      contentId: 'Content-Id: ',\n      batchContent: 'Content-Type: multipart/mixed; boundary=',\n      changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n      batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n      updateType: 'PUT'\n    });\n    extend(this.options, props || {});\n  }\n  getModuleName() {\n    return 'ODataAdaptor';\n  }\n  /**\n   * Generate request string based on the filter criteria from query.\n   * @param  {Predicate} pred\n   * @param  {boolean} requiresCast?\n   */\n  onPredicate(predicate, query, requiresCast) {\n    let returnValue = '';\n    let operator;\n    let guid;\n    let val = predicate.value;\n    let type = typeof val;\n    let field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;\n    if (val instanceof Date) {\n      val = 'datetime\\'' + DataUtil.parse.replacer(val) + '\\'';\n    }\n    if (type === 'string') {\n      val = val.replace(/'/g, \"''\");\n      if (predicate.ignoreCase) {\n        val = val.toLowerCase();\n      }\n      val = encodeURIComponent(val);\n      val = '\\'' + val + '\\'';\n      if (requiresCast) {\n        field = 'cast(' + field + ', \\'Edm.String\\')';\n      }\n      if (DataUtil.parse.isGuid(val)) {\n        guid = 'guid';\n      }\n      if (predicate.ignoreCase) {\n        if (!guid) {\n          field = 'tolower(' + field + ')';\n        }\n        val = val.toLowerCase();\n      }\n    }\n    operator = DataUtil.odBiOperator[predicate.operator];\n    if (operator) {\n      returnValue += field;\n      returnValue += operator;\n      if (guid) {\n        returnValue += guid;\n      }\n      return returnValue + val;\n    }\n    if (!isNullOrUndefined(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor') {\n      operator = DataUtil.odv4UniOperator[predicate.operator];\n    } else {\n      operator = DataUtil.odUniOperator[predicate.operator];\n    }\n    if (operator === 'substringof') {\n      let temp = val;\n      val = field;\n      field = temp;\n    }\n    returnValue += operator + '(';\n    returnValue += field + ',';\n    if (guid) {\n      returnValue += guid;\n    }\n    returnValue += val + ')';\n    return returnValue;\n  }\n  addParams(options) {\n    super.addParams(options);\n    delete options.reqParams.params;\n  }\n  /**\n   * Generate request string based on the multiple filter criteria from query.\n   * @param  {Predicate} pred\n   * @param  {boolean} requiresCast?\n   */\n  onComplexPredicate(predicate, query, requiresCast) {\n    let res = [];\n    for (let i = 0; i < predicate.predicates.length; i++) {\n      res.push('(' + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ')');\n    }\n    return res.join(' ' + predicate.condition + ' ');\n  }\n  /**\n   * Generate query string based on the multiple filter criteria from query.\n   * @param  {Predicate} filter\n   * @param  {boolean} requiresCast?\n   */\n  onEachWhere(filter, query, requiresCast) {\n    return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);\n  }\n  /**\n   * Generate query string based on the multiple filter criteria from query.\n   * @param  {string[]} filters\n   */\n  onWhere(filters) {\n    if (this.pvt.search) {\n      filters.push(this.onEachWhere(this.pvt.search, null, true));\n    }\n    return filters.join(' and ');\n  }\n  /**\n   * Generate query string based on the multiple search criteria from query.\n   * @param  {{fields:string[]} e\n   * @param  {string} operator\n   * @param  {string} key\n   * @param  {boolean}} ignoreCase\n   */\n  onEachSearch(e) {\n    if (e.fields && e.fields.length === 0) {\n      DataUtil.throwError('Query() - Search : oData search requires list of field names to search');\n    }\n    let filter = this.pvt.search || [];\n    for (let i = 0; i < e.fields.length; i++) {\n      filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));\n    }\n    this.pvt.search = filter;\n  }\n  /**\n   * Generate query string based on the search criteria from query.\n   * @param  {Object} e\n   */\n  onSearch(e) {\n    this.pvt.search = Predicate.or(this.pvt.search);\n    return '';\n  }\n  /**\n   * Generate query string based on multiple sort criteria from query.\n   * @param  {QueryOptions} e\n   */\n  onEachSort(e) {\n    let res = [];\n    if (e.name instanceof Array) {\n      for (let i = 0; i < e.name.length; i++) {\n        res.push(ODataAdaptor.getField(e.name[i]) + (e.direction === 'descending' ? ' desc' : ''));\n      }\n    } else {\n      res.push(ODataAdaptor.getField(e.name) + (e.direction === 'descending' ? ' desc' : ''));\n    }\n    return res.join(',');\n  }\n  /**\n   * Returns sort query string.\n   * @param  {string[]} e\n   */\n  onSortBy(e) {\n    return e.reverse().join(',');\n  }\n  /**\n   * Adds the group query to the adaptor option.\n   * @param  {Object[]} e\n   * @returns string\n   */\n  onGroup(e) {\n    this.pvt.groups = e;\n    return [];\n  }\n  /**\n   * Returns the select query string.\n   * @param  {string[]} e\n   */\n  onSelect(e) {\n    for (let i = 0; i < e.length; i++) {\n      e[i] = ODataAdaptor.getField(e[i]);\n    }\n    return e.join(',');\n  }\n  /**\n   * Add the aggregate query to the adaptor option.\n   * @param  {Object[]} e\n   * @returns string\n   */\n  onAggregates(e) {\n    this.pvt.aggregates = e;\n    return '';\n  }\n  /**\n   * Returns the query string which requests total count from the data source.\n   * @param  {boolean} e\n   * @returns string\n   */\n  onCount(e) {\n    return e === true ? 'allpages' : '';\n  }\n  /**\n   * Method will trigger before send the request to server side.\n   * Used to set the custom header or modify the request options.\n   * @param  {DataManager} dm\n   * @param  {XMLHttpRequest} request\n   * @param  {Ajax} settings?\n   */\n  beforeSend(dm, request, settings) {\n    if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === 'post') {\n      request.setRequestHeader('Accept', this.options.multipartAccept);\n      request.setRequestHeader('DataServiceVersion', '2.0');\n      request.overrideMimeType('text/plain; charset=x-user-defined');\n    } else {\n      request.setRequestHeader('Accept', this.options.accept);\n    }\n    request.setRequestHeader('DataServiceVersion', '2.0');\n    request.setRequestHeader('MaxDataServiceVersion', '2.0');\n  }\n  /**\n   * Returns the data from the query processing.\n   * @param  {DataResult} data\n   * @param  {DataOptions} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Ajax} request?\n   * @param  {CrudOptions} changes?\n   * @returns aggregateResult\n   */\n  processResponse(data, ds, query, xhr, request, changes) {\n    let metaCheck = 'odata.metadata';\n    if (request && request.type === 'GET' && !this.rootUrl && data[metaCheck]) {\n      let dataUrls = data[metaCheck].split('/$metadata#');\n      this.rootUrl = dataUrls[0];\n      this.resourceTableName = dataUrls[1];\n    }\n    let pvtData = 'pvtData';\n    if (!isNullOrUndefined(data.d)) {\n      let dataCopy = query && query.isCountRequired ? data.d.results : data.d;\n      let metaData = '__metadata';\n      if (!isNullOrUndefined(dataCopy)) {\n        for (let i = 0; i < dataCopy.length; i++) {\n          if (!isNullOrUndefined(dataCopy[i][metaData])) {\n            delete dataCopy[i][metaData];\n          }\n        }\n      }\n    }\n    let pvt = request && request[pvtData];\n    let emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);\n    if (emptyAndBatch) {\n      return emptyAndBatch;\n    }\n    let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n    let count = null;\n    let version = versionCheck && parseInt(versionCheck, 10) || 2;\n    if (query && query.isCountRequired) {\n      let oDataCount = '__count';\n      if (data[oDataCount] || data['odata.count']) {\n        count = data[oDataCount] || data['odata.count'];\n      }\n      if (data.d) {\n        data = data.d;\n      }\n      if (data[oDataCount] || data['odata.count']) {\n        count = data[oDataCount] || data['odata.count'];\n      }\n    }\n    if (version === 3 && data.value) {\n      data = data.value;\n    }\n    if (data.d) {\n      data = data.d;\n    }\n    if (version < 3 && data.results) {\n      data = data.results;\n    }\n    let args = {};\n    args.count = count;\n    args.result = data;\n    this.getAggregateResult(pvt, data, args, null, query);\n    return DataUtil.isNull(count) ? args.result : {\n      result: args.result,\n      count: args.count,\n      aggregates: args.aggregates\n    };\n  }\n  /**\n   * Converts the request object to query string.\n   * @param  {Object} req\n   * @param  {Query} query\n   * @param  {DataManager} dm\n   * @returns tableName\n   */\n  convertToQueryString(request, query, dm) {\n    let res = [];\n    let table = 'table';\n    let tableName = request[table] || '';\n    let format = '$format';\n    delete request[table];\n    if (dm.dataSource.requiresFormat) {\n      request[format] = 'json';\n    }\n    let keys = Object.keys(request);\n    for (let prop of keys) {\n      res.push(prop + '=' + request[prop]);\n    }\n    res = res.join('&');\n    if (dm.dataSource.url && dm.dataSource.url.indexOf('?') !== -1 && !tableName) {\n      return res;\n    }\n    return res.length ? tableName + '?' + res : tableName || '';\n  }\n  localTimeReplacer(key, convertObj) {\n    for (let prop of !isNullOrUndefined(convertObj) ? Object.keys(convertObj) : []) {\n      if (convertObj[prop] instanceof Date) {\n        convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]);\n      }\n    }\n    return convertObj;\n  }\n  /**\n   * Prepare and returns request body which is used to insert a new record in the table.\n   * @param  {DataManager} dm\n   * @param  {Object} data\n   * @param  {string} tableName?\n   */\n  insert(dm, data, tableName) {\n    return {\n      url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : ''),\n      data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)\n    };\n  }\n  /**\n   * Prepare and return request body which is used to remove record from the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {number} value\n   * @param  {string} tableName?\n   */\n  remove(dm, keyField, value, tableName) {\n    let url;\n    if (typeof value === 'string' && !DataUtil.parse.isGuid(value)) {\n      url = `('${value}')`;\n    } else {\n      url = `(${value})`;\n    }\n    return {\n      type: 'DELETE',\n      url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url\n    };\n  }\n  /**\n   * Updates existing record and saves the changes to the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName?\n   * @returns this\n   */\n  update(dm, keyField, value, tableName, query, original) {\n    if (this.options.updateType === 'PATCH' && !isNullOrUndefined(original)) {\n      value = this.compareAndRemove(value, original, keyField);\n    }\n    let url;\n    if (typeof value[keyField] === 'string' && !DataUtil.parse.isGuid(value[keyField])) {\n      url = `('${value[keyField]}')`;\n    } else {\n      url = `(${value[keyField]})`;\n    }\n    return {\n      type: this.options.updateType,\n      url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url,\n      data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),\n      accept: this.options.accept\n    };\n  }\n  /**\n   * Prepare the request body based on the newly added, removed and updated records.\n   * The result is used by the batch request.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {RemoteArgs} e\n   * @returns {Object}\n   */\n  batchRequest(dm, changes, e, query, original) {\n    let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n    let url = this.rootUrl ? this.rootUrl + '/' + this.options.batch : dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n    e.url = this.resourceTableName ? this.resourceTableName : e.url;\n    let args = {\n      url: e.url,\n      key: e.key,\n      cid: 1,\n      cSet: DataUtil.getGuid(this.options.changeSet)\n    };\n    let req = '--' + initialGuid + '\\n';\n    req += 'Content-Type: multipart/mixed; boundary=' + args.cSet.replace('--', '') + '\\n';\n    this.pvt.changeSet = 0;\n    req += this.generateInsertRequest(changes.addedRecords, args, dm);\n    req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);\n    req += this.generateDeleteRequest(changes.deletedRecords, args, dm);\n    req += args.cSet + '--\\n';\n    req += '--' + initialGuid + '--';\n    return {\n      type: 'POST',\n      url: url,\n      dataType: 'json',\n      contentType: 'multipart/mixed; charset=UTF-8;boundary=' + initialGuid,\n      data: req\n    };\n  }\n  /**\n   * Generate the string content from the removed records.\n   * The result will be send during batch update.\n   * @param  {Object[]} arr\n   * @param  {RemoteArgs} e\n   * @returns this\n   */\n  generateDeleteRequest(arr, e, dm) {\n    if (!arr) {\n      return '';\n    }\n    let req = '';\n    let stat = {\n      'method': 'DELETE ',\n      'url': (data, i, key) => {\n        let url = DataUtil.getObject(key, data[i]);\n        if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n          return '(' + url + ')';\n        } else if (url instanceof Date) {\n          let dateTime = data[i][key];\n          return '(' + dateTime.toJSON() + ')';\n        } else {\n          return `('${url}')`;\n        }\n      },\n      'data': (data, i) => ''\n    };\n    req = this.generateBodyContent(arr, e, stat, dm);\n    return req + '\\n';\n  }\n  /**\n   * Generate the string content from the inserted records.\n   * The result will be send during batch update.\n   * @param  {Object[]} arr\n   * @param  {RemoteArgs} e\n   */\n  generateInsertRequest(arr, e, dm) {\n    if (!arr) {\n      return '';\n    }\n    let req = '';\n    let stat = {\n      'method': 'POST ',\n      'url': (data, i, key) => '',\n      'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n    };\n    req = this.generateBodyContent(arr, e, stat, dm);\n    return req;\n  }\n  /**\n   * Generate the string content from the updated records.\n   * The result will be send during batch update.\n   * @param  {Object[]} arr\n   * @param  {RemoteArgs} e\n   */\n  generateUpdateRequest(arr, e, dm, org) {\n    if (!arr) {\n      return '';\n    }\n    let req = '';\n    arr.forEach(change => change = this.compareAndRemove(change, org.filter(o => DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change))[0], e.key));\n    let stat = {\n      'method': this.options.updateType + ' ',\n      'url': (data, i, key) => {\n        if (typeof data[i][key] === 'number' || DataUtil.parse.isGuid(data[i][key])) {\n          return '(' + data[i][key] + ')';\n        } else if (data[i][key] instanceof Date) {\n          let date = data[i][key];\n          return '(' + date.toJSON() + ')';\n        } else {\n          return `('${data[i][key]}')`;\n        }\n      },\n      'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n    };\n    req = this.generateBodyContent(arr, e, stat, dm);\n    return req;\n  }\n  static getField(prop) {\n    return prop.replace(/\\./g, '/');\n  }\n  generateBodyContent(arr, e, stat, dm) {\n    let req = '';\n    for (let i = 0; i < arr.length; i++) {\n      req += '\\n' + e.cSet + '\\n';\n      req += this.options.changeSetContent + '\\n\\n';\n      req += stat.method;\n      if (stat.method === 'POST ') {\n        req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n      } else if (stat.method === 'PUT ' || stat.method === 'PATCH ') {\n        req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n      } else if (stat.method === 'DELETE ') {\n        req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n      }\n      req += 'Accept: ' + this.options.accept + '\\n';\n      req += 'Content-Id: ' + this.pvt.changeSet++ + '\\n';\n      req += this.options.batchChangeSetContentType + '\\n';\n      if (!isNullOrUndefined(arr[i]['@odata.etag'])) {\n        req += 'If-Match: ' + arr[i]['@odata.etag'] + '\\n\\n';\n        delete arr[i]['@odata.etag'];\n      } else {\n        req += '\\n';\n      }\n      req += stat.data(arr, i);\n    }\n    return req;\n  }\n  processBatchResponse(data, query, xhr, request, changes) {\n    if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n      return query.isCountRequired ? {\n        result: [],\n        count: 0\n      } : [];\n    }\n    if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === 'post') {\n      let guid = xhr.getResponseHeader('Content-Type');\n      let cIdx;\n      let jsonObj;\n      let d = data + '';\n      guid = guid.substring(guid.indexOf('=batchresponse') + 1);\n      d = d.split(guid);\n      if (d.length < 2) {\n        return {};\n      }\n      d = d[1];\n      let exVal = /(?:\\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);\n      if (exVal) {\n        d.replace(exVal[0], '');\n      }\n      let changeGuid = exVal ? exVal[1] : '';\n      d = d.split(changeGuid);\n      for (let i = d.length; i > -1; i--) {\n        if (!/\\bContent-ID:/i.test(d[i]) || !/\\bHTTP.+201/.test(d[i])) {\n          continue;\n        }\n        cIdx = parseInt(/\\bContent-ID: (\\d+)/i.exec(d[i])[1], 10);\n        if (changes.addedRecords[cIdx]) {\n          jsonObj = DataUtil.parse.parseJson(/^\\{.+\\}/m.exec(d[i])[0]);\n          extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));\n        }\n      }\n      return changes;\n    }\n    return null;\n  }\n  compareAndRemove(data, original, key) {\n    if (isNullOrUndefined(original)) {\n      return data;\n    }\n    Object.keys(data).forEach(prop => {\n      if (prop !== key && prop !== '@odata.etag') {\n        if (DataUtil.isPlainObject(data[prop])) {\n          this.compareAndRemove(data[prop], original[prop]);\n          let final = Object.keys(data[prop]).filter(data => data !== '@odata.etag');\n          if (final.length === 0) {\n            delete data[prop];\n          }\n        } else if (data[prop] === original[prop]) {\n          delete data[prop];\n        } else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {\n          delete data[prop];\n        }\n      }\n    });\n    return data;\n  }\n}\n/**\n * The OData v4 is an improved version of OData protocols.\n * The DataManager uses the ODataV4Adaptor to consume OData v4 services.\n * @hidden\n */\nclass ODataV4Adaptor extends ODataAdaptor {\n  constructor(props) {\n    super(props);\n    // options replaced the default adaptor options\n    this.options = extend({}, this.options, {\n      requestType: 'get',\n      accept: 'application/json, text/javascript, */*; q=0.01',\n      multipartAccept: 'multipart/mixed',\n      sortBy: '$orderby',\n      select: '$select',\n      skip: '$skip',\n      take: '$top',\n      count: '$count',\n      search: '$search',\n      where: '$filter',\n      expand: '$expand',\n      batch: '$batch',\n      changeSet: '--changeset_',\n      batchPre: 'batch_',\n      contentId: 'Content-Id: ',\n      batchContent: 'Content-Type: multipart/mixed; boundary=',\n      changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n      batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n      updateType: 'PATCH',\n      localTime: false,\n      apply: '$apply'\n    });\n    extend(this.options, props || {});\n  }\n  /**\n   * @hidden\n   */\n  getModuleName() {\n    return 'ODataV4Adaptor';\n  }\n  /**\n   * Returns the query string which requests total count from the data source.\n   * @param  {boolean} e\n   * @returns string\n   */\n  onCount(e) {\n    return e === true ? 'true' : '';\n  }\n  /**\n   * Generate request string based on the filter criteria from query.\n   * @param  {Predicate} pred\n   * @param  {boolean} requiresCast?\n   */\n  onPredicate(predicate, query, requiresCast) {\n    let returnValue = '';\n    let val = predicate.value;\n    let isDate = val instanceof Date;\n    if (query instanceof Query) {\n      let queries = this.getQueryRequest(query);\n      for (let i = 0; i < queries.filters.length; i++) {\n        if (queries.filters[i].e.key === predicate.value) {\n          requiresCast = true;\n        }\n      }\n    }\n    returnValue = super.onPredicate.call(this, predicate, query, requiresCast);\n    if (isDate) {\n      returnValue = returnValue.replace(/datetime'(.*)'$/, '$1');\n    }\n    if (DataUtil.parse.isGuid(val)) {\n      returnValue = returnValue.replace('guid', '').replace(/'/g, '');\n    }\n    return returnValue;\n  }\n  /**\n   *  Generate query string based on the multiple search criteria from query.\n   * @param  {{fields:string[]} e\n   * @param  {string} operator\n   * @param  {string} key\n   * @param  {boolean}} ignoreCase\n   */\n  onEachSearch(e) {\n    let search = this.pvt.searches || [];\n    search.push(e.key);\n    this.pvt.searches = search;\n  }\n  /**\n   *  Generate query string based on the search criteria from query.\n   * @param  {Object} e\n   */\n  onSearch(e) {\n    return this.pvt.searches.join(' OR ');\n  }\n  /**\n   * Returns the expand query string.\n   * @param  {string} e\n   */\n  onExpand(e) {\n    let selected = {};\n    let expanded = {};\n    let expands = e.expands.slice();\n    let exArr = [];\n    let selects = e.selects.filter(item => item.indexOf('.') > -1);\n    selects.forEach(select => {\n      let splits = select.split('.');\n      if (!(splits[0] in selected)) {\n        selected[splits[0]] = [];\n      }\n      if (splits.length == 2) {\n        if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1) {\n          if (selected[splits[0]][0].indexOf('$expand') !== -1 && selected[splits[0]][0].indexOf(';$select=') === -1) {\n            selected[splits[0]][0] = selected[splits[0]][0] + ';' + '$select=' + splits[1];\n          } else {\n            selected[splits[0]][0] = selected[splits[0]][0] + ',' + splits[1];\n          }\n        } else {\n          selected[splits[0]].push('$select=' + splits[1]);\n        }\n      } else {\n        let sel = '$select=' + splits[splits.length - 1];\n        let exp = '';\n        let close = '';\n        for (let i = 1; i < splits.length - 1; i++) {\n          exp = exp + '$expand=' + splits[i] + '(';\n          close = close + ')';\n        }\n        let combineVal = exp + sel + close;\n        if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1 && this.expandQueryIndex(selected[splits[0]], true)) {\n          let idx = this.expandQueryIndex(selected[splits[0]]);\n          selected[splits[0]][idx] = selected[splits[0]][idx] + combineVal.replace('$expand=', ',');\n        } else {\n          selected[splits[0]].push(combineVal);\n        }\n      }\n    });\n    //Auto expand from select query\n    Object.keys(selected).forEach(expand => {\n      if (expands.indexOf(expand) === -1) {\n        expands.push(expand);\n      }\n    });\n    expands.forEach(expand => {\n      expanded[expand] = expand in selected ? `${expand}(${selected[expand].join(';')})` : expand;\n    });\n    Object.keys(expanded).forEach(ex => exArr.push(expanded[ex]));\n    return exArr.join(',');\n  }\n  expandQueryIndex(query, isExpand) {\n    for (let i = 0; i < query.length; i++) {\n      if (query[i].indexOf('$expand') !== -1) {\n        return isExpand ? true : i;\n      }\n    }\n    return isExpand ? false : 0;\n  }\n  /**\n   * Returns the groupby query string.\n   * @param  {string} e\n   */\n  onDistinct(distinctFields) {\n    let fields = distinctFields.map(field => ODataAdaptor.getField(field)).join(',');\n    return `groupby((${fields}))`;\n  }\n  /**\n   * Returns the select query string.\n   * @param  {string[]} e\n   */\n  onSelect(e) {\n    return super.onSelect(e.filter(item => item.indexOf('.') === -1));\n  }\n  /**\n   * Method will trigger before send the request to server side.\n   * Used to set the custom header or modify the request options.\n   * @param  {DataManager} dm\n   * @param  {XMLHttpRequest} request\n   * @param  {Ajax} settings\n   * @returns void\n   */\n  beforeSend(dm, request, settings) {\n    if (settings.type === 'POST' || settings.type === 'PUT' || settings.type === 'PATCH') {\n      request.setRequestHeader('Prefer', 'return=representation');\n    }\n    request.setRequestHeader('Accept', this.options.accept);\n  }\n  /**\n   * Returns the data from the query processing.\n   * @param  {DataResult} data\n   * @param  {DataOptions} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Ajax} request?\n   * @param  {CrudOptions} changes?\n   * @returns aggregateResult\n   */\n  processResponse(data, ds, query, xhr, request, changes) {\n    let metaName = '@odata.context';\n    if (request && request.type === 'GET' && !this.rootUrl && data[metaName]) {\n      let dataUrl = data[metaName].split('/$metadata#');\n      this.rootUrl = dataUrl[0];\n      this.resourceTableName = dataUrl[1];\n    }\n    let pvtData = 'pvtData';\n    let pvt = request && request[pvtData];\n    let emptyAndBatch = super.processBatchResponse(data, query, xhr, request, changes);\n    if (emptyAndBatch) {\n      return emptyAndBatch;\n    }\n    let count = null;\n    let dataCount = '@odata.count';\n    if (query && query.isCountRequired) {\n      if (dataCount in data) {\n        count = data[dataCount];\n      }\n    }\n    data = !isNullOrUndefined(data.value) ? data.value : data;\n    let args = {};\n    args.count = count;\n    args.result = data;\n    this.getAggregateResult(pvt, data, args, null, query);\n    return DataUtil.isNull(count) ? args.result : {\n      result: args.result,\n      count: count,\n      aggregates: args.aggregates\n    };\n  }\n}\n/**\n * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.\n * The DataManager uses the WebApiAdaptor to consume Web API.\n * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n * @hidden\n */\nclass WebApiAdaptor extends ODataAdaptor {\n  getModuleName() {\n    return 'WebApiAdaptor';\n  }\n  /**\n   * Prepare and returns request body which is used to insert a new record in the table.\n   * @param  {DataManager} dm\n   * @param  {Object} data\n   * @param  {string} tableName?\n   */\n  insert(dm, data, tableName) {\n    return {\n      type: 'POST',\n      url: dm.dataSource.url,\n      data: JSON.stringify(data)\n    };\n  }\n  /**\n   * Prepare and return request body which is used to remove record from the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {number} value\n   * @param  {string} tableName?\n   */\n  remove(dm, keyField, value, tableName) {\n    return {\n      type: 'DELETE',\n      url: dm.dataSource.url + '/' + value,\n      data: JSON.stringify(value)\n    };\n  }\n  /**\n   * Prepare and return request body which is used to update record.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName?\n   */\n  update(dm, keyField, value, tableName) {\n    return {\n      type: 'PUT',\n      url: dm.dataSource.url,\n      data: JSON.stringify(value)\n    };\n  }\n  batchRequest(dm, changes, e) {\n    let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n    let url = dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n    e.url = this.resourceTableName ? this.resourceTableName : e.url;\n    let req = [];\n    //insertion\n    for (let i = 0, x = changes.addedRecords.length; i < x; i++) {\n      changes.addedRecords.forEach((j, d) => {\n        let stat = {\n          'method': 'POST ',\n          'url': (data, i, key) => '',\n          'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req.push('--' + initialGuid);\n        req.push('Content-Type: application/http; msgtype=request', '');\n        req.push('POST ' + '/api/' + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.addedRecords, i, e.key) + ' HTTP/1.1');\n        req.push('Content-Type: ' + 'application/json; charset=utf-8');\n        req.push('Host: ' + location.host);\n        req.push('', j ? JSON.stringify(j) : '');\n      });\n    }\n    //updation \n    for (let i = 0, x = changes.changedRecords.length; i < x; i++) {\n      changes.changedRecords.forEach((j, d) => {\n        let stat = {\n          'method': this.options.updateType + ' ',\n          'url': (data, i, key) => '',\n          'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req.push('--' + initialGuid);\n        req.push('Content-Type: application/http; msgtype=request', '');\n        req.push('PUT ' + '/api/' + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.changedRecords, i, e.key) + ' HTTP/1.1');\n        req.push('Content-Type: ' + 'application/json; charset=utf-8');\n        req.push('Host: ' + location.host);\n        req.push('', j ? JSON.stringify(j) : '');\n      });\n    }\n    //deletion\n    for (let i = 0, x = changes.deletedRecords.length; i < x; i++) {\n      changes.deletedRecords.forEach((j, d) => {\n        let state = {\n          'mtd': 'DELETE ',\n          'url': (data, i, key) => {\n            let url = DataUtil.getObject(key, data[i]);\n            if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n              return '/' + url;\n            } else if (url instanceof Date) {\n              let datTime = data[i][key];\n              return '/' + datTime.toJSON();\n            } else {\n              return `/'${url}'`;\n            }\n          },\n          'data': (data, i) => ''\n        };\n        req.push('--' + initialGuid);\n        req.push('Content-Type: application/http; msgtype=request', '');\n        req.push('DELETE ' + '/api/' + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + state.url(changes.deletedRecords, i, e.key) + ' HTTP/1.1');\n        req.push('Content-Type: ' + 'application/json; charset=utf-8');\n        req.push('Host: ' + location.host);\n        req.push('', j ? JSON.stringify(j) : '');\n      });\n    }\n    req.push('--' + initialGuid + '--', '');\n    return {\n      type: 'POST',\n      url: url,\n      contentType: 'multipart/mixed; boundary=' + initialGuid,\n      data: req.join('\\r\\n')\n    };\n  }\n  /**\n   * Method will trigger before send the request to server side.\n   * Used to set the custom header or modify the request options.\n   * @param  {DataManager} dm\n   * @param  {XMLHttpRequest} request\n   * @param  {Ajax} settings\n   * @returns void\n   */\n  beforeSend(dm, request, settings) {\n    request.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');\n  }\n  /**\n   * Returns the data from the query processing.\n   * @param  {DataResult} data\n   * @param  {DataOptions} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Ajax} request?\n   * @param  {CrudOptions} changes?\n   * @returns aggregateResult\n   */\n  processResponse(data, ds, query, xhr, request, changes) {\n    let pvtData = 'pvtData';\n    let pvt = request && request[pvtData];\n    let count = null;\n    let args = {};\n    if (request && request.type.toLowerCase() !== 'post') {\n      let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n      let version = versionCheck && parseInt(versionCheck, 10) || 2;\n      if (query && query.isCountRequired) {\n        if (!DataUtil.isNull(data.Count)) {\n          count = data.Count;\n        }\n      }\n      if (version < 3 && data.Items) {\n        data = data.Items;\n      }\n      args.count = count;\n      args.result = data;\n      this.getAggregateResult(pvt, data, args, null, query);\n    }\n    args.result = args.result || data;\n    return DataUtil.isNull(count) ? args.result : {\n      result: args.result,\n      count: args.count,\n      aggregates: args.aggregates\n    };\n  }\n}\n/**\n * WebMethodAdaptor can be used by DataManager to interact with web method.\n * @hidden\n */\nclass WebMethodAdaptor extends UrlAdaptor {\n  /**\n   * Prepare the request body based on the query.\n   * The query information can be accessed at the WebMethod using variable named `value`.\n   * @param  {DataManager} dm\n   * @param  {Query} query\n   * @param  {Object[]} hierarchyFilters?\n   * @returns application\n   */\n  processQuery(dm, query, hierarchyFilters) {\n    let obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);\n    let getData = 'data';\n    let data = DataUtil.parse.parseJson(obj[getData]);\n    let result = {};\n    let value = 'value';\n    if (data.param) {\n      for (let i = 0; i < data.param.length; i++) {\n        let param = data.param[i];\n        let key = Object.keys(param)[0];\n        result[key] = param[key];\n      }\n    }\n    result[value] = data;\n    let pvtData = 'pvtData';\n    let url = 'url';\n    return {\n      data: JSON.stringify(result),\n      url: obj[url],\n      pvtData: obj[pvtData],\n      type: 'POST',\n      contentType: 'application/json; charset=utf-8'\n    };\n  }\n}\n/**\n * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.\n * It interacts with server-side only for CRUD operations.\n * @hidden\n */\nclass RemoteSaveAdaptor extends JsonAdaptor {\n  /**\n   * @hidden\n   */\n  constructor() {\n    super();\n    setValue('beforeSend', UrlAdaptor.prototype.beforeSend, this);\n  }\n  insert(dm, data, tableName, query, position) {\n    this.pvt.position = position;\n    this.updateType = 'add';\n    return {\n      url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        value: data,\n        table: tableName,\n        action: 'insert'\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n  remove(dm, keyField, val, tableName, query) {\n    super.remove(dm, keyField, val);\n    return {\n      type: 'POST',\n      url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        key: val,\n        keyColumn: keyField,\n        table: tableName,\n        action: 'remove'\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n  update(dm, keyField, val, tableName, query) {\n    this.updateType = 'update';\n    this.updateKey = keyField;\n    return {\n      type: 'POST',\n      url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        value: val,\n        action: 'update',\n        keyColumn: keyField,\n        key: val[keyField],\n        table: tableName\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n  processResponse(data, ds, query, xhr, request, changes, e) {\n    let i;\n    let newData = request ? JSON.parse(request.data) : data;\n    data = newData.action === 'batch' ? DataUtil.parse.parseJson(data) : data;\n    if (this.updateType === 'add') {\n      super.insert(ds, data, null, null, this.pvt.position);\n    }\n    if (this.updateType === 'update') {\n      super.update(ds, this.updateKey, data);\n    }\n    this.updateType = undefined;\n    if (data.added) {\n      for (i = 0; i < data.added.length; i++) {\n        super.insert(ds, data.added[i]);\n      }\n    }\n    if (data.changed) {\n      for (i = 0; i < data.changed.length; i++) {\n        super.update(ds, e.key, data.changed[i]);\n      }\n    }\n    if (data.deleted) {\n      for (i = 0; i < data.deleted.length; i++) {\n        super.remove(ds, e.key, data.deleted[i]);\n      }\n    }\n    return data;\n  }\n  /**\n   * Prepare the request body based on the newly added, removed and updated records.\n   * Also perform the changes in the locally cached data to sync with the remote data.\n   * The result is used by the batch request.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {RemoteArgs} e\n   */\n  batchRequest(dm, changes, e, query, original) {\n    return {\n      type: 'POST',\n      url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      contentType: 'application/json; charset=utf-8',\n      dataType: 'json',\n      data: JSON.stringify(extend({}, {\n        changed: changes.changedRecords,\n        added: changes.addedRecords,\n        deleted: changes.deletedRecords,\n        action: 'batch',\n        table: e.url,\n        key: e.key\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n  addParams(options) {\n    let urlParams = new UrlAdaptor();\n    urlParams.addParams(options);\n  }\n}\n/**\n * Ajax Adaptor that is extended from URL Adaptor, is used for handle data operations with user defined functions.\n * @hidden\n */\nclass CustomDataAdaptor extends UrlAdaptor {\n  constructor(props) {\n    super();\n    // options replaced the default adaptor options\n    this.options = extend({}, this.options, {\n      getData: new Function(),\n      addRecord: new Function(),\n      updateRecord: new Function(),\n      deleteRecord: new Function(),\n      batchUpdate: new Function()\n    });\n    extend(this.options, props || {});\n  }\n  getModuleName() {\n    return 'CustomDataAdaptor';\n  }\n}\n/**\n * The GraphqlAdaptor that is extended from URL Adaptor, is used for retrieving data from the Graphql server.\n * It interacts with the Graphql server with all the DataManager Queries and performs CRUD operations.\n * @hidden\n */\nclass GraphQLAdaptor extends UrlAdaptor {\n  getModuleName() {\n    return 'GraphQLAdaptor';\n  }\n  constructor(options) {\n    super();\n    this.opt = options;\n    this.schema = this.opt.response;\n    this.query = this.opt.query;\n    this.getVariables = this.opt.getVariables ? this.opt.getVariables : () => {};\n    this.getQuery = () => this.query;\n  }\n  /**\n   * Process the JSON data based on the provided queries.\n   * @param  {DataManager} dm\n   * @param  {Query} query?\n   */\n  processQuery(datamanager, query) {\n    let urlQuery = super.processQuery.apply(this, arguments);\n    let dm = JSON.parse(urlQuery.data);\n    // constructing GraphQL parameters\n    let keys = ['skip', 'take', 'sorted', 'table', 'select', 'where', 'search', 'requiresCounts', 'aggregates', 'params'];\n    let temp = {};\n    let str = 'searchwhereparams';\n    keys.filter(e => {\n      temp[e] = str.indexOf(e) > -1 ? JSON.stringify(dm[e]) : dm[e];\n    });\n    let vars = this.getVariables() || {};\n    vars['datamanager'] = temp;\n    let data = JSON.stringify({\n      query: this.getQuery(),\n      variables: vars\n    });\n    urlQuery.data = data;\n    return urlQuery;\n  }\n  /**\n   * Returns the data from the query processing.\n   * It will also cache the data for later usage.\n   * @param  {DataResult} data\n   * @param  {DataManager} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Object} request?\n   * @returns DataResult\n   */\n  processResponse(resData, ds, query, xhr, request) {\n    const res = resData;\n    let count;\n    let aggregates;\n    let result = getValue(this.schema.result, res.data);\n    if (this.schema.count) {\n      count = getValue(this.schema.count, res.data);\n    }\n    if (this.schema.aggregates) {\n      aggregates = getValue(this.schema.aggregates, res.data);\n      aggregates = !isNullOrUndefined(aggregates) ? DataUtil.parse.parseJson(aggregates) : aggregates;\n    }\n    let pvt = request.pvtData || {};\n    let args = {\n      result: result,\n      aggregates: aggregates\n    };\n    let data = args;\n    if (pvt && pvt.groups && pvt.groups.length) {\n      this.getAggregateResult(pvt, data, args, null, query);\n    }\n    return !isNullOrUndefined(count) ? {\n      result: args.result,\n      count: count,\n      aggregates: aggregates\n    } : args.result;\n  }\n  /**\n   * Prepare and returns request body which is used to insert a new record in the table.\n   */\n  insert() {\n    let inserted = super.insert.apply(this, arguments);\n    return this.generateCrudData(inserted, 'insert');\n  }\n  /**\n   * Prepare and returns request body which is used to update a new record in the table.\n   */\n  update() {\n    let inserted = super.update.apply(this, arguments);\n    return this.generateCrudData(inserted, 'update');\n  }\n  /**\n   * Prepare and returns request body which is used to remove a new record in the table.\n   */\n  remove() {\n    let inserted = super.remove.apply(this, arguments);\n    return this.generateCrudData(inserted, 'remove');\n  }\n  /**\n   * Prepare the request body based on the newly added, removed and updated records.\n   * The result is used by the batch request.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {Object} e\n   * @param  {Query} query\n   * @param  {Object} original\n   */\n  batchRequest(dm, changes, e, query, original) {\n    let batch = super.batchRequest.apply(this, arguments);\n    let bData = JSON.parse(batch.data);\n    bData.key = e.key;\n    batch.data = JSON.stringify(bData);\n    return this.generateCrudData(batch, 'batch');\n  }\n  generateCrudData(crudData, action) {\n    let parsed = JSON.parse(crudData.data);\n    crudData.data = JSON.stringify({\n      query: this.opt.getMutation(action),\n      variables: parsed\n    });\n    return crudData;\n  }\n}\n/**\n * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.\n * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager\n * @hidden\n */\nclass CacheAdaptor extends UrlAdaptor {\n  /**\n   * Constructor for CacheAdaptor class.\n   * @param  {CacheAdaptor} adaptor?\n   * @param  {number} timeStamp?\n   * @param  {number} pageSize?\n   * @hidden\n   */\n  constructor(adaptor, timeStamp, pageSize) {\n    super();\n    this.isCrudAction = false;\n    this.isInsertAction = false;\n    if (!isNullOrUndefined(adaptor)) {\n      this.cacheAdaptor = adaptor;\n    }\n    this.pageSize = pageSize;\n    this.guidId = DataUtil.getGuid('cacheAdaptor');\n    let obj = {\n      keys: [],\n      results: []\n    };\n    window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n    let guid = this.guidId;\n    if (!isNullOrUndefined(timeStamp)) {\n      setInterval(() => {\n        let data;\n        data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));\n        let forDel = [];\n        for (let i = 0; i < data.results.length; i++) {\n          let currentTime = +new Date();\n          let requestTime = +new Date(data.results[i].timeStamp);\n          data.results[i].timeStamp = currentTime - requestTime;\n          if (currentTime - requestTime > timeStamp) {\n            forDel.push(i);\n          }\n        }\n        for (let i = 0; i < forDel.length; i++) {\n          data.results.splice(forDel[i], 1);\n          data.keys.splice(forDel[i], 1);\n        }\n        window.localStorage.removeItem(guid);\n        window.localStorage.setItem(guid, JSON.stringify(data));\n      }, timeStamp);\n    }\n  }\n  /**\n   * It will generate the key based on the URL when we send a request to server.\n   * @param  {string} url\n   * @param  {Query} query?\n   * @hidden\n   */\n  generateKey(url, query) {\n    let queries = this.getQueryRequest(query);\n    let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n    let key = url;\n    let page = 'onPage';\n    if (page in singles) {\n      key += singles[page].pageIndex;\n    }\n    queries.sorts.forEach(obj => {\n      key += obj.e.direction + obj.e.fieldName;\n    });\n    queries.groups.forEach(obj => {\n      key += obj.e.fieldName;\n    });\n    queries.searches.forEach(obj => {\n      key += obj.e.searchKey;\n    });\n    for (let filter = 0; filter < queries.filters.length; filter++) {\n      let currentFilter = queries.filters[filter];\n      if (currentFilter.e.isComplex) {\n        let newQuery = query.clone();\n        newQuery.queries = [];\n        for (let i = 0; i < currentFilter.e.predicates.length; i++) {\n          newQuery.queries.push({\n            fn: 'onWhere',\n            e: currentFilter.e.predicates[i],\n            filter: query.queries.filter\n          });\n        }\n        key += currentFilter.e.condition + this.generateKey(url, newQuery);\n      } else {\n        key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;\n      }\n    }\n    return key;\n  }\n  /**\n   * Process the query to generate request body.\n   * If the data is already cached, it will return the cached data.\n   * @param  {DataManager} dm\n   * @param  {Query} query?\n   * @param  {Object[]} hierarchyFilters?\n   */\n  processQuery(dm, query, hierarchyFilters) {\n    let key = this.generateKey(dm.dataSource.url, query);\n    let cachedItems;\n    cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n    let data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;\n    if (data != null && !this.isCrudAction && !this.isInsertAction) {\n      return data;\n    }\n    this.isCrudAction = null;\n    this.isInsertAction = null;\n    return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n  }\n  /**\n   * Returns the data from the query processing.\n   * It will also cache the data for later usage.\n   * @param  {DataResult} data\n   * @param  {DataManager} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Ajax} request?\n   * @param  {CrudOptions} changes?\n   */\n  processResponse(data, ds, query, xhr, request, changes) {\n    if (this.isInsertAction || request && this.cacheAdaptor.options.batch && DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === 'post') {\n      return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);\n    }\n    data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n    let key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;\n    let obj = {};\n    obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n    let index = obj.keys.indexOf(key);\n    if (index !== -1) {\n      obj.results.splice(index, 1);\n      obj.keys.splice(index, 1);\n    }\n    obj.results[obj.keys.push(key) - 1] = {\n      keys: key,\n      result: data.result,\n      timeStamp: new Date(),\n      count: data.count\n    };\n    while (obj.results.length > this.pageSize) {\n      obj.results.splice(0, 1);\n      obj.keys.splice(0, 1);\n    }\n    window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n    return data;\n  }\n  /**\n   * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.\n   * @param  {DataManager} dm\n   * @param  {XMLHttpRequest} request\n   * @param  {Ajax} settings?\n   */\n  beforeSend(dm, request, settings) {\n    if (!isNullOrUndefined(this.cacheAdaptor.options.batch) && DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch) && settings.type.toLowerCase() === 'post') {\n      request.setRequestHeader('Accept', this.cacheAdaptor.options.multipartAccept);\n    }\n    if (!dm.dataSource.crossDomain) {\n      request.setRequestHeader('Accept', this.cacheAdaptor.options.accept);\n    }\n  }\n  /**\n   * Updates existing record and saves the changes to the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName\n   */\n  update(dm, keyField, value, tableName) {\n    this.isCrudAction = true;\n    return this.cacheAdaptor.update(dm, keyField, value, tableName);\n  }\n  /**\n   * Prepare and returns request body which is used to insert a new record in the table.\n   * @param  {DataManager} dm\n   * @param  {Object} data\n   * @param  {string} tableName?\n   */\n  insert(dm, data, tableName) {\n    this.isInsertAction = true;\n    return this.cacheAdaptor.insert(dm, data, tableName);\n  }\n  /**\n   * Prepare and return request body which is used to remove record from the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName?\n   */\n  remove(dm, keyField, value, tableName) {\n    this.isCrudAction = true;\n    return this.cacheAdaptor.remove(dm, keyField, value, tableName);\n  }\n  /**\n   * Prepare the request body based on the newly added, removed and updated records.\n   * The result is used by the batch request.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {RemoteArgs} e\n   */\n  batchRequest(dm, changes, e) {\n    return this.cacheAdaptor.batchRequest(dm, changes, e);\n  }\n}\n\n/**\n * DataManager is used to manage and manipulate relational data.\n */\nclass DataManager {\n  /**\n   * Constructor for DataManager class\n   * @param  {DataOptions|JSON[]} dataSource?\n   * @param  {Query} query?\n   * @param  {AdaptorOptions|string} adaptor?\n   * @hidden\n   */\n  constructor(dataSource, query, adaptor) {\n    /** @hidden */\n    this.dateParse = true;\n    /** @hidden */\n    this.timeZoneHandling = true;\n    this.requests = [];\n    if (!dataSource && !this.dataSource) {\n      dataSource = [];\n    }\n    adaptor = adaptor || dataSource.adaptor;\n    if (dataSource && dataSource.timeZoneHandling === false) {\n      this.timeZoneHandling = dataSource.timeZoneHandling;\n    }\n    let data;\n    if (dataSource instanceof Array) {\n      data = {\n        json: dataSource,\n        offline: true\n      };\n    } else if (typeof dataSource === 'object') {\n      if (!dataSource.json) {\n        dataSource.json = [];\n      }\n      data = {\n        url: dataSource.url,\n        insertUrl: dataSource.insertUrl,\n        removeUrl: dataSource.removeUrl,\n        updateUrl: dataSource.updateUrl,\n        crudUrl: dataSource.crudUrl,\n        batchUrl: dataSource.batchUrl,\n        json: dataSource.json,\n        headers: dataSource.headers,\n        accept: dataSource.accept,\n        data: dataSource.data,\n        timeTillExpiration: dataSource.timeTillExpiration,\n        cachingPageSize: dataSource.cachingPageSize,\n        enableCaching: dataSource.enableCaching,\n        requestType: dataSource.requestType,\n        key: dataSource.key,\n        crossDomain: dataSource.crossDomain,\n        jsonp: dataSource.jsonp,\n        dataType: dataSource.dataType,\n        offline: dataSource.offline !== undefined ? dataSource.offline : dataSource.adaptor instanceof RemoteSaveAdaptor || dataSource.adaptor instanceof CustomDataAdaptor ? false : dataSource.url ? false : true,\n        requiresFormat: dataSource.requiresFormat\n      };\n    } else {\n      DataUtil.throwError('DataManager: Invalid arguments');\n    }\n    if (data.requiresFormat === undefined && !DataUtil.isCors()) {\n      data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;\n    }\n    if (data.dataType === undefined) {\n      data.dataType = 'json';\n    }\n    this.dataSource = data;\n    this.defaultQuery = query;\n    if (data.url && data.offline && !data.json.length) {\n      this.isDataAvailable = false;\n      this.adaptor = adaptor || new ODataAdaptor();\n      this.dataSource.offline = false;\n      this.ready = this.executeQuery(query || new Query());\n      this.ready.then(e => {\n        this.dataSource.offline = true;\n        this.isDataAvailable = true;\n        data.json = e.result;\n        this.adaptor = new JsonAdaptor();\n      });\n    } else {\n      this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();\n    }\n    if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {\n      data.jsonp = 'callback';\n    }\n    this.adaptor = adaptor || this.adaptor;\n    if (data.enableCaching) {\n      this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);\n    }\n    return this;\n  }\n  /**\n   * Overrides DataManager's default query with given query.\n   * @param  {Query} query - Defines the new default query.\n   */\n  setDefaultQuery(query) {\n    this.defaultQuery = query;\n    return this;\n  }\n  /**\n   * Executes the given query with local data source.\n   * @param  {Query} query - Defines the query to retrieve data.\n   */\n  executeLocal(query) {\n    if (!this.defaultQuery && !(query instanceof Query)) {\n      DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');\n    }\n    if (!this.dataSource.json) {\n      DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');\n    }\n    query = query || this.defaultQuery;\n    let result = this.adaptor.processQuery(this, query);\n    if (query.subQuery) {\n      let from = query.subQuery.fromTable;\n      let lookup = query.subQuery.lookups;\n      let res = query.isCountRequired ? result.result : result;\n      if (lookup && lookup instanceof Array) {\n        DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);\n      }\n      for (let j = 0; j < res.length; j++) {\n        if (res[j][from] instanceof Array) {\n          res[j] = extend({}, {}, res[j]);\n          res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);\n        }\n      }\n    }\n    return this.adaptor.processResponse(result, this, query);\n  }\n  /**\n   * Executes the given query with either local or remote data source.\n   * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.\n   * @param  {Query|Function} query - Defines the query to retrieve data.\n   * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.\n   * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.\n   * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.\n   */\n  executeQuery(query, done, fail, always) {\n    let makeRequest = 'makeRequest';\n    if (typeof query === 'function') {\n      always = fail;\n      fail = done;\n      done = query;\n      query = null;\n    }\n    if (!query) {\n      query = this.defaultQuery;\n    }\n    if (!(query instanceof Query)) {\n      DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');\n    }\n    let deffered = new Deferred();\n    let args = {\n      query: query\n    };\n    if (!this.dataSource.offline && this.dataSource.url !== undefined && this.dataSource.url !== '' || !isNullOrUndefined(this.adaptor[makeRequest]) || this.isCustomDataAdaptor(this.adaptor)) {\n      let result = this.adaptor.processQuery(this, query);\n      if (!isNullOrUndefined(this.adaptor[makeRequest])) {\n        this.adaptor[makeRequest](result, deffered, args, query);\n      } else if (!isNullOrUndefined(result.url) || this.isCustomDataAdaptor(this.adaptor)) {\n        this.makeRequest(result, deffered, args, query);\n      } else {\n        args = DataManager.getDeferedArgs(query, result, args);\n        deffered.resolve(args);\n      }\n    } else {\n      DataManager.nextTick(() => {\n        let res = this.executeLocal(query);\n        args = DataManager.getDeferedArgs(query, res, args);\n        deffered.resolve(args);\n      });\n    }\n    if (done || fail) {\n      deffered.promise.then(done, fail);\n    }\n    if (always) {\n      deffered.promise.then(always, always);\n    }\n    return deffered.promise;\n  }\n  static getDeferedArgs(query, result, args) {\n    if (query.isCountRequired) {\n      args.result = result.result;\n      args.count = result.count;\n      args.aggregates = result.aggregates;\n    } else {\n      args.result = result;\n    }\n    return args;\n  }\n  static nextTick(fn) {\n    (window.setImmediate || window.setTimeout)(fn, 0);\n  }\n  extendRequest(url, fnSuccess, fnFail) {\n    return extend({}, {\n      type: 'GET',\n      dataType: this.dataSource.dataType,\n      crossDomain: this.dataSource.crossDomain,\n      jsonp: this.dataSource.jsonp,\n      cache: true,\n      processData: false,\n      onSuccess: fnSuccess,\n      onFailure: fnFail\n    }, url);\n  }\n  // tslint:disable-next-line:max-func-body-length\n  makeRequest(url, deffered, args, query) {\n    let isSelector = !!query.subQuerySelector;\n    let fnFail = e => {\n      args.error = e;\n      deffered.reject(args);\n    };\n    let process = (data, count, xhr, request, actual, aggregates, virtualSelectRecords) => {\n      args.xhr = xhr;\n      args.count = count ? parseInt(count.toString(), 10) : 0;\n      args.result = data;\n      args.request = request;\n      args.aggregates = aggregates;\n      args.actual = actual;\n      args.virtualSelectRecords = virtualSelectRecords;\n      deffered.resolve(args);\n    };\n    let fnQueryChild = (data, selector) => {\n      let subDeffer = new Deferred();\n      let childArgs = {\n        parent: args\n      };\n      query.subQuery.isChild = true;\n      let subUrl = this.adaptor.processQuery(this, query.subQuery, data ? this.adaptor.processResponse(data) : selector);\n      let childReq = this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);\n      if (!isSelector) {\n        subDeffer.then(subData => {\n          if (data) {\n            DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);\n            process(data, subData.count, subData.xhr);\n          }\n        }, fnFail);\n      }\n      return childReq;\n    };\n    let fnSuccess = (data, request) => {\n      if (this.isGraphQLAdaptor(this.adaptor)) {\n        if (!isNullOrUndefined(data['errors'])) {\n          return fnFail(data['errors'], request);\n        }\n      }\n      if (this.isCustomDataAdaptor(this.adaptor)) {\n        request = extend({}, this.ajaxReqOption, request);\n      }\n      if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && this.dateParse) {\n        data = DataUtil.parse.parseJson(data);\n      }\n      let result = this.adaptor.processResponse(data, this, query, request.httpRequest, request);\n      let count = 0;\n      let aggregates = null;\n      let virtualSelectRecords = 'virtualSelectRecords';\n      let virtualRecords = data[virtualSelectRecords];\n      if (query.isCountRequired) {\n        count = result.count;\n        aggregates = result.aggregates;\n        result = result.result;\n      }\n      if (!query.subQuery) {\n        process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);\n        return;\n      }\n      if (!isSelector) {\n        fnQueryChild(result, request);\n      }\n    };\n    let req = this.extendRequest(url, fnSuccess, fnFail);\n    if (!this.isCustomDataAdaptor(this.adaptor)) {\n      let ajax = new Ajax(req);\n      ajax.beforeSend = () => {\n        this.beforeSend(ajax.httpRequest, ajax);\n      };\n      req = ajax.send();\n      req.catch(e => true); // to handle failure remote requests.        \n      this.requests.push(ajax);\n    } else {\n      this.ajaxReqOption = req;\n      let request = req;\n      this.adaptor.options.getData({\n        data: request.data,\n        onSuccess: request.onSuccess,\n        onFailure: request.onFailure\n      });\n    }\n    if (isSelector) {\n      let promise;\n      let res = query.subQuerySelector.call(this, {\n        query: query.subQuery,\n        parent: query\n      });\n      if (res && res.length) {\n        promise = Promise.all([req, fnQueryChild(null, res)]);\n        promise.then((...args) => {\n          let result = args[0];\n          let pResult = this.adaptor.processResponse(result[0], this, query, this.requests[0].httpRequest, this.requests[0]);\n          let count = 0;\n          if (query.isCountRequired) {\n            count = pResult.count;\n            pResult = pResult.result;\n          }\n          let cResult = this.adaptor.processResponse(result[1], this, query.subQuery, this.requests[1].httpRequest, this.requests[1]);\n          count = 0;\n          if (query.subQuery.isCountRequired) {\n            count = cResult.count;\n            cResult = cResult.result;\n          }\n          DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);\n          isSelector = false;\n          process(pResult, count, this.requests[0].httpRequest);\n        });\n      } else {\n        isSelector = false;\n      }\n    }\n    return req;\n  }\n  beforeSend(request, settings) {\n    this.adaptor.beforeSend(this, request, settings);\n    let headers = this.dataSource.headers;\n    let props;\n    for (let i = 0; headers && i < headers.length; i++) {\n      props = [];\n      let keys = Object.keys(headers[i]);\n      for (let prop of keys) {\n        props.push(prop);\n        request.setRequestHeader(prop, headers[i][prop]);\n      }\n    }\n  }\n  /**\n   * Save bulk changes to the given table name.\n   * User can add a new record, edit an existing record, and delete a record at the same time.\n   * If the datasource from remote, then updated in a single post.\n   * @param  {Object} changes - Defines the CrudOptions.\n   * @param  {string} key - Defines the column field.\n   * @param  {string|Query} tableName - Defines the table name.\n   * @param  {Query} query - Sets default query for the DataManager.\n   */\n  saveChanges(changes, key, tableName, query, original) {\n    if (tableName instanceof Query) {\n      query = tableName;\n      tableName = null;\n    }\n    let args = {\n      url: tableName,\n      key: key || this.dataSource.key\n    };\n    let req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);\n    let doAjaxRequest = 'doAjaxRequest';\n    if (this.dataSource.offline) {\n      return req;\n    }\n    if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n      return this.adaptor[doAjaxRequest](req);\n    } else if (!this.isCustomDataAdaptor(this.adaptor)) {\n      let deff = new Deferred();\n      let ajax = new Ajax(req);\n      ajax.beforeSend = () => {\n        this.beforeSend(ajax.httpRequest, ajax);\n      };\n      ajax.onSuccess = (data, request) => {\n        if (this.isGraphQLAdaptor(this.adaptor)) {\n          if (!isNullOrUndefined(data['errors'])) {\n            ajax.onFailure(JSON.stringify(data['errors']));\n          }\n        }\n        deff.resolve(this.adaptor.processResponse(data, this, null, request.httpRequest, request, changes, args));\n      };\n      ajax.onFailure = e => {\n        deff.reject([{\n          error: e\n        }]);\n      };\n      ajax.send().catch(e => true); // to handle the failure requests.        \n      return deff.promise;\n    } else {\n      return this.doAjaxRequest(req, this.adaptor.options.batchUpdate);\n    }\n  }\n  /**\n   * Inserts new record in the given table.\n   * @param  {Object} data - Defines the data to insert.\n   * @param  {string|Query} tableName - Defines the table name.\n   * @param  {Query} query - Sets default query for the DataManager.\n   */\n  insert(data, tableName, query, position) {\n    if (tableName instanceof Query) {\n      query = tableName;\n      tableName = null;\n    }\n    let req = this.adaptor.insert(this, data, tableName, query, position);\n    let doAjaxRequest = 'doAjaxRequest';\n    if (this.dataSource.offline) {\n      return req;\n    }\n    if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n      return this.adaptor[doAjaxRequest](req);\n    } else {\n      return this.doAjaxRequest(req, this.adaptor.options.addRecord);\n    }\n  }\n  /**\n   * Removes data from the table with the given key.\n   * @param  {string} keyField - Defines the column field.\n   * @param  {Object} value - Defines the value to find the data in the specified column.\n   * @param  {string|Query} tableName - Defines the table name\n   * @param  {Query} query - Sets default query for the DataManager.\n   */\n  remove(keyField, value, tableName, query) {\n    if (typeof value === 'object') {\n      value = DataUtil.getObject(keyField, value);\n    }\n    if (tableName instanceof Query) {\n      query = tableName;\n      tableName = null;\n    }\n    let res = this.adaptor.remove(this, keyField, value, tableName, query);\n    let doAjaxRequest = 'doAjaxRequest';\n    if (this.dataSource.offline) {\n      return res;\n    }\n    if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n      return this.adaptor[doAjaxRequest](res);\n    } else {\n      let remove = this.adaptor.options.deleteRecord;\n      return this.doAjaxRequest(res, remove);\n    }\n  }\n  /**\n   * Updates existing record in the given table.\n   * @param  {string} keyField - Defines the column field.\n   * @param  {Object} value - Defines the value to find the data in the specified column.\n   * @param  {string|Query} tableName - Defines the table name\n   * @param  {Query} query - Sets default query for the DataManager.\n   */\n  update(keyField, value, tableName, query, original) {\n    if (tableName instanceof Query) {\n      query = tableName;\n      tableName = null;\n    }\n    let res = this.adaptor.update(this, keyField, value, tableName, query, original);\n    let doAjaxRequest = 'doAjaxRequest';\n    if (this.dataSource.offline) {\n      return res;\n    }\n    if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n      return this.adaptor[doAjaxRequest](res);\n    } else {\n      let update = this.adaptor.options.updateRecord;\n      return this.doAjaxRequest(res, update);\n    }\n  }\n  isCustomDataAdaptor(dataSource) {\n    return this.adaptor.getModuleName && this.adaptor.getModuleName() === 'CustomDataAdaptor';\n  }\n  isGraphQLAdaptor(dataSource) {\n    return this.adaptor.getModuleName && this.adaptor.getModuleName() === 'GraphQLAdaptor';\n  }\n  successFunc(record, request) {\n    if (this.isGraphQLAdaptor(this.adaptor)) {\n      let data = JSON.parse(record);\n      if (!isNullOrUndefined(data['errors'])) {\n        this.failureFunc(JSON.stringify(data['errors']));\n      }\n    }\n    if (this.isCustomDataAdaptor(this.adaptor)) {\n      request = extend({}, this.ajaxReqOption, request);\n    }\n    try {\n      DataUtil.parse.parseJson(record);\n    } catch (e) {\n      record = [];\n    }\n    record = this.adaptor.processResponse(DataUtil.parse.parseJson(record), this, null, request.httpRequest, request);\n    this.ajaxDeffered.resolve(record);\n  }\n  failureFunc(e) {\n    this.ajaxDeffered.reject([{\n      error: e\n    }]);\n  }\n  doAjaxRequest(res, ajaxFunc) {\n    res = extend({}, {\n      type: 'POST',\n      contentType: 'application/json; charset=utf-8',\n      processData: false\n    }, res);\n    this.ajaxDeffered = new Deferred();\n    if (!this.isCustomDataAdaptor(this.adaptor)) {\n      let ajax = new Ajax(res);\n      ajax.beforeSend = () => {\n        this.beforeSend(ajax.httpRequest, ajax);\n      };\n      ajax.onSuccess = this.successFunc.bind(this);\n      ajax.onFailure = this.failureFunc.bind(this);\n      ajax.send().catch(e => true); // to handle the failure requests.\n    } else {\n      this.ajaxReqOption = res;\n      ajaxFunc.call(this, {\n        data: res.data,\n        onSuccess: this.successFunc.bind(this),\n        onFailure: this.failureFunc.bind(this)\n      });\n    }\n    return this.ajaxDeffered.promise;\n  }\n}\n/**\n * Deferred is used to handle asynchronous operation.\n */\nclass Deferred {\n  constructor() {\n    /**\n     * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n     */\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n    /**\n     * Defines the callback function triggers when the Deferred object is resolved.\n     */\n    this.then = this.promise.then.bind(this.promise);\n    /**\n     * Defines the callback function triggers when the Deferred object is rejected.\n     */\n    this.catch = this.promise.catch.bind(this.promise);\n  }\n}\n\n/**\n * Data modules\n */\n\nexport { DataManager, Deferred, Query, Predicate, Adaptor, JsonAdaptor, UrlAdaptor, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, WebMethodAdaptor, RemoteSaveAdaptor, CustomDataAdaptor, GraphQLAdaptor, CacheAdaptor, DataUtil };","map":{"version":3,"names":["Ajax","extend","getValue","isNullOrUndefined","merge","setValue","Query","constructor","from","subQuery","isChild","distincts","queries","key","fKey","fromTable","Array","lookups","expands","sortedColumns","groupedColumns","params","lazyLoad","setKey","field","using","dataManager","execute","done","fail","always","executeQuery","DataUtil","throwError","executeLocal","clone","cloned","slice","subQuerySelector","isCountRequired","tableName","addParams","value","push","fn","distinct","fields","call","expand","tables","where","fieldName","operator","ignoreCase","ignoreAccent","toLowerCase","predicate","Predicate","e","search","searchKey","fieldNames","comparer","fnOperators","sortBy","isFromGroup","sortByForeignKey","direction","order","sorts","temp","endsWith","replace","fnSort","filterQueries","i","length","j","sortByDesc","group","format","page","pageIndex","pageSize","range","start","end","take","nos","skip","select","hierarchy","query","selectorFn","foreignKey","requiresCount","aggregate","type","name","filter","q","filterQueryLists","singles","filtered","indexOf","res","isComplex","processOperator","condition","predicates","apply","and","args","combinePredicates","combine","or","fromJson","json","len","fromJSONData","pred","validate","record","isAnd","ret","getObject","toJson","p","preds","result","consts","GroupGuid","inst","input","substr","startsWith","fnAscending","fnDescending","x","y","undefined","localeCompare","extractFields","obj","newObj","jsonArray","newData","aggregates","level","groupDs","isLazyLoad","jsonData","guid","indx","items","count","childLevels","grouped","groupedArray","records","val","getVal","tempObj","aggs","buildHierarchy","source","lookup","pKey","grp","fKeyData","getFieldList","prefix","copyObj","keys","Object","prop","nameSpace","splits","split","toString","fromObj","sort","ds","middle","parseInt","left","right","ignoreDiacritics","newValue","map","diacritics","join","current","shift","array","index","callAdaptorFunction","adaptor","fnName","param1","param2","getAddParams","adp","dm","req","reqParams","isPlainObject","isCors","xhr","request","window","getGuid","hexs","rand","crypto","arr","Uint8Array","getRandomValues","Math","random","isNull","getItemFromComparer","keyVal","castRequired","requiresCompleteRecord","tmp","forEach","data","processData","prepareQuery","sampledata","DataManager","requiresCounts","returnValue","JSON","stringify","parse","parseJson","predicateList","concat","getPredicate","sorted","mainPred","childPred","cpre","serverTimezoneOffset","timeZoneHandling","error","Error","message","stack","sum","isNaN","average","min","max","truecount","falsecount","operatorSymbols","odBiOperator","odUniOperator","odv4UniOperator","equal","actual","expected","notequal","lessthan","greaterthan","lessthanorequal","greaterthanorequal","contains","notnull","isnull","startswith","endswith","processSymbols","jsonText","jsonReviver","iterateAndReviveArray","iterateAndReviveJson","test","ms","exec","offSet","dateParse","toTimeZone","Date","isUTC","utcFormat","hrs","mins","setHours","getHours","getMinutes","addSelfOffset","isJson","isGuid","regex","match","replacer","jsonReplacer","arrayReplacer","d","toJSON","date","jsonDateReplacer","getTimezoneOffset","toUTC","offset","utc","unix","toLocalTime","datefn","timeZone","differenceString","localtimefn","num","norm","floor","abs","getFullYear","getMonth","getDate","getSeconds","consts$1","Adaptor","options","requestType","dataSource","pvt","processResponse","JsonAdaptor","processQuery","countFlg","keyCount","agg","lazyLoadData","lazyLoadGroup","getAggregate","onDemandGroupInfo","onWhere","formGroupResult","onPage","uid","childLevel","aggQuery","batchRequest","changes","deletedRecordsLen","deletedRecords","addedRecords","insert","changedRecords","update","remove","onAggregates","onSearch","onSortBy","fnCompare","onGroup","size","onRange","onTake","onSkip","onSelect","position","splice","keyField","UrlAdaptor","hierarchyFilters","getQueryRequest","url","groups","filters","searches","getFiltersFrom","getModuleName","getRequestQuery","pvtData","contentType","convertToQueryString","request1","param","selects","getResponseHeader","handleTimeZone","requests","action","isExpand","isArray","formRemoteGroupedData","getAggregateResult","childLvl","lvl","getGroupedRecords","hasRecords","childGroupedRecords","original","batchUrl","crudUrl","removeUrl","dataType","changed","added","deleted","table","beforeSend","insertUrl","keyColumn","updateUrl","predicats","pData","aggregateData","isServerGrouping","groupQuery","ODataAdaptor","props","accept","multipartAccept","batch","changeSet","batchPre","contentId","batchContent","changeSetContent","batchChangeSetContentType","updateType","onPredicate","requiresCast","getField","encodeURIComponent","onComplexPredicate","onEachWhere","onEachSearch","onEachSort","reverse","onCount","settings","setRequestHeader","overrideMimeType","metaCheck","rootUrl","dataUrls","resourceTableName","dataCopy","results","metaData","emptyAndBatch","processBatchResponse","versionCheck","version","oDataCount","requiresFormat","localTimeReplacer","convertObj","localTime","compareAndRemove","initialGuid","cid","cSet","generateInsertRequest","generateUpdateRequest","generateDeleteRequest","stat","dateTime","generateBodyContent","org","change","o","method","cIdx","jsonObj","substring","exVal","changeGuid","final","valueOf","ODataV4Adaptor","isDate","onExpand","selected","expanded","exArr","item","sel","exp","close","combineVal","expandQueryIndex","idx","ex","onDistinct","distinctFields","metaName","dataUrl","dataCount","WebApiAdaptor","location","host","state","datTime","Count","Items","WebMethodAdaptor","getData","RemoteSaveAdaptor","prototype","updateKey","urlParams","CustomDataAdaptor","Function","addRecord","updateRecord","deleteRecord","batchUpdate","GraphQLAdaptor","opt","schema","response","getVariables","getQuery","datamanager","urlQuery","arguments","str","vars","variables","resData","inserted","generateCrudData","bData","crudData","parsed","getMutation","CacheAdaptor","timeStamp","isCrudAction","isInsertAction","cacheAdaptor","guidId","localStorage","setItem","setInterval","getItem","forDel","currentTime","requestTime","removeItem","generateKey","currentFilter","newQuery","cachedItems","crossDomain","offline","headers","timeTillExpiration","cachingPageSize","enableCaching","jsonp","defaultQuery","isDataAvailable","ready","then","setDefaultQuery","makeRequest","deffered","Deferred","isCustomDataAdaptor","getDeferedArgs","resolve","nextTick","promise","setImmediate","setTimeout","extendRequest","fnSuccess","fnFail","cache","onSuccess","onFailure","isSelector","reject","process","virtualSelectRecords","fnQueryChild","selector","subDeffer","childArgs","parent","subUrl","childReq","subData","isGraphQLAdaptor","ajaxReqOption","httpRequest","virtualRecords","ajax","send","catch","Promise","all","pResult","cResult","saveChanges","doAjaxRequest","deff","successFunc","failureFunc","ajaxDeffered","ajaxFunc","bind"],"sources":["/home/unutu/go/src/github.com/thteam47/admin-portal/node_modules/@syncfusion/ej2-data/dist/es6/ej2-data.es2015.js"],"sourcesContent":["import { Ajax, extend, getValue, isNullOrUndefined, merge, setValue } from '@syncfusion/ej2-base';\n\n/**\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\n */\nclass Query {\n    /**\n     * Constructor for Query class.\n     * @param  {string|string[]} from?\n     * @hidden\n     */\n    constructor(from) {\n        /** @hidden */\n        this.subQuery = null;\n        /** @hidden */\n        this.isChild = false;\n        /** @hidden */\n        this.distincts = [];\n        this.queries = [];\n        this.key = '';\n        this.fKey = '';\n        if (typeof from === 'string') {\n            this.fromTable = from;\n        }\n        else if (from && from instanceof Array) {\n            this.lookups = from;\n        }\n        this.expands = [];\n        this.sortedColumns = [];\n        this.groupedColumns = [];\n        this.subQuery = null;\n        this.isChild = false;\n        this.params = [];\n        this.lazyLoad = [];\n        return this;\n    }\n    /**\n     * Sets the primary key.\n     * @param  {string} field - Defines the column field.\n     */\n    setKey(field) {\n        this.key = field;\n        return this;\n    }\n    /**\n     * Sets default DataManager to execute query.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    using(dataManager) {\n        this.dataManager = dataManager;\n        return this;\n    }\n    /**\n     * Executes query with the given DataManager.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     * @param  {Function} done - Defines the success callback.\n     * @param  {Function} fail - Defines the failure callback.\n     * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\n     *\n     * <pre>\n     * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\n     * let query: Query = new Query();\n     * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\n     * let promise: Promise< Object > = query.execute(dataManager);\n     * promise.then((e: { result: Object }) => { });\n     * </pre>\n     */\n    execute(dataManager, done, fail, always) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeQuery(this, done, fail, always);\n        }\n        return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Executes query with the local datasource.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    executeLocal(dataManager) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeLocal(this);\n        }\n        return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Creates deep copy of the Query object.\n     */\n    clone() {\n        let cloned = new Query();\n        cloned.queries = this.queries.slice(0);\n        cloned.key = this.key;\n        cloned.isChild = this.isChild;\n        cloned.dataManager = this.dataManager;\n        cloned.fromTable = this.fromTable;\n        cloned.params = this.params.slice(0);\n        cloned.expands = this.expands.slice(0);\n        cloned.sortedColumns = this.sortedColumns.slice(0);\n        cloned.groupedColumns = this.groupedColumns.slice(0);\n        cloned.subQuerySelector = this.subQuerySelector;\n        cloned.subQuery = this.subQuery;\n        cloned.fKey = this.fKey;\n        cloned.isCountRequired = this.isCountRequired;\n        cloned.distincts = this.distincts.slice(0);\n        cloned.lazyLoad = this.lazyLoad.slice(0);\n        return cloned;\n    }\n    /**\n     * Specifies the name of table to retrieve data in query execution.\n     * @param  {string} tableName - Defines the table name.\n     */\n    from(tableName) {\n        this.fromTable = tableName;\n        return this;\n    }\n    /**\n     * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\n     * @param  {string} key - Defines the key of additional parameter.\n     * @param  {Function|string} value - Defines the value for the key.\n     */\n    addParams(key, value) {\n        if (typeof value === 'function') {\n            this.params.push({ key: key, fn: value });\n        }\n        else {\n            this.params.push({ key: key, value: value });\n        }\n        return this;\n    }\n    /**\n     * @hidden\n     */\n    distinct(fields) {\n        if (typeof fields === 'string') {\n            this.distincts = [].slice.call([fields], 0);\n        }\n        else {\n            this.distincts = fields.slice(0);\n        }\n        return this;\n    }\n    /**\n     * Expands the related table.\n     * @param  {string|Object[]} tables\n     */\n    expand(tables) {\n        if (typeof tables === 'string') {\n            this.expands = [].slice.call([tables], 0);\n        }\n        else {\n            this.expands = tables.slice(0);\n        }\n        return this;\n    }\n    /**\n     * Filter data with given filter criteria.\n     * @param  {string|Predicate} fieldName - Defines the column field or Predicate.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string|number|boolean} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    where(fieldName, operator, value, ignoreCase, ignoreAccent) {\n        operator = operator ? (operator).toLowerCase() : null;\n        let predicate = null;\n        if (typeof fieldName === 'string') {\n            predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);\n        }\n        else if (fieldName instanceof Predicate) {\n            predicate = fieldName;\n        }\n        this.queries.push({\n            fn: 'onWhere',\n            e: predicate\n        });\n        return this;\n    }\n    /**\n     * Search data with given search criteria.\n     * @param  {string|number|boolean} searchKey - Defines the search key.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     * @param  {string} operator - Defines the operator how to search data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    search(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [fieldNames];\n        }\n        if (!operator || operator === 'none') {\n            operator = 'contains';\n        }\n        let comparer = DataUtil.fnOperators[operator];\n        this.queries.push({\n            fn: 'onSearch',\n            e: {\n                fieldNames: fieldNames,\n                operator: operator,\n                searchKey: searchKey,\n                ignoreCase: ignoreCase,\n                ignoreAccent: ignoreAccent,\n                comparer: comparer\n            }\n        });\n        return this;\n    }\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     */\n    sortBy(fieldName, comparer, isFromGroup) {\n        return this.sortByForeignKey(fieldName, comparer, isFromGroup);\n    }\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     * @param  {string} direction - Defines the sort direction .\n     */\n    sortByForeignKey(fieldName, comparer, isFromGroup, direction) {\n        let order = !isNullOrUndefined(direction) ? direction : 'ascending';\n        let sorts;\n        let temp;\n        if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\n            fieldName = fieldName.replace(/ desc$/i, '');\n            comparer = 'descending';\n        }\n        if (!comparer || typeof comparer === 'string') {\n            order = comparer ? comparer.toLowerCase() : 'ascending';\n            comparer = DataUtil.fnSort(comparer);\n        }\n        if (isFromGroup) {\n            sorts = Query.filterQueries(this.queries, 'onSortBy');\n            for (let i = 0; i < sorts.length; i++) {\n                temp = sorts[i].e.fieldName;\n                if (typeof temp === 'string') {\n                    if (temp === fieldName) {\n                        return this;\n                    }\n                }\n                else if (temp instanceof Array) {\n                    for (let j = 0; j < temp.length; j++) {\n                        if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\n                            return this;\n                        }\n                    }\n                }\n            }\n        }\n        this.queries.push({\n            fn: 'onSortBy',\n            e: {\n                fieldName: fieldName,\n                comparer: comparer,\n                direction: order\n            }\n        });\n        return this;\n    }\n    /**\n     * Sorts data in descending order.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    sortByDesc(fieldName) {\n        return this.sortBy(fieldName, 'descending');\n    }\n    /**\n     * Groups data with the given field name.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    group(fieldName, fn, format) {\n        this.sortBy(fieldName, null, true);\n        this.queries.push({\n            fn: 'onGroup',\n            e: {\n                fieldName: fieldName,\n                comparer: fn ? fn : null,\n                format: format ? format : null\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data based on the given page index and size.\n     * @param  {number} pageIndex - Defines the current page index.\n     * @param  {number} pageSize - Defines the no of records per page.\n     */\n    page(pageIndex, pageSize) {\n        this.queries.push({\n            fn: 'onPage',\n            e: {\n                pageIndex: pageIndex,\n                pageSize: pageSize\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data based on the given start and end index.\n     * @param  {number} start - Defines the start index of the datasource.\n     * @param  {number} end - Defines the end index of the datasource.\n     */\n    range(start, end) {\n        this.queries.push({\n            fn: 'onRange',\n            e: {\n                start: start,\n                end: end\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data from the top of the data source based on given number of records count.\n     * @param  {number} nos - Defines the no of records to retrieve from datasource.\n     */\n    take(nos) {\n        this.queries.push({\n            fn: 'onTake',\n            e: {\n                nos: nos\n            }\n        });\n        return this;\n    }\n    /**\n     * Skips data with given number of records count from the top of the data source.\n     * @param  {number} nos - Defines the no of records skip in the datasource.\n     */\n    skip(nos) {\n        this.queries.push({\n            fn: 'onSkip',\n            e: { nos: nos }\n        });\n        return this;\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     */\n    select(fieldNames) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [].slice.call([fieldNames], 0);\n        }\n        this.queries.push({\n            fn: 'onSelect',\n            e: { fieldNames: fieldNames }\n        });\n        return this;\n    }\n    /**\n     * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\n     * @param  {Query} query - Defines the query to relate two tables.\n     * @param  {Function} selectorFn - Defines the custom function to select records.\n     */\n    hierarchy(query, selectorFn) {\n        this.subQuerySelector = selectorFn;\n        this.subQuery = query;\n        return this;\n    }\n    /**\n     * Sets the foreign key which is used to get data from the related table.\n     * @param  {string} key - Defines the foreign key.\n     */\n    foreignKey(key) {\n        this.fKey = key;\n        return this;\n    }\n    /**\n     * It is used to get total number of records in the DataManager execution result.\n     */\n    requiresCount() {\n        this.isCountRequired = true;\n        return this;\n    }\n    //type - sum, avg, min, max\n    /**\n     * Aggregate the data with given type and field name.\n     * @param  {string} type - Defines the aggregate type.\n     * @param  {string} field - Defines the column field to aggregate.\n     */\n    aggregate(type, field) {\n        this.queries.push({\n            fn: 'onAggregates',\n            e: { field: field, type: type }\n        });\n        return this;\n    }\n    /**\n     * Pass array of filterColumn query for performing filter operation.\n     * @param  {QueryOptions[]} queries\n     * @param  {string} name\n     * @hidden\n     */\n    static filterQueries(queries, name) {\n        return queries.filter((q) => {\n            return q.fn === name;\n        });\n    }\n    /**\n     * To get the list of queries which is already filtered in current data source.\n     * @param  {Object[]} queries\n     * @param  {string[]} singles\n     * @hidden\n     */\n    static filterQueryLists(queries, singles) {\n        let filtered = queries.filter((q) => {\n            return singles.indexOf(q.fn) !== -1;\n        });\n        let res = {};\n        for (let i = 0; i < filtered.length; i++) {\n            if (!res[filtered[i].fn]) {\n                res[filtered[i].fn] = filtered[i].e;\n            }\n        }\n        return res;\n    }\n}\n/**\n * Predicate class is used to generate complex filter criteria.\n * This will be used by DataManager to perform multiple filtering operation.\n */\nclass Predicate {\n    /**\n     * Constructor for Predicate class.\n     * @param  {string|Predicate} field\n     * @param  {string} operator\n     * @param  {string|number|boolean|Predicate|Predicate[]} value\n     * @param  {boolean=false} ignoreCase\n     * @hidden\n     */\n    constructor(field, operator, value, ignoreCase = false, ignoreAccent) {\n        /** @hidden */\n        this.ignoreAccent = false;\n        /** @hidden */\n        this.isComplex = false;\n        if (typeof field === 'string') {\n            this.field = field;\n            this.operator = operator.toLowerCase();\n            this.value = value;\n            this.ignoreCase = ignoreCase;\n            this.ignoreAccent = ignoreAccent;\n            this.isComplex = false;\n            this.comparer = DataUtil.fnOperators.processOperator(this.operator);\n        }\n        else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\n            this.isComplex = true;\n            this.condition = operator.toLowerCase();\n            this.predicates = [field];\n            if (value instanceof Array) {\n                [].push.apply(this.predicates, value);\n            }\n            else {\n                this.predicates.push(value);\n            }\n        }\n        return this;\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “and” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    static and(...args) {\n        return Predicate.combinePredicates([].slice.call(args, 0), 'and');\n    }\n    /**\n     * Adds new predicate on existing predicate with “and” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    and(field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “or” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    static or(...args) {\n        return Predicate.combinePredicates([].slice.call(args, 0), 'or');\n    }\n    /**\n     * Adds new predicate on existing predicate with “or” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    or(field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Converts plain JavaScript object to Predicate object.\n     * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\n     */\n    static fromJson(json) {\n        if (json instanceof Array) {\n            let res = [];\n            for (let i = 0, len = json.length; i < len; i++) {\n                res.push(this.fromJSONData(json[i]));\n            }\n            return res;\n        }\n        let pred = json;\n        return this.fromJSONData(pred);\n    }\n    /**\n     * Validate the record based on the predicates.\n     * @param  {Object} record - Defines the datasource record.\n     */\n    validate(record) {\n        let predicate = this.predicates ? this.predicates : [];\n        let isAnd;\n        let ret;\n        if (!this.isComplex && this.comparer) {\n            return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n        }\n        isAnd = this.condition === 'and';\n        for (let i = 0; i < predicate.length; i++) {\n            ret = predicate[i].validate(record);\n            if (isAnd) {\n                if (!ret) {\n                    return false;\n                }\n            }\n            else {\n                if (ret) {\n                    return true;\n                }\n            }\n        }\n        return isAnd;\n    }\n    /**\n     * Converts predicates to plain JavaScript.\n     * This method is uses Json stringify when serializing Predicate object.\n     */\n    toJson() {\n        let predicates;\n        let p;\n        if (this.isComplex) {\n            predicates = [];\n            p = this.predicates;\n            for (let i = 0; i < p.length; i++) {\n                predicates.push(p[i].toJson());\n            }\n        }\n        return {\n            isComplex: this.isComplex,\n            field: this.field,\n            operator: this.operator,\n            value: this.value,\n            ignoreCase: this.ignoreCase,\n            ignoreAccent: this.ignoreAccent,\n            condition: this.condition,\n            predicates: predicates\n        };\n    }\n    static combinePredicates(predicates, operator) {\n        if (predicates.length === 1) {\n            if (!(predicates[0] instanceof Array)) {\n                return predicates[0];\n            }\n            predicates = predicates[0];\n        }\n        return new Predicate(predicates[0], operator, predicates.slice(1));\n    }\n    static combine(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {\n        if (field instanceof Predicate) {\n            return Predicate[condition](pred, field);\n        }\n        if (typeof field === 'string') {\n            return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));\n        }\n        return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\n    }\n    static fromJSONData(json) {\n        let preds = json.predicates || [];\n        let len = preds.length;\n        let predicates = [];\n        let result;\n        for (let i = 0; i < len; i++) {\n            predicates.push(this.fromJSONData(preds[i]));\n        }\n        if (!json.isComplex) {\n            result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);\n        }\n        else {\n            result = new Predicate(predicates[0], json.condition, predicates.slice(1));\n        }\n        return result;\n    }\n}\n\nconst consts = { GroupGuid: '{271bbba0-1ee7}' };\n/**\n * Data manager common utility methods.\n * @hidden\n */\nclass DataUtil {\n    /**\n     * Returns the value by invoking the provided parameter function.\n     * If the paramater is not of type function then it will be returned as it is.\n     * @param  {Function|string|string[]|number} value\n     * @param  {Object} inst?\n     * @hidden\n     */\n    static getValue(value, inst) {\n        if (typeof value === 'function') {\n            return value.call(inst || {});\n        }\n        return value;\n    }\n    /**\n     * Returns true if the input string ends with given string.\n     * @param  {string} input\n     * @param  {string} substr\n     */\n    static endsWith(input, substr) {\n        return input.slice && input.slice(-substr.length) === substr;\n    }\n    /**\n     * Returns true if the input string starts with given string.\n     * @param  {string} str\n     * @param  {string} startstr\n     */\n    static startsWith(input, start) {\n        return input.slice(0, start.length) === start;\n    }\n    /**\n     * To return the sorting function based on the string.\n     * @param  {string} order\n     * @hidden\n     */\n    static fnSort(order) {\n        order = order ? DataUtil.toLowerCase(order) : 'ascending';\n        if (order === 'ascending') {\n            return this.fnAscending;\n        }\n        return this.fnDescending;\n    }\n    /**\n     * Comparer function which is used to sort the data in ascending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    static fnAscending(x, y) {\n        if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n            return -1;\n        }\n        if (y === null || y === undefined) {\n            return -1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y);\n        }\n        if (x === null || x === undefined) {\n            return 1;\n        }\n        return x - y;\n    }\n    /**\n     * Comparer function which is used to sort the data in descending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    static fnDescending(x, y) {\n        if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n            return -1;\n        }\n        if (y === null || y === undefined) {\n            return 1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y) * -1;\n        }\n        if (x === null || x === undefined) {\n            return -1;\n        }\n        return y - x;\n    }\n    static extractFields(obj, fields) {\n        let newObj = {};\n        for (let i = 0; i < fields.length; i++) {\n            newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);\n        }\n        return newObj;\n    }\n    /**\n     * Select objects by given fields from jsonArray.\n     * @param  {Object[]} jsonArray\n     * @param  {string[]} fields\n     */\n    static select(jsonArray, fields) {\n        let newData = [];\n        for (let i = 0; i < jsonArray.length; i++) {\n            newData.push(this.extractFields(jsonArray[i], fields));\n        }\n        return newData;\n    }\n    /**\n     * Group the input data based on the field name.\n     * It also performs aggregation of the grouped records based on the aggregates paramater.\n     * @param  {Object[]} jsonArray\n     * @param  {string} field?\n     * @param  {Object[]} agg?\n     * @param  {number} level?\n     * @param  {Object[]} groupDs?\n     */\n    static group(jsonArray, field, aggregates, level, groupDs, format, isLazyLoad) {\n        level = level || 1;\n        let jsonData = jsonArray;\n        let guid = 'GroupGuid';\n        if (jsonData.GroupGuid === consts[guid]) {\n            for (let j = 0; j < jsonData.length; j++) {\n                if (!isNullOrUndefined(groupDs)) {\n                    let indx = -1;\n                    let temp = groupDs.filter((e) => { return e.key === jsonData[j].key; });\n                    indx = groupDs.indexOf(temp[0]);\n                    jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format, isLazyLoad);\n                    jsonData[j].count = groupDs[indx].count;\n                }\n                else {\n                    jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format, isLazyLoad);\n                    jsonData[j].count = jsonData[j].items.length;\n                }\n            }\n            jsonData.childLevels += 1;\n            return jsonData;\n        }\n        let grouped = {};\n        let groupedArray = [];\n        groupedArray.GroupGuid = consts[guid];\n        groupedArray.level = level;\n        groupedArray.childLevels = 0;\n        groupedArray.records = jsonData;\n        for (let i = 0; i < jsonData.length; i++) {\n            let val = this.getVal(jsonData, i, field);\n            if (!isNullOrUndefined(format)) {\n                val = format(val, field);\n            }\n            if (!grouped[val]) {\n                grouped[val] = {\n                    key: val,\n                    count: 0,\n                    items: [],\n                    aggregates: {},\n                    field: field\n                };\n                groupedArray.push(grouped[val]);\n                if (!isNullOrUndefined(groupDs)) {\n                    let tempObj = groupDs.filter((e) => { return e.key === grouped[val].key; });\n                    grouped[val].count = tempObj[0].count;\n                }\n            }\n            grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;\n            if (!isLazyLoad || (isLazyLoad && aggregates.length)) {\n                grouped[val].items.push(jsonData[i]);\n            }\n        }\n        if (aggregates && aggregates.length) {\n            for (let i = 0; i < groupedArray.length; i++) {\n                let res = {};\n                let fn;\n                let aggs = aggregates;\n                for (let j = 0; j < aggregates.length; j++) {\n                    fn = DataUtil.aggregates[aggregates[j].type];\n                    if (!isNullOrUndefined(groupDs)) {\n                        let temp = groupDs.filter((e) => { return e.key === groupedArray[i].key; });\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(temp[0].items, aggs[j].field);\n                        }\n                    }\n                    else {\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(groupedArray[i].items, aggs[j].field);\n                        }\n                    }\n                }\n                groupedArray[i].aggregates = res;\n            }\n        }\n        if (isLazyLoad && groupedArray.length && aggregates.length) {\n            for (let i = 0; i < groupedArray.length; i++) {\n                groupedArray[i].items = [];\n            }\n        }\n        return jsonData.length && groupedArray || jsonData;\n    }\n    /**\n     * It is used to categorize the multiple items based on a specific field in jsonArray.\n     * The hierarchical queries are commonly required when you use foreign key binding.\n     * @param  {string} fKey\n     * @param  {string} from\n     * @param  {Object[]} source\n     * @param  {Group} lookup?\n     * @param  {string} pKey?\n     * @hidden\n     */\n    static buildHierarchy(fKey, from, source, lookup, pKey) {\n        let i;\n        let grp = {};\n        let temp;\n        if (lookup.result) {\n            lookup = lookup.result;\n        }\n        if (lookup.GroupGuid) {\n            this.throwError('DataManager: Do not have support Grouping in hierarchy');\n        }\n        for (i = 0; i < lookup.length; i++) {\n            let fKeyData = this.getObject(fKey, lookup[i]);\n            temp = grp[fKeyData] || (grp[fKeyData] = []);\n            temp.push(lookup[i]);\n        }\n        for (i = 0; i < source.length; i++) {\n            let fKeyData = this.getObject(pKey || fKey, source[i]);\n            source[i][from] = grp[fKeyData];\n        }\n    }\n    /**\n     * The method used to get the field names which started with specified characters.\n     * @param  {Object} obj\n     * @param  {string[]} fields?\n     * @param  {string} prefix?\n     * @hidden\n     */\n    static getFieldList(obj, fields, prefix) {\n        if (prefix === undefined) {\n            prefix = '';\n        }\n        if (fields === undefined || fields === null) {\n            return this.getFieldList(obj, [], prefix);\n        }\n        let copyObj = obj;\n        let keys = Object.keys(obj);\n        for (let prop of keys) {\n            if (typeof copyObj[prop] === 'object' && !(copyObj[prop] instanceof Array)) {\n                this.getFieldList(copyObj[prop], fields, prefix + prop + '.');\n            }\n            else {\n                fields.push(prefix + prop);\n            }\n        }\n        return fields;\n    }\n    /**\n     * Gets the value of the property in the given object.\n     * The complex object can be accessed by providing the field names concatenated with dot(.).\n     * @param  {string} nameSpace - The name of the property to be accessed.\n     * @param  {Object} from - Defines the source object.\n     */\n    static getObject(nameSpace, from) {\n        if (!nameSpace) {\n            return from;\n        }\n        if (!from) {\n            return undefined;\n        }\n        if (nameSpace.indexOf('.') === -1) {\n            return from[nameSpace];\n        }\n        let value = from;\n        let splits = nameSpace.split('.');\n        for (let i = 0; i < splits.length; i++) {\n            if (value == null) {\n                break;\n            }\n            value = value[splits[i]];\n        }\n        return value;\n    }\n    /**\n     * To set value for the nameSpace in desired object.\n     * @param {string} nameSpace - String value to the get the inner object.\n     * @param {Object} value - Value that you need to set.\n     * @param {Object} obj - Object to get the inner object value.\n     * @return { [key: string]: Object; } | Object\n     * @hidden\n     */\n    static setValue(nameSpace, value, obj) {\n        let keys = nameSpace.toString().split('.');\n        let start = obj || {};\n        let fromObj = start;\n        let i;\n        let length = keys.length;\n        let key;\n        for (i = 0; i < length; i++) {\n            key = keys[i];\n            if (i + 1 === length) {\n                fromObj[key] = value === undefined ? undefined : value;\n            }\n            else if (isNullOrUndefined(fromObj[key])) {\n                fromObj[key] = {};\n            }\n            fromObj = fromObj[key];\n        }\n        return start;\n    }\n    /**\n     * Sort the given data based on the field and comparer.\n     * @param  {Object[]} ds - Defines the input data.\n     * @param  {string} field - Defines the field to be sorted.\n     * @param  {Function} comparer - Defines the comparer function used to sort the records.\n     */\n    static sort(ds, field, comparer) {\n        if (ds.length <= 1) {\n            return ds;\n        }\n        let middle = parseInt((ds.length / 2).toString(), 10);\n        let left = ds.slice(0, middle);\n        let right = ds.slice(middle);\n        left = this.sort(left, field, comparer);\n        right = this.sort(right, field, comparer);\n        return this.merge(left, right, field, comparer);\n    }\n    static ignoreDiacritics(value) {\n        if (typeof value !== 'string') {\n            return value;\n        }\n        let result = value.split('');\n        let newValue = result.map((temp) => temp in DataUtil.diacritics ? DataUtil.diacritics[temp] : temp);\n        return newValue.join('');\n    }\n    static merge(left, right, fieldName, comparer) {\n        let result = [];\n        let current;\n        while (left.length > 0 || right.length > 0) {\n            if (left.length > 0 && right.length > 0) {\n                if (comparer) {\n                    current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;\n                }\n                else {\n                    current = left[0][fieldName] < left[0][fieldName] ? left : right;\n                }\n            }\n            else {\n                current = left.length > 0 ? left : right;\n            }\n            result.push(current.shift());\n        }\n        return result;\n    }\n    static getVal(array, index, field) {\n        return field ? this.getObject(field, array[index]) : array[index];\n    }\n    static toLowerCase(val) {\n        return val ? typeof val === 'string' ? val.toLowerCase() : val.toString() : (val === 0 || val === false) ? val.toString() : '';\n    }\n    /**\n     * To perform the filter operation with specified adaptor and returns the result.\n     * @param  {Object} adaptor\n     * @param  {string} fnName\n     * @param  {Object} param1?\n     * @param  {Object} param2?\n     * @hidden\n     */\n    static callAdaptorFunction(adaptor, fnName, param1, param2) {\n        if (fnName in adaptor) {\n            let res = adaptor[fnName](param1, param2);\n            if (!isNullOrUndefined(res)) {\n                param1 = res;\n            }\n        }\n        return param1;\n    }\n    static getAddParams(adp, dm, query) {\n        let req = {};\n        DataUtil.callAdaptorFunction(adp, 'addParams', {\n            dm: dm,\n            query: query,\n            params: query.params,\n            reqParams: req\n        });\n        return req;\n    }\n    /**\n     * Checks wheather the given input is a plain object or not.\n     * @param  {Object|Object[]} obj\n     */\n    static isPlainObject(obj) {\n        return (!!obj) && (obj.constructor === Object);\n    }\n    /**\n     * Returns true when the browser cross origin request.\n     */\n    static isCors() {\n        let xhr = null;\n        let request = 'XMLHttpRequest';\n        try {\n            xhr = new window[request]();\n        }\n        catch (e) {\n            // No exception handling\n        }\n        return !!xhr && ('withCredentials' in xhr);\n    }\n    /**\n     * Generate random GUID value which will be prefixed with the given value.\n     * @param  {string} prefix\n     */\n    static getGuid(prefix) {\n        let hexs = '0123456789abcdef';\n        let rand;\n        return (prefix || '') + '00000000-0000-4000-0000-000000000000'.replace(/0/g, (val, i) => {\n            if ('crypto' in window && 'getRandomValues' in crypto) {\n                let arr = new Uint8Array(1);\n                window.crypto.getRandomValues(arr);\n                rand = arr[0] % 16 | 0;\n            }\n            else {\n                rand = Math.random() * 16 | 0;\n            }\n            return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];\n        });\n    }\n    /**\n     * Checks wheather the given value is null or not.\n     * @param  {string|Object} val\n     * @returns boolean\n     */\n    static isNull(val) {\n        return val === undefined || val === null;\n    }\n    /**\n     * To get the required items from collection of objects.\n     * @param  {Object[]} array\n     * @param  {string} field\n     * @param  {Function} comparer\n     * @returns Object\n     * @hidden\n     */\n    static getItemFromComparer(array, field, comparer) {\n        let keyVal;\n        let current;\n        let key;\n        let i = 0;\n        let castRequired = typeof DataUtil.getVal(array, 0, field) === 'string';\n        if (array.length) {\n            while (isNullOrUndefined(keyVal) && i < array.length) {\n                keyVal = DataUtil.getVal(array, i, field);\n                key = array[i++];\n            }\n        }\n        for (; i < array.length; i++) {\n            current = DataUtil.getVal(array, i, field);\n            if (isNullOrUndefined(current)) {\n                continue;\n            }\n            if (castRequired) {\n                keyVal = +keyVal;\n                current = +current;\n            }\n            if (comparer(keyVal, current) > 0) {\n                keyVal = current;\n                key = array[i];\n            }\n        }\n        return key;\n    }\n    /**\n     * To get distinct values of Array or Array of Objects.\n     * @param  {Object[]} json\n     * @param  {string} field\n     * @param  {boolean} requiresCompleteRecord\n     * @returns Object[]\n     * * distinct array of objects is return when requiresCompleteRecord set as true.\n     * @hidden\n     */\n    static distinct(json, fieldName, requiresCompleteRecord) {\n        requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;\n        let result = [];\n        let val;\n        let tmp = {};\n        json.forEach((data, index) => {\n            val = typeof (json[index]) === 'object' ? DataUtil.getVal(json, index, fieldName) : json[index];\n            if (!(val in tmp)) {\n                result.push(!requiresCompleteRecord ? val : json[index]);\n                tmp[val] = 1;\n            }\n        });\n        return result;\n    }\n    /**\n     * Process the given records based on the datamanager string.\n     * @param  {string} datamanager\n     * @param  {Object[]} records\n     */\n    static processData(dm, records) {\n        let query = this.prepareQuery(dm);\n        let sampledata = new DataManager(records);\n        if (dm.requiresCounts) {\n            query.requiresCount();\n        }\n        let result = sampledata.executeLocal(query);\n        let returnValue = {\n            result: dm.requiresCounts ? result.result : result,\n            count: result.count,\n            aggregates: JSON.stringify(result.aggregates)\n        };\n        return dm.requiresCounts ? returnValue : result;\n    }\n    static prepareQuery(dm) {\n        let query = new Query();\n        if (dm.select) {\n            query.select(dm.select);\n        }\n        if (dm.where) {\n            let where = DataUtil.parse.parseJson(dm.where);\n            where.filter((pred) => {\n                if (isNullOrUndefined(pred.condition)) {\n                    query.where(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent);\n                }\n                else {\n                    let predicateList = [];\n                    if (pred.field) {\n                        predicateList.push(new Predicate(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent));\n                    }\n                    else {\n                        predicateList = predicateList.concat(this.getPredicate(pred.predicates));\n                    }\n                    if (pred.condition == 'or') {\n                        query.where(Predicate.or(predicateList));\n                    }\n                    else if (pred.condition == 'and') {\n                        query.where(Predicate.and(predicateList));\n                    }\n                }\n            });\n        }\n        if (dm.search) {\n            let search = DataUtil.parse.parseJson(dm.search);\n            search.filter((e) => query.search(e.key, e.fields, e['operator'], e['ignoreCase'], e['ignoreAccent']));\n        }\n        if (dm.aggregates) {\n            dm.aggregates.filter((e) => query.aggregate(e.type, e.field));\n        }\n        if (dm.sorted) {\n            dm.sorted.filter((e) => query.sortBy(e.name, e.direction));\n        }\n        if (dm.skip) {\n            query.skip(dm.skip);\n        }\n        if (dm.take) {\n            query.take(dm.take);\n        }\n        if (dm.group) {\n            dm.group.filter((grp) => query.group(grp));\n        }\n        return query;\n    }\n    static getPredicate(pred) {\n        let mainPred = [];\n        for (let i = 0; i < pred.length; i++) {\n            let e = pred[i];\n            if (e.field) {\n                mainPred.push(new Predicate(e.field, e.operator, e.value, e.ignoreCase, e.ignoreAccent));\n            }\n            else {\n                let childPred = [];\n                let cpre = this.getPredicate(e.predicates);\n                for (const prop of Object.keys(cpre)) {\n                    childPred.push(cpre[prop]);\n                }\n                mainPred.push(e.condition == 'or' ? Predicate.or(childPred) : Predicate.and(childPred));\n            }\n        }\n        return mainPred;\n    }\n}\n/**\n * Specifies the value which will be used to adjust the date value to server timezone.\n * @default null\n */\nDataUtil.serverTimezoneOffset = null;\n/**\n * Species whether are not to be parsed with serverTimezoneOffset value.\n * @hidden\n */\nDataUtil.timeZoneHandling = true;\n/**\n * Throw error with the given string as message.\n * @param  {string} er\n */\nDataUtil.throwError = (error) => {\n    try {\n        throw new Error(error);\n    }\n    catch (e) {\n        throw e.message + '\\n' + e.stack;\n    }\n};\nDataUtil.aggregates = {\n    /**\n     * Calculate sum of the given field in the data.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    sum: (ds, field) => {\n        let result = 0;\n        let val;\n        let castRequired = typeof DataUtil.getVal(ds, 0, field) !== 'number';\n        for (let i = 0; i < ds.length; i++) {\n            val = DataUtil.getVal(ds, i, field);\n            if (!isNaN(val) && val !== null) {\n                if (castRequired) {\n                    val = +val;\n                }\n                result += val;\n            }\n        }\n        return result;\n    },\n    /**\n     * Calculate average value of the given field in the data.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    average: (ds, field) => {\n        return DataUtil.aggregates.sum(ds, field) / ds.length;\n    },\n    /**\n     * Returns the min value of the data based on the field.\n     * @param  {Object[]} ds\n     * @param  {string|Function} field\n     */\n    min: (ds, field) => {\n        let comparer;\n        if (typeof field === 'function') {\n            comparer = field;\n            field = null;\n        }\n        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));\n    },\n    /**\n     * Returns the max value of the data based on the field.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     * @returns number\n     */\n    max: (ds, field) => {\n        let comparer;\n        if (typeof field === 'function') {\n            comparer = field;\n            field = null;\n        }\n        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));\n    },\n    /**\n     * Returns the total number of true value present in the data based on the given boolean field name.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    truecount: (ds, field) => {\n        return new DataManager(ds).executeLocal(new Query().where(field, 'equal', true, true)).length;\n    },\n    /**\n     * Returns the total number of false value present in the data based on the given boolean field name.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    falsecount: (ds, field) => {\n        return new DataManager(ds).executeLocal(new Query().where(field, 'equal', false, true)).length;\n    },\n    /**\n     * Returns the length of the given data.\n     * @param  {Object[]} ds\n     * @param  {string} field?\n     * @returns number\n     */\n    count: (ds, field) => {\n        return ds.length;\n    }\n};\n/**\n * Specifies the Object with filter operators.\n */\nDataUtil.operatorSymbols = {\n    '<': 'lessthan',\n    '>': 'greaterthan',\n    '<=': 'lessthanorequal',\n    '>=': 'greaterthanorequal',\n    '==': 'equal',\n    '!=': 'notequal',\n    '*=': 'contains',\n    '$=': 'endswith',\n    '^=': 'startswith'\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * * It will be used for date/number type filter query.\n */\nDataUtil.odBiOperator = {\n    '<': ' lt ',\n    '>': ' gt ',\n    '<=': ' le ',\n    '>=': ' ge ',\n    '==': ' eq ',\n    '!=': ' ne ',\n    'lessthan': ' lt ',\n    'lessthanorequal': ' le ',\n    'greaterthan': ' gt ',\n    'greaterthanorequal': ' ge ',\n    'equal': ' eq ',\n    'notequal': ' ne '\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odUniOperator = {\n    '$=': 'endswith',\n    '^=': 'startswith',\n    '*=': 'substringof',\n    'endswith': 'endswith',\n    'startswith': 'startswith',\n    'contains': 'substringof'\n};\n/**\n * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odv4UniOperator = {\n    '$=': 'endswith',\n    '^=': 'startswith',\n    '*=': 'contains',\n    'endswith': 'endswith',\n    'startswith': 'startswith',\n    'contains': 'contains'\n};\nDataUtil.diacritics = {\n    '\\u24B6': 'A',\n    '\\uFF21': 'A',\n    '\\u00C0': 'A',\n    '\\u00C1': 'A',\n    '\\u00C2': 'A',\n    '\\u1EA6': 'A',\n    '\\u1EA4': 'A',\n    '\\u1EAA': 'A',\n    '\\u1EA8': 'A',\n    '\\u00C3': 'A',\n    '\\u0100': 'A',\n    '\\u0102': 'A',\n    '\\u1EB0': 'A',\n    '\\u1EAE': 'A',\n    '\\u1EB4': 'A',\n    '\\u1EB2': 'A',\n    '\\u0226': 'A',\n    '\\u01E0': 'A',\n    '\\u00C4': 'A',\n    '\\u01DE': 'A',\n    '\\u1EA2': 'A',\n    '\\u00C5': 'A',\n    '\\u01FA': 'A',\n    '\\u01CD': 'A',\n    '\\u0200': 'A',\n    '\\u0202': 'A',\n    '\\u1EA0': 'A',\n    '\\u1EAC': 'A',\n    '\\u1EB6': 'A',\n    '\\u1E00': 'A',\n    '\\u0104': 'A',\n    '\\u023A': 'A',\n    '\\u2C6F': 'A',\n    '\\uA732': 'AA',\n    '\\u00C6': 'AE',\n    '\\u01FC': 'AE',\n    '\\u01E2': 'AE',\n    '\\uA734': 'AO',\n    '\\uA736': 'AU',\n    '\\uA738': 'AV',\n    '\\uA73A': 'AV',\n    '\\uA73C': 'AY',\n    '\\u24B7': 'B',\n    '\\uFF22': 'B',\n    '\\u1E02': 'B',\n    '\\u1E04': 'B',\n    '\\u1E06': 'B',\n    '\\u0243': 'B',\n    '\\u0182': 'B',\n    '\\u0181': 'B',\n    '\\u24B8': 'C',\n    '\\uFF23': 'C',\n    '\\u0106': 'C',\n    '\\u0108': 'C',\n    '\\u010A': 'C',\n    '\\u010C': 'C',\n    '\\u00C7': 'C',\n    '\\u1E08': 'C',\n    '\\u0187': 'C',\n    '\\u023B': 'C',\n    '\\uA73E': 'C',\n    '\\u24B9': 'D',\n    '\\uFF24': 'D',\n    '\\u1E0A': 'D',\n    '\\u010E': 'D',\n    '\\u1E0C': 'D',\n    '\\u1E10': 'D',\n    '\\u1E12': 'D',\n    '\\u1E0E': 'D',\n    '\\u0110': 'D',\n    '\\u018B': 'D',\n    '\\u018A': 'D',\n    '\\u0189': 'D',\n    '\\uA779': 'D',\n    '\\u01F1': 'DZ',\n    '\\u01C4': 'DZ',\n    '\\u01F2': 'Dz',\n    '\\u01C5': 'Dz',\n    '\\u24BA': 'E',\n    '\\uFF25': 'E',\n    '\\u00C8': 'E',\n    '\\u00C9': 'E',\n    '\\u00CA': 'E',\n    '\\u1EC0': 'E',\n    '\\u1EBE': 'E',\n    '\\u1EC4': 'E',\n    '\\u1EC2': 'E',\n    '\\u1EBC': 'E',\n    '\\u0112': 'E',\n    '\\u1E14': 'E',\n    '\\u1E16': 'E',\n    '\\u0114': 'E',\n    '\\u0116': 'E',\n    '\\u00CB': 'E',\n    '\\u1EBA': 'E',\n    '\\u011A': 'E',\n    '\\u0204': 'E',\n    '\\u0206': 'E',\n    '\\u1EB8': 'E',\n    '\\u1EC6': 'E',\n    '\\u0228': 'E',\n    '\\u1E1C': 'E',\n    '\\u0118': 'E',\n    '\\u1E18': 'E',\n    '\\u1E1A': 'E',\n    '\\u0190': 'E',\n    '\\u018E': 'E',\n    '\\u24BB': 'F',\n    '\\uFF26': 'F',\n    '\\u1E1E': 'F',\n    '\\u0191': 'F',\n    '\\uA77B': 'F',\n    '\\u24BC': 'G',\n    '\\uFF27': 'G',\n    '\\u01F4': 'G',\n    '\\u011C': 'G',\n    '\\u1E20': 'G',\n    '\\u011E': 'G',\n    '\\u0120': 'G',\n    '\\u01E6': 'G',\n    '\\u0122': 'G',\n    '\\u01E4': 'G',\n    '\\u0193': 'G',\n    '\\uA7A0': 'G',\n    '\\uA77D': 'G',\n    '\\uA77E': 'G',\n    '\\u24BD': 'H',\n    '\\uFF28': 'H',\n    '\\u0124': 'H',\n    '\\u1E22': 'H',\n    '\\u1E26': 'H',\n    '\\u021E': 'H',\n    '\\u1E24': 'H',\n    '\\u1E28': 'H',\n    '\\u1E2A': 'H',\n    '\\u0126': 'H',\n    '\\u2C67': 'H',\n    '\\u2C75': 'H',\n    '\\uA78D': 'H',\n    '\\u24BE': 'I',\n    '\\uFF29': 'I',\n    '\\u00CC': 'I',\n    '\\u00CD': 'I',\n    '\\u00CE': 'I',\n    '\\u0128': 'I',\n    '\\u012A': 'I',\n    '\\u012C': 'I',\n    '\\u0130': 'I',\n    '\\u00CF': 'I',\n    '\\u1E2E': 'I',\n    '\\u1EC8': 'I',\n    '\\u01CF': 'I',\n    '\\u0208': 'I',\n    '\\u020A': 'I',\n    '\\u1ECA': 'I',\n    '\\u012E': 'I',\n    '\\u1E2C': 'I',\n    '\\u0197': 'I',\n    '\\u24BF': 'J',\n    '\\uFF2A': 'J',\n    '\\u0134': 'J',\n    '\\u0248': 'J',\n    '\\u24C0': 'K',\n    '\\uFF2B': 'K',\n    '\\u1E30': 'K',\n    '\\u01E8': 'K',\n    '\\u1E32': 'K',\n    '\\u0136': 'K',\n    '\\u1E34': 'K',\n    '\\u0198': 'K',\n    '\\u2C69': 'K',\n    '\\uA740': 'K',\n    '\\uA742': 'K',\n    '\\uA744': 'K',\n    '\\uA7A2': 'K',\n    '\\u24C1': 'L',\n    '\\uFF2C': 'L',\n    '\\u013F': 'L',\n    '\\u0139': 'L',\n    '\\u013D': 'L',\n    '\\u1E36': 'L',\n    '\\u1E38': 'L',\n    '\\u013B': 'L',\n    '\\u1E3C': 'L',\n    '\\u1E3A': 'L',\n    '\\u0141': 'L',\n    '\\u023D': 'L',\n    '\\u2C62': 'L',\n    '\\u2C60': 'L',\n    '\\uA748': 'L',\n    '\\uA746': 'L',\n    '\\uA780': 'L',\n    '\\u01C7': 'LJ',\n    '\\u01C8': 'Lj',\n    '\\u24C2': 'M',\n    '\\uFF2D': 'M',\n    '\\u1E3E': 'M',\n    '\\u1E40': 'M',\n    '\\u1E42': 'M',\n    '\\u2C6E': 'M',\n    '\\u019C': 'M',\n    '\\u24C3': 'N',\n    '\\uFF2E': 'N',\n    '\\u01F8': 'N',\n    '\\u0143': 'N',\n    '\\u00D1': 'N',\n    '\\u1E44': 'N',\n    '\\u0147': 'N',\n    '\\u1E46': 'N',\n    '\\u0145': 'N',\n    '\\u1E4A': 'N',\n    '\\u1E48': 'N',\n    '\\u0220': 'N',\n    '\\u019D': 'N',\n    '\\uA790': 'N',\n    '\\uA7A4': 'N',\n    '\\u01CA': 'NJ',\n    '\\u01CB': 'Nj',\n    '\\u24C4': 'O',\n    '\\uFF2F': 'O',\n    '\\u00D2': 'O',\n    '\\u00D3': 'O',\n    '\\u00D4': 'O',\n    '\\u1ED2': 'O',\n    '\\u1ED0': 'O',\n    '\\u1ED6': 'O',\n    '\\u1ED4': 'O',\n    '\\u00D5': 'O',\n    '\\u1E4C': 'O',\n    '\\u022C': 'O',\n    '\\u1E4E': 'O',\n    '\\u014C': 'O',\n    '\\u1E50': 'O',\n    '\\u1E52': 'O',\n    '\\u014E': 'O',\n    '\\u022E': 'O',\n    '\\u0230': 'O',\n    '\\u00D6': 'O',\n    '\\u022A': 'O',\n    '\\u1ECE': 'O',\n    '\\u0150': 'O',\n    '\\u01D1': 'O',\n    '\\u020C': 'O',\n    '\\u020E': 'O',\n    '\\u01A0': 'O',\n    '\\u1EDC': 'O',\n    '\\u1EDA': 'O',\n    '\\u1EE0': 'O',\n    '\\u1EDE': 'O',\n    '\\u1EE2': 'O',\n    '\\u1ECC': 'O',\n    '\\u1ED8': 'O',\n    '\\u01EA': 'O',\n    '\\u01EC': 'O',\n    '\\u00D8': 'O',\n    '\\u01FE': 'O',\n    '\\u0186': 'O',\n    '\\u019F': 'O',\n    '\\uA74A': 'O',\n    '\\uA74C': 'O',\n    '\\u01A2': 'OI',\n    '\\uA74E': 'OO',\n    '\\u0222': 'OU',\n    '\\u24C5': 'P',\n    '\\uFF30': 'P',\n    '\\u1E54': 'P',\n    '\\u1E56': 'P',\n    '\\u01A4': 'P',\n    '\\u2C63': 'P',\n    '\\uA750': 'P',\n    '\\uA752': 'P',\n    '\\uA754': 'P',\n    '\\u24C6': 'Q',\n    '\\uFF31': 'Q',\n    '\\uA756': 'Q',\n    '\\uA758': 'Q',\n    '\\u024A': 'Q',\n    '\\u24C7': 'R',\n    '\\uFF32': 'R',\n    '\\u0154': 'R',\n    '\\u1E58': 'R',\n    '\\u0158': 'R',\n    '\\u0210': 'R',\n    '\\u0212': 'R',\n    '\\u1E5A': 'R',\n    '\\u1E5C': 'R',\n    '\\u0156': 'R',\n    '\\u1E5E': 'R',\n    '\\u024C': 'R',\n    '\\u2C64': 'R',\n    '\\uA75A': 'R',\n    '\\uA7A6': 'R',\n    '\\uA782': 'R',\n    '\\u24C8': 'S',\n    '\\uFF33': 'S',\n    '\\u1E9E': 'S',\n    '\\u015A': 'S',\n    '\\u1E64': 'S',\n    '\\u015C': 'S',\n    '\\u1E60': 'S',\n    '\\u0160': 'S',\n    '\\u1E66': 'S',\n    '\\u1E62': 'S',\n    '\\u1E68': 'S',\n    '\\u0218': 'S',\n    '\\u015E': 'S',\n    '\\u2C7E': 'S',\n    '\\uA7A8': 'S',\n    '\\uA784': 'S',\n    '\\u24C9': 'T',\n    '\\uFF34': 'T',\n    '\\u1E6A': 'T',\n    '\\u0164': 'T',\n    '\\u1E6C': 'T',\n    '\\u021A': 'T',\n    '\\u0162': 'T',\n    '\\u1E70': 'T',\n    '\\u1E6E': 'T',\n    '\\u0166': 'T',\n    '\\u01AC': 'T',\n    '\\u01AE': 'T',\n    '\\u023E': 'T',\n    '\\uA786': 'T',\n    '\\uA728': 'TZ',\n    '\\u24CA': 'U',\n    '\\uFF35': 'U',\n    '\\u00D9': 'U',\n    '\\u00DA': 'U',\n    '\\u00DB': 'U',\n    '\\u0168': 'U',\n    '\\u1E78': 'U',\n    '\\u016A': 'U',\n    '\\u1E7A': 'U',\n    '\\u016C': 'U',\n    '\\u00DC': 'U',\n    '\\u01DB': 'U',\n    '\\u01D7': 'U',\n    '\\u01D5': 'U',\n    '\\u01D9': 'U',\n    '\\u1EE6': 'U',\n    '\\u016E': 'U',\n    '\\u0170': 'U',\n    '\\u01D3': 'U',\n    '\\u0214': 'U',\n    '\\u0216': 'U',\n    '\\u01AF': 'U',\n    '\\u1EEA': 'U',\n    '\\u1EE8': 'U',\n    '\\u1EEE': 'U',\n    '\\u1EEC': 'U',\n    '\\u1EF0': 'U',\n    '\\u1EE4': 'U',\n    '\\u1E72': 'U',\n    '\\u0172': 'U',\n    '\\u1E76': 'U',\n    '\\u1E74': 'U',\n    '\\u0244': 'U',\n    '\\u24CB': 'V',\n    '\\uFF36': 'V',\n    '\\u1E7C': 'V',\n    '\\u1E7E': 'V',\n    '\\u01B2': 'V',\n    '\\uA75E': 'V',\n    '\\u0245': 'V',\n    '\\uA760': 'VY',\n    '\\u24CC': 'W',\n    '\\uFF37': 'W',\n    '\\u1E80': 'W',\n    '\\u1E82': 'W',\n    '\\u0174': 'W',\n    '\\u1E86': 'W',\n    '\\u1E84': 'W',\n    '\\u1E88': 'W',\n    '\\u2C72': 'W',\n    '\\u24CD': 'X',\n    '\\uFF38': 'X',\n    '\\u1E8A': 'X',\n    '\\u1E8C': 'X',\n    '\\u24CE': 'Y',\n    '\\uFF39': 'Y',\n    '\\u1EF2': 'Y',\n    '\\u00DD': 'Y',\n    '\\u0176': 'Y',\n    '\\u1EF8': 'Y',\n    '\\u0232': 'Y',\n    '\\u1E8E': 'Y',\n    '\\u0178': 'Y',\n    '\\u1EF6': 'Y',\n    '\\u1EF4': 'Y',\n    '\\u01B3': 'Y',\n    '\\u024E': 'Y',\n    '\\u1EFE': 'Y',\n    '\\u24CF': 'Z',\n    '\\uFF3A': 'Z',\n    '\\u0179': 'Z',\n    '\\u1E90': 'Z',\n    '\\u017B': 'Z',\n    '\\u017D': 'Z',\n    '\\u1E92': 'Z',\n    '\\u1E94': 'Z',\n    '\\u01B5': 'Z',\n    '\\u0224': 'Z',\n    '\\u2C7F': 'Z',\n    '\\u2C6B': 'Z',\n    '\\uA762': 'Z',\n    '\\u24D0': 'a',\n    '\\uFF41': 'a',\n    '\\u1E9A': 'a',\n    '\\u00E0': 'a',\n    '\\u00E1': 'a',\n    '\\u00E2': 'a',\n    '\\u1EA7': 'a',\n    '\\u1EA5': 'a',\n    '\\u1EAB': 'a',\n    '\\u1EA9': 'a',\n    '\\u00E3': 'a',\n    '\\u0101': 'a',\n    '\\u0103': 'a',\n    '\\u1EB1': 'a',\n    '\\u1EAF': 'a',\n    '\\u1EB5': 'a',\n    '\\u1EB3': 'a',\n    '\\u0227': 'a',\n    '\\u01E1': 'a',\n    '\\u00E4': 'a',\n    '\\u01DF': 'a',\n    '\\u1EA3': 'a',\n    '\\u00E5': 'a',\n    '\\u01FB': 'a',\n    '\\u01CE': 'a',\n    '\\u0201': 'a',\n    '\\u0203': 'a',\n    '\\u1EA1': 'a',\n    '\\u1EAD': 'a',\n    '\\u1EB7': 'a',\n    '\\u1E01': 'a',\n    '\\u0105': 'a',\n    '\\u2C65': 'a',\n    '\\u0250': 'a',\n    '\\uA733': 'aa',\n    '\\u00E6': 'ae',\n    '\\u01FD': 'ae',\n    '\\u01E3': 'ae',\n    '\\uA735': 'ao',\n    '\\uA737': 'au',\n    '\\uA739': 'av',\n    '\\uA73B': 'av',\n    '\\uA73D': 'ay',\n    '\\u24D1': 'b',\n    '\\uFF42': 'b',\n    '\\u1E03': 'b',\n    '\\u1E05': 'b',\n    '\\u1E07': 'b',\n    '\\u0180': 'b',\n    '\\u0183': 'b',\n    '\\u0253': 'b',\n    '\\u24D2': 'c',\n    '\\uFF43': 'c',\n    '\\u0107': 'c',\n    '\\u0109': 'c',\n    '\\u010B': 'c',\n    '\\u010D': 'c',\n    '\\u00E7': 'c',\n    '\\u1E09': 'c',\n    '\\u0188': 'c',\n    '\\u023C': 'c',\n    '\\uA73F': 'c',\n    '\\u2184': 'c',\n    '\\u24D3': 'd',\n    '\\uFF44': 'd',\n    '\\u1E0B': 'd',\n    '\\u010F': 'd',\n    '\\u1E0D': 'd',\n    '\\u1E11': 'd',\n    '\\u1E13': 'd',\n    '\\u1E0F': 'd',\n    '\\u0111': 'd',\n    '\\u018C': 'd',\n    '\\u0256': 'd',\n    '\\u0257': 'd',\n    '\\uA77A': 'd',\n    '\\u01F3': 'dz',\n    '\\u01C6': 'dz',\n    '\\u24D4': 'e',\n    '\\uFF45': 'e',\n    '\\u00E8': 'e',\n    '\\u00E9': 'e',\n    '\\u00EA': 'e',\n    '\\u1EC1': 'e',\n    '\\u1EBF': 'e',\n    '\\u1EC5': 'e',\n    '\\u1EC3': 'e',\n    '\\u1EBD': 'e',\n    '\\u0113': 'e',\n    '\\u1E15': 'e',\n    '\\u1E17': 'e',\n    '\\u0115': 'e',\n    '\\u0117': 'e',\n    '\\u00EB': 'e',\n    '\\u1EBB': 'e',\n    '\\u011B': 'e',\n    '\\u0205': 'e',\n    '\\u0207': 'e',\n    '\\u1EB9': 'e',\n    '\\u1EC7': 'e',\n    '\\u0229': 'e',\n    '\\u1E1D': 'e',\n    '\\u0119': 'e',\n    '\\u1E19': 'e',\n    '\\u1E1B': 'e',\n    '\\u0247': 'e',\n    '\\u025B': 'e',\n    '\\u01DD': 'e',\n    '\\u24D5': 'f',\n    '\\uFF46': 'f',\n    '\\u1E1F': 'f',\n    '\\u0192': 'f',\n    '\\uA77C': 'f',\n    '\\u24D6': 'g',\n    '\\uFF47': 'g',\n    '\\u01F5': 'g',\n    '\\u011D': 'g',\n    '\\u1E21': 'g',\n    '\\u011F': 'g',\n    '\\u0121': 'g',\n    '\\u01E7': 'g',\n    '\\u0123': 'g',\n    '\\u01E5': 'g',\n    '\\u0260': 'g',\n    '\\uA7A1': 'g',\n    '\\u1D79': 'g',\n    '\\uA77F': 'g',\n    '\\u24D7': 'h',\n    '\\uFF48': 'h',\n    '\\u0125': 'h',\n    '\\u1E23': 'h',\n    '\\u1E27': 'h',\n    '\\u021F': 'h',\n    '\\u1E25': 'h',\n    '\\u1E29': 'h',\n    '\\u1E2B': 'h',\n    '\\u1E96': 'h',\n    '\\u0127': 'h',\n    '\\u2C68': 'h',\n    '\\u2C76': 'h',\n    '\\u0265': 'h',\n    '\\u0195': 'hv',\n    '\\u24D8': 'i',\n    '\\uFF49': 'i',\n    '\\u00EC': 'i',\n    '\\u00ED': 'i',\n    '\\u00EE': 'i',\n    '\\u0129': 'i',\n    '\\u012B': 'i',\n    '\\u012D': 'i',\n    '\\u00EF': 'i',\n    '\\u1E2F': 'i',\n    '\\u1EC9': 'i',\n    '\\u01D0': 'i',\n    '\\u0209': 'i',\n    '\\u020B': 'i',\n    '\\u1ECB': 'i',\n    '\\u012F': 'i',\n    '\\u1E2D': 'i',\n    '\\u0268': 'i',\n    '\\u0131': 'i',\n    '\\u24D9': 'j',\n    '\\uFF4A': 'j',\n    '\\u0135': 'j',\n    '\\u01F0': 'j',\n    '\\u0249': 'j',\n    '\\u24DA': 'k',\n    '\\uFF4B': 'k',\n    '\\u1E31': 'k',\n    '\\u01E9': 'k',\n    '\\u1E33': 'k',\n    '\\u0137': 'k',\n    '\\u1E35': 'k',\n    '\\u0199': 'k',\n    '\\u2C6A': 'k',\n    '\\uA741': 'k',\n    '\\uA743': 'k',\n    '\\uA745': 'k',\n    '\\uA7A3': 'k',\n    '\\u24DB': 'l',\n    '\\uFF4C': 'l',\n    '\\u0140': 'l',\n    '\\u013A': 'l',\n    '\\u013E': 'l',\n    '\\u1E37': 'l',\n    '\\u1E39': 'l',\n    '\\u013C': 'l',\n    '\\u1E3D': 'l',\n    '\\u1E3B': 'l',\n    '\\u017F': 'l',\n    '\\u0142': 'l',\n    '\\u019A': 'l',\n    '\\u026B': 'l',\n    '\\u2C61': 'l',\n    '\\uA749': 'l',\n    '\\uA781': 'l',\n    '\\uA747': 'l',\n    '\\u01C9': 'lj',\n    '\\u24DC': 'm',\n    '\\uFF4D': 'm',\n    '\\u1E3F': 'm',\n    '\\u1E41': 'm',\n    '\\u1E43': 'm',\n    '\\u0271': 'm',\n    '\\u026F': 'm',\n    '\\u24DD': 'n',\n    '\\uFF4E': 'n',\n    '\\u01F9': 'n',\n    '\\u0144': 'n',\n    '\\u00F1': 'n',\n    '\\u1E45': 'n',\n    '\\u0148': 'n',\n    '\\u1E47': 'n',\n    '\\u0146': 'n',\n    '\\u1E4B': 'n',\n    '\\u1E49': 'n',\n    '\\u019E': 'n',\n    '\\u0272': 'n',\n    '\\u0149': 'n',\n    '\\uA791': 'n',\n    '\\uA7A5': 'n',\n    '\\u01CC': 'nj',\n    '\\u24DE': 'o',\n    '\\uFF4F': 'o',\n    '\\u00F2': 'o',\n    '\\u00F3': 'o',\n    '\\u00F4': 'o',\n    '\\u1ED3': 'o',\n    '\\u1ED1': 'o',\n    '\\u1ED7': 'o',\n    '\\u1ED5': 'o',\n    '\\u00F5': 'o',\n    '\\u1E4D': 'o',\n    '\\u022D': 'o',\n    '\\u1E4F': 'o',\n    '\\u014D': 'o',\n    '\\u1E51': 'o',\n    '\\u1E53': 'o',\n    '\\u014F': 'o',\n    '\\u022F': 'o',\n    '\\u0231': 'o',\n    '\\u00F6': 'o',\n    '\\u022B': 'o',\n    '\\u1ECF': 'o',\n    '\\u0151': 'o',\n    '\\u01D2': 'o',\n    '\\u020D': 'o',\n    '\\u020F': 'o',\n    '\\u01A1': 'o',\n    '\\u1EDD': 'o',\n    '\\u1EDB': 'o',\n    '\\u1EE1': 'o',\n    '\\u1EDF': 'o',\n    '\\u1EE3': 'o',\n    '\\u1ECD': 'o',\n    '\\u1ED9': 'o',\n    '\\u01EB': 'o',\n    '\\u01ED': 'o',\n    '\\u00F8': 'o',\n    '\\u01FF': 'o',\n    '\\u0254': 'o',\n    '\\uA74B': 'o',\n    '\\uA74D': 'o',\n    '\\u0275': 'o',\n    '\\u01A3': 'oi',\n    '\\u0223': 'ou',\n    '\\uA74F': 'oo',\n    '\\u24DF': 'p',\n    '\\uFF50': 'p',\n    '\\u1E55': 'p',\n    '\\u1E57': 'p',\n    '\\u01A5': 'p',\n    '\\u1D7D': 'p',\n    '\\uA751': 'p',\n    '\\uA753': 'p',\n    '\\uA755': 'p',\n    '\\u24E0': 'q',\n    '\\uFF51': 'q',\n    '\\u024B': 'q',\n    '\\uA757': 'q',\n    '\\uA759': 'q',\n    '\\u24E1': 'r',\n    '\\uFF52': 'r',\n    '\\u0155': 'r',\n    '\\u1E59': 'r',\n    '\\u0159': 'r',\n    '\\u0211': 'r',\n    '\\u0213': 'r',\n    '\\u1E5B': 'r',\n    '\\u1E5D': 'r',\n    '\\u0157': 'r',\n    '\\u1E5F': 'r',\n    '\\u024D': 'r',\n    '\\u027D': 'r',\n    '\\uA75B': 'r',\n    '\\uA7A7': 'r',\n    '\\uA783': 'r',\n    '\\u24E2': 's',\n    '\\uFF53': 's',\n    '\\u00DF': 's',\n    '\\u015B': 's',\n    '\\u1E65': 's',\n    '\\u015D': 's',\n    '\\u1E61': 's',\n    '\\u0161': 's',\n    '\\u1E67': 's',\n    '\\u1E63': 's',\n    '\\u1E69': 's',\n    '\\u0219': 's',\n    '\\u015F': 's',\n    '\\u023F': 's',\n    '\\uA7A9': 's',\n    '\\uA785': 's',\n    '\\u1E9B': 's',\n    '\\u24E3': 't',\n    '\\uFF54': 't',\n    '\\u1E6B': 't',\n    '\\u1E97': 't',\n    '\\u0165': 't',\n    '\\u1E6D': 't',\n    '\\u021B': 't',\n    '\\u0163': 't',\n    '\\u1E71': 't',\n    '\\u1E6F': 't',\n    '\\u0167': 't',\n    '\\u01AD': 't',\n    '\\u0288': 't',\n    '\\u2C66': 't',\n    '\\uA787': 't',\n    '\\uA729': 'tz',\n    '\\u24E4': 'u',\n    '\\uFF55': 'u',\n    '\\u00F9': 'u',\n    '\\u00FA': 'u',\n    '\\u00FB': 'u',\n    '\\u0169': 'u',\n    '\\u1E79': 'u',\n    '\\u016B': 'u',\n    '\\u1E7B': 'u',\n    '\\u016D': 'u',\n    '\\u00FC': 'u',\n    '\\u01DC': 'u',\n    '\\u01D8': 'u',\n    '\\u01D6': 'u',\n    '\\u01DA': 'u',\n    '\\u1EE7': 'u',\n    '\\u016F': 'u',\n    '\\u0171': 'u',\n    '\\u01D4': 'u',\n    '\\u0215': 'u',\n    '\\u0217': 'u',\n    '\\u01B0': 'u',\n    '\\u1EEB': 'u',\n    '\\u1EE9': 'u',\n    '\\u1EEF': 'u',\n    '\\u1EED': 'u',\n    '\\u1EF1': 'u',\n    '\\u1EE5': 'u',\n    '\\u1E73': 'u',\n    '\\u0173': 'u',\n    '\\u1E77': 'u',\n    '\\u1E75': 'u',\n    '\\u0289': 'u',\n    '\\u24E5': 'v',\n    '\\uFF56': 'v',\n    '\\u1E7D': 'v',\n    '\\u1E7F': 'v',\n    '\\u028B': 'v',\n    '\\uA75F': 'v',\n    '\\u028C': 'v',\n    '\\uA761': 'vy',\n    '\\u24E6': 'w',\n    '\\uFF57': 'w',\n    '\\u1E81': 'w',\n    '\\u1E83': 'w',\n    '\\u0175': 'w',\n    '\\u1E87': 'w',\n    '\\u1E85': 'w',\n    '\\u1E98': 'w',\n    '\\u1E89': 'w',\n    '\\u2C73': 'w',\n    '\\u24E7': 'x',\n    '\\uFF58': 'x',\n    '\\u1E8B': 'x',\n    '\\u1E8D': 'x',\n    '\\u24E8': 'y',\n    '\\uFF59': 'y',\n    '\\u1EF3': 'y',\n    '\\u00FD': 'y',\n    '\\u0177': 'y',\n    '\\u1EF9': 'y',\n    '\\u0233': 'y',\n    '\\u1E8F': 'y',\n    '\\u00FF': 'y',\n    '\\u1EF7': 'y',\n    '\\u1E99': 'y',\n    '\\u1EF5': 'y',\n    '\\u01B4': 'y',\n    '\\u024F': 'y',\n    '\\u1EFF': 'y',\n    '\\u24E9': 'z',\n    '\\uFF5A': 'z',\n    '\\u017A': 'z',\n    '\\u1E91': 'z',\n    '\\u017C': 'z',\n    '\\u017E': 'z',\n    '\\u1E93': 'z',\n    '\\u1E95': 'z',\n    '\\u01B6': 'z',\n    '\\u0225': 'z',\n    '\\u0240': 'z',\n    '\\u2C6C': 'z',\n    '\\uA763': 'z',\n    '\\u0386': '\\u0391',\n    '\\u0388': '\\u0395',\n    '\\u0389': '\\u0397',\n    '\\u038A': '\\u0399',\n    '\\u03AA': '\\u0399',\n    '\\u038C': '\\u039F',\n    '\\u038E': '\\u03A5',\n    '\\u03AB': '\\u03A5',\n    '\\u038F': '\\u03A9',\n    '\\u03AC': '\\u03B1',\n    '\\u03AD': '\\u03B5',\n    '\\u03AE': '\\u03B7',\n    '\\u03AF': '\\u03B9',\n    '\\u03CA': '\\u03B9',\n    '\\u0390': '\\u03B9',\n    '\\u03CC': '\\u03BF',\n    '\\u03CD': '\\u03C5',\n    '\\u03CB': '\\u03C5',\n    '\\u03B0': '\\u03C5',\n    '\\u03C9': '\\u03C9',\n    '\\u03C2': '\\u03C3'\n};\nDataUtil.fnOperators = {\n    /**\n     * Returns true when the actual input is equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     * @param  {boolean} ignoreAccent?\n     */\n    equal: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected);\n        }\n        return actual === expected;\n    },\n    /**\n     * Returns true when the actual input is not equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    notequal: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        return !DataUtil.fnOperators.equal(actual, expected, ignoreCase);\n    },\n    /**\n     * Returns true when the actual input is less than to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    lessthan: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected);\n        }\n        if (isNullOrUndefined(actual)) {\n            actual = undefined;\n        }\n        return actual < expected;\n    },\n    /**\n     * Returns true when the actual input is greater than to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    greaterthan: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected);\n        }\n        return actual > expected;\n    },\n    /**\n     * Returns true when the actual input is less than or equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    lessthanorequal: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected);\n        }\n        if (isNullOrUndefined(actual)) {\n            actual = undefined;\n        }\n        return actual <= expected;\n    },\n    /**\n     * Returns true when the actual input is greater than or equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    greaterthanorequal: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected);\n        }\n        return actual >= expected;\n    },\n    /**\n     * Returns true when the actual input contains the given string.\n     * @param  {string|number} actual\n     * @param  {string|number} expected\n     * @param  {boolean} ignoreCase?\n     */\n    contains: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n                DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) !== -1;\n        }\n        return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n            actual.toString().indexOf(expected) !== -1;\n    },\n    /**\n     * Returns true when the given input value is not null.\n     * @param  {string|number} actual\n     * @returns boolean\n     */\n    notnull: (actual) => {\n        return actual !== null;\n    },\n    /**\n     * Returns true when the given input value is null.\n     * @param  {string|number} actual\n     * @returns boolean\n     */\n    isnull: (actual) => {\n        return actual === null;\n    },\n    /**\n     * Returns true when the actual input starts with the given string\n     * @param  {string} actual\n     * @param  {string} expected\n     * @param  {boolean} ignoreCase?\n     */\n    startswith: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return actual && expected && DataUtil.startsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n        }\n        return actual && expected && DataUtil.startsWith(actual, expected);\n    },\n    /**\n     * Returns true when the actual input ends with the given string.\n     * @param  {string} actual\n     * @param  {string} expected\n     * @param  {boolean} ignoreCase?\n     */\n    endswith: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return actual && expected && DataUtil.endsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n        }\n        return actual && expected && DataUtil.endsWith(actual, expected);\n    },\n    /**\n     * It will return the filter operator based on the filter symbol.\n     * @param  {string} operator\n     * @hidden\n     */\n    processSymbols: (operator) => {\n        let fnName = DataUtil.operatorSymbols[operator];\n        if (fnName) {\n            let fn = DataUtil.fnOperators[fnName];\n            return fn;\n        }\n        return DataUtil.throwError('Query - Process Operator : Invalid operator');\n    },\n    /**\n     * It will return the valid filter operator based on the specified operators.\n     * @param  {string} operator\n     * @hidden\n     */\n    processOperator: (operator) => {\n        let fn = DataUtil.fnOperators[operator];\n        if (fn) {\n            return fn;\n        }\n        return DataUtil.fnOperators.processSymbols(operator);\n    }\n};\n/**\n * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.\n */\nDataUtil.parse = {\n    /**\n     * Parse the given string to the plain JavaScript object.\n     * @param  {string|Object|Object[]} jsonText\n     */\n    parseJson: (jsonText) => {\n        if (typeof jsonText === 'string') {\n            jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver);\n        }\n        else if (jsonText instanceof Array) {\n            DataUtil.parse.iterateAndReviveArray(jsonText);\n        }\n        else if (typeof jsonText === 'object' && jsonText !== null) {\n            DataUtil.parse.iterateAndReviveJson(jsonText);\n        }\n        return jsonText;\n    },\n    /**\n     * It will perform on array of values.\n     * @param  {string[]|Object[]} array\n     * @hidden\n     */\n    iterateAndReviveArray: (array) => {\n        for (let i = 0; i < array.length; i++) {\n            if (typeof array[i] === 'object' && array[i] !== null) {\n                DataUtil.parse.iterateAndReviveJson(array[i]);\n            }\n            else if (typeof array[i] === 'string' && !/^[\\s]*\\[|^[\\s]*\\{(.)+:|\\\"/g.test(array[i])) {\n                array[i] = DataUtil.parse.jsonReviver('', array[i]);\n            }\n            else {\n                array[i] = DataUtil.parse.parseJson(array[i]);\n            }\n        }\n    },\n    /**\n     * It will perform on JSON values\n     * @param  {JSON} json\n     * @hidden\n     */\n    iterateAndReviveJson: (json) => {\n        let value;\n        let keys = Object.keys(json);\n        for (let prop of keys) {\n            if (DataUtil.startsWith(prop, '__')) {\n                continue;\n            }\n            value = json[prop];\n            if (typeof value === 'object') {\n                if (value instanceof Array) {\n                    DataUtil.parse.iterateAndReviveArray(value);\n                }\n                else if (value) {\n                    DataUtil.parse.iterateAndReviveJson(value);\n                }\n            }\n            else {\n                json[prop] = DataUtil.parse.jsonReviver(json[prop], value);\n            }\n        }\n    },\n    /**\n     * It will perform on JSON values\n     * @param  {string} field\n     * @param  {string|Date} value\n     * @hidden\n     */\n    jsonReviver: (field, value) => {\n        if (typeof value === 'string') {\n            let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n            let offSet = DataUtil.timeZoneHandling ? DataUtil.serverTimezoneOffset : null;\n            if (ms) {\n                return DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);\n            }\n            else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n                let isUTC = value.indexOf('Z') > -1 || value.indexOf('z') > -1;\n                let arr = value.split(/[^0-9.]/);\n                if (isUTC) {\n                    value = DataUtil.dateParse\n                        .toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), DataUtil.serverTimezoneOffset, false);\n                }\n                else {\n                    let utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10));\n                    let hrs = parseInt(arr[6], 10);\n                    let mins = parseInt(arr[7], 10);\n                    if (isNaN(hrs) && isNaN(mins)) {\n                        return utcFormat;\n                    }\n                    if (value.indexOf('+') > -1) {\n                        utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);\n                    }\n                    else {\n                        utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);\n                    }\n                    value = DataUtil.dateParse\n                        .toTimeZone(utcFormat, DataUtil.serverTimezoneOffset, false);\n                }\n                if (DataUtil.serverTimezoneOffset == null) {\n                    value = DataUtil.dateParse.addSelfOffset(value);\n                }\n            }\n        }\n        return value;\n    },\n    /**\n     * Check wheather the given value is JSON or not.\n     * @param  {Object[]} jsonData\n     */\n    isJson: (jsonData) => {\n        if (typeof jsonData[0] === 'string') {\n            return jsonData;\n        }\n        return DataUtil.parse.parseJson(jsonData);\n    },\n    /**\n     * Checks wheather the given value is GUID or not.\n     * @param  {string} value\n     */\n    isGuid: (value) => {\n        let regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;\n        let match = regex.exec(value);\n        return match != null;\n    },\n    /**\n     * The method used to replace the value based on the type.\n     * @param  {Object} value\n     * @param  {boolean} stringify\n     * @hidden\n     */\n    replacer: (value, stringify) => {\n        if (DataUtil.isPlainObject(value)) {\n            return DataUtil.parse.jsonReplacer(value, stringify);\n        }\n        if (value instanceof Array) {\n            return DataUtil.parse.arrayReplacer(value);\n        }\n        if (value instanceof Date) {\n            return DataUtil.parse.jsonReplacer({ val: value }, stringify).val;\n        }\n        return value;\n    },\n    /**\n     * It will replace the JSON value.\n     * @param  {string} key\n     * @param  {Object} val\n     * @hidden\n     */\n    jsonReplacer: (val, stringify) => {\n        let value;\n        let keys = Object.keys(val);\n        for (let prop of keys) {\n            value = val[prop];\n            if (!(value instanceof Date)) {\n                continue;\n            }\n            let d = value;\n            if (DataUtil.serverTimezoneOffset == null) {\n                val[prop] = DataUtil.dateParse.toTimeZone(d, null).toJSON();\n            }\n            else {\n                d = new Date(+d + DataUtil.serverTimezoneOffset * 3600000);\n                val[prop] = DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(d), null).toJSON();\n            }\n        }\n        return val;\n    },\n    /**\n     * It will replace the Array of value.\n     * @param  {string} key\n     * @param  {Object[]} val\n     * @hidden\n     */\n    arrayReplacer: (val) => {\n        for (let i = 0; i < val.length; i++) {\n            if (DataUtil.isPlainObject(val[i])) {\n                val[i] = DataUtil.parse.jsonReplacer(val[i]);\n            }\n            else if (val[i] instanceof Date) {\n                val[i] = DataUtil.parse.jsonReplacer({ date: val[i] }).date;\n            }\n        }\n        return val;\n    },\n    /**\n     * It will replace the Date object with respective to UTC format value.\n     * @param  {string} key\n     * @param  {any} value\n     * @hidden\n     */\n    /* tslint:disable-next-line:no-any */\n    jsonDateReplacer: (key, value) => {\n        if (key === 'value' && value) {\n            if (typeof value === 'string') {\n                let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n                if (ms) {\n                    value = DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);\n                }\n                else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n                    let arr = value.split(/[^0-9]/);\n                    value = DataUtil.dateParse\n                        .toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);\n                }\n            }\n            if (value instanceof Date) {\n                value = DataUtil.dateParse.addSelfOffset(value);\n                if (DataUtil.serverTimezoneOffset === null) {\n                    return DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(value), null).toJSON();\n                }\n                else {\n                    value = DataUtil.dateParse.toTimeZone(value, (((value.getTimezoneOffset() / 60) * 2)\n                        - DataUtil.serverTimezoneOffset), false);\n                    return value.toJSON();\n                }\n            }\n        }\n        return value;\n    }\n};\n/**\n * @hidden\n */\nDataUtil.dateParse = {\n    addSelfOffset: (input) => {\n        return new Date(+input - (input.getTimezoneOffset() * 60000));\n    },\n    toUTC: (input) => {\n        return new Date(+input + (input.getTimezoneOffset() * 60000));\n    },\n    toTimeZone: (input, offset, utc) => {\n        if (offset === null) {\n            return input;\n        }\n        let unix = utc ? DataUtil.dateParse.toUTC(input) : input;\n        return new Date(+unix - (offset * 3600000));\n    },\n    toLocalTime: (input) => {\n        let datefn = input;\n        let timeZone = -datefn.getTimezoneOffset();\n        let differenceString = timeZone >= 0 ? '+' : '-';\n        let localtimefn = (num) => {\n            let norm = Math.floor(Math.abs(num));\n            return (norm < 10 ? '0' : '') + norm;\n        };\n        let val = datefn.getFullYear() + '-' + localtimefn(datefn.getMonth() + 1) + '-' + localtimefn(datefn.getDate()) +\n            'T' + localtimefn(datefn.getHours()) +\n            ':' + localtimefn(datefn.getMinutes()) +\n            ':' + localtimefn(datefn.getSeconds()) +\n            differenceString + localtimefn(timeZone / 60) +\n            ':' + localtimefn(timeZone % 60);\n        return val;\n    }\n};\n\nconst consts$1 = { GroupGuid: '{271bbba0-1ee7}' };\n/**\n * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.\n * This is the base adaptor class that other adaptors can extend.\n * @hidden\n */\nclass Adaptor {\n    /**\n     * Constructor for Adaptor class\n     * @param  {DataOptions} ds?\n     * @hidden\n     * @returns aggregates\n     */\n    constructor(ds) {\n        // common options for all the adaptors \n        this.options = {\n            from: 'table',\n            requestType: 'json',\n            sortBy: 'sorted',\n            select: 'select',\n            skip: 'skip',\n            group: 'group',\n            take: 'take',\n            search: 'search',\n            count: 'requiresCounts',\n            where: 'where',\n            aggregates: 'aggregates',\n            expand: 'expand'\n        };\n        /**\n         * Specifies the type of adaptor.\n         * @default Adaptor\n         */\n        this.type = Adaptor;\n        this.dataSource = ds;\n        this.pvt = {};\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {Object} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @returns Object\n     */\n    processResponse(data, ds, query, xhr) {\n        return data;\n    }\n}\n/**\n * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.\n * @hidden\n */\nclass JsonAdaptor extends Adaptor {\n    /**\n     * Process the JSON data based on the provided queries.\n     * @param  {DataManager} dataManager\n     * @param  {Query} query\n     * @returns Object\n     */\n    processQuery(dataManager, query) {\n        let result = dataManager.dataSource.json.slice(0);\n        let count = result.length;\n        let countFlg = true;\n        let ret;\n        let key;\n        let lazyLoad = {};\n        let keyCount = 0;\n        let group = [];\n        let page;\n        for (let i = 0; i < query.lazyLoad.length; i++) {\n            keyCount++;\n            lazyLoad[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n        }\n        let agg = {};\n        for (let i = 0; i < query.queries.length; i++) {\n            key = query.queries[i];\n            if ((key.fn === 'onPage' || key.fn === 'onGroup') && query.lazyLoad.length) {\n                if (key.fn === 'onGroup') {\n                    group.push(key.e);\n                }\n                if (key.fn === 'onPage') {\n                    page = key.e;\n                }\n                continue;\n            }\n            ret = this[key.fn].call(this, result, key.e, query);\n            if (key.fn === 'onAggregates') {\n                agg[key.e.field + ' - ' + key.e.type] = ret;\n            }\n            else {\n                result = ret !== undefined ? ret : result;\n            }\n            if (key.fn === 'onPage' || key.fn === 'onSkip' || key.fn === 'onTake' || key.fn === 'onRange') {\n                countFlg = false;\n            }\n            if (countFlg) {\n                count = result.length;\n            }\n        }\n        if (keyCount) {\n            let args = {\n                query: query, lazyLoad: lazyLoad, result: result, group: group, page: page\n            };\n            let lazyLoadData = this.lazyLoadGroup(args);\n            result = lazyLoadData.result;\n            count = lazyLoadData.count;\n        }\n        if (query.isCountRequired) {\n            result = {\n                result: result,\n                count: count,\n                aggregates: agg\n            };\n        }\n        return result;\n    }\n    /**\n     * Perform lazy load grouping in JSON array based on the given query and lazy load details.\n     * @param  {LazyLoadGroupArgs} args\n     */\n    lazyLoadGroup(args) {\n        let count = 0;\n        let agg = this.getAggregate(args.query);\n        let result = args.result;\n        if (!isNullOrUndefined(args.lazyLoad.onDemandGroupInfo)) {\n            let req = args.lazyLoad.onDemandGroupInfo;\n            for (let i = req.where.length - 1; i >= 0; i--) {\n                result = this.onWhere(result, req.where[i]);\n            }\n            if (args.group.length !== req.level) {\n                let field = args.group[req.level].fieldName;\n                result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n            }\n            count = result.length;\n            let data = result;\n            result = result.slice(req.skip);\n            result = result.slice(0, req.take);\n            if (args.group.length !== req.level) {\n                this.formGroupResult(result, data);\n            }\n        }\n        else {\n            let field = args.group[0].fieldName;\n            result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n            count = result.length;\n            let data = result;\n            if (args.page) {\n                result = this.onPage(result, args.page, args.query);\n            }\n            this.formGroupResult(result, data);\n        }\n        return { result: result, count: count };\n    }\n    formGroupResult(result, data) {\n        if (result.length && data.length) {\n            let uid = 'GroupGuid';\n            let childLevel = 'childLevels';\n            let level = 'level';\n            let records = 'records';\n            result[uid] = data[uid];\n            result[childLevel] = data[childLevel];\n            result[level] = data[level];\n            result[records] = data[records];\n        }\n        return result;\n    }\n    /**\n     * Separate the aggregate query from the given queries\n     * @param  {Query} query\n     */\n    getAggregate(query) {\n        let aggQuery = Query.filterQueries(query.queries, 'onAggregates');\n        let agg = [];\n        if (aggQuery.length) {\n            let tmp;\n            for (let i = 0; i < aggQuery.length; i++) {\n                tmp = aggQuery[i].e;\n                agg.push({ type: tmp.type, field: DataUtil.getValue(tmp.field, query) });\n            }\n        }\n        return agg;\n    }\n    /**\n     * Performs batch update in the JSON array which add, remove and update records.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        let i;\n        let deletedRecordsLen = changes.deletedRecords.length;\n        for (i = 0; i < changes.addedRecords.length; i++) {\n            this.insert(dm, changes.addedRecords[i]);\n        }\n        for (i = 0; i < changes.changedRecords.length; i++) {\n            this.update(dm, e.key, changes.changedRecords[i]);\n        }\n        for (i = 0; i < deletedRecordsLen; i++) {\n            this.remove(dm, e.key, changes.deletedRecords[i]);\n        }\n        return changes;\n    }\n    /**\n     * Performs filter operation with the given data and where query.\n     * @param  {Object[]} ds\n     * @param  {{validate:Function}} e\n     */\n    onWhere(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.filter((obj) => {\n            if (e) {\n                return e.validate(obj);\n            }\n        });\n    }\n    /**\n     * Returns aggregate function based on the aggregate type.\n     * @param  {Object[]} ds\n     * @param  {{field:string} e\n     * @param  {string}} type\n     */\n    onAggregates(ds, e) {\n        let fn = DataUtil.aggregates[e.type];\n        if (!ds || !fn || ds.length === 0) {\n            return null;\n        }\n        return fn(ds, e.field);\n    }\n    /**\n     * Performs search operation based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     */\n    onSearch(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        if (e.fieldNames.length === 0) {\n            DataUtil.getFieldList(ds[0], e.fieldNames);\n        }\n        return ds.filter((obj) => {\n            for (let j = 0; j < e.fieldNames.length; j++) {\n                if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {\n                    return true;\n                }\n            }\n            return false;\n        });\n    }\n    /**\n     * Sort the data with given direction and field.\n     * @param  {Object[]} ds\n     * @param  {{comparer:(a:Object} e\n     * @param  {Object} b\n     */\n    onSortBy(ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        let fnCompare;\n        let field = DataUtil.getValue(e.fieldName, query);\n        if (!field) {\n            return ds.sort(e.comparer);\n        }\n        if (field instanceof Array) {\n            field = field.slice(0);\n            for (let i = field.length - 1; i >= 0; i--) {\n                if (!field[i]) {\n                    continue;\n                }\n                fnCompare = e.comparer;\n                if (DataUtil.endsWith(field[i], ' desc')) {\n                    fnCompare = DataUtil.fnSort('descending');\n                    field[i] = field[i].replace(' desc', '');\n                }\n                ds = DataUtil.sort(ds, field[i], fnCompare);\n            }\n            return ds;\n        }\n        return DataUtil.sort(ds, field, e.comparer);\n    }\n    /**\n     * Group the data based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     * @param  {Query} query\n     */\n    onGroup(ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        let agg = this.getAggregate(query);\n        return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);\n    }\n    /**\n     * Retrieves records based on the given page index and size.\n     * @param  {Object[]} ds\n     * @param  {{pageSize:number} e\n     * @param  {number}} pageIndex\n     * @param  {Query} query\n     */\n    onPage(ds, e, query) {\n        let size = DataUtil.getValue(e.pageSize, query);\n        let start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;\n        let end = start + size;\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(start, end);\n    }\n    /**\n     * Retrieves records based on the given start and end index from query.\n     * @param  {Object[]} ds\n     * @param  {{start:number} e\n     * @param  {number}} end\n     */\n    onRange(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));\n    }\n    /**\n     * Picks the given count of records from the top of the datasource.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    onTake(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(0, DataUtil.getValue(e.nos));\n    }\n    /**\n     * Skips the given count of records from the data source.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    onSkip(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.nos));\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {Object[]} ds\n     * @param  {{fieldNames:string}} e\n     */\n    onSelect(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));\n    }\n    /**\n     * Inserts new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {number} position\n     */\n    insert(dm, data, tableName, query, position) {\n        if (isNullOrUndefined(position)) {\n            return dm.dataSource.json.push(data);\n        }\n        else {\n            return dm.dataSource.json.splice(position, 0, data);\n        }\n    }\n    /**\n     * Remove the data from the dataSource based on the key field value.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    remove(dm, keyField, value, tableName) {\n        let ds = dm.dataSource.json;\n        let i;\n        if (typeof value === 'object' && !(value instanceof Date)) {\n            value = DataUtil.getObject(keyField, value);\n        }\n        for (i = 0; i < ds.length; i++) {\n            if (DataUtil.getObject(keyField, ds[i]) === value) {\n                break;\n            }\n        }\n        return i !== ds.length ? ds.splice(i, 1) : null;\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    update(dm, keyField, value, tableName) {\n        let ds = dm.dataSource.json;\n        let i;\n        let key;\n        if (!isNullOrUndefined(keyField)) {\n            key = getValue(keyField, value);\n        }\n        for (i = 0; i < ds.length; i++) {\n            if (!isNullOrUndefined(keyField) && (getValue(keyField, ds[i])) === key) {\n                break;\n            }\n        }\n        return i < ds.length ? merge(ds[i], value) : null;\n    }\n}\n/**\n * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.\n * It interacts with server-side for all DataManager Queries and CRUD operations.\n * @hidden\n */\nclass UrlAdaptor extends Adaptor {\n    /**\n     * Process the query to generate request body.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns p\n     */\n    // tslint:disable-next-line:max-func-body-length\n    processQuery(dm, query, hierarchyFilters) {\n        let queries = this.getQueryRequest(query);\n        let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        let params = query.params;\n        let url = dm.dataSource.url;\n        let temp;\n        let skip;\n        let take = null;\n        let options = this.options;\n        let request = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        // calc Paging & Range\n        if ('onPage' in singles) {\n            temp = singles.onPage;\n            skip = DataUtil.getValue(temp.pageIndex, query);\n            take = DataUtil.getValue(temp.pageSize, query);\n            skip = (skip - 1) * take;\n        }\n        else if ('onRange' in singles) {\n            temp = singles.onRange;\n            skip = temp.start;\n            take = temp.end - temp.start;\n        }\n        // Sorting\n        for (let i = 0; i < queries.sorts.length; i++) {\n            temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);\n            request.sorts.push(DataUtil.callAdaptorFunction(this, 'onEachSort', { name: temp, direction: queries.sorts[i].e.direction }, query));\n        }\n        // hierarchy\n        if (hierarchyFilters) {\n            temp = this.getFiltersFrom(hierarchyFilters, query);\n            if (temp) {\n                request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', temp.toJson(), query));\n            }\n        }\n        // Filters\n        for (let i = 0; i < queries.filters.length; i++) {\n            let res = DataUtil.callAdaptorFunction(this, 'onEachWhere', queries.filters[i].e.toJson(), query);\n            if ((this.getModuleName &&\n                this.getModuleName() === 'ODataV4Adaptor') &&\n                !isNullOrUndefined(queries.filters[i].e.key) && queries.filters.length > 1) {\n                res = \"(\" + res + \")\";\n            }\n            request.filters.push(res);\n            let keys = typeof request.filters[i] === 'object' ? Object.keys(request.filters[i]) : [];\n            for (let prop of keys) {\n                if (DataUtil.isNull((request)[prop])) {\n                    delete request[prop];\n                }\n            }\n        }\n        // Searches\n        for (let i = 0; i < queries.searches.length; i++) {\n            temp = queries.searches[i].e;\n            request.searches.push(DataUtil.callAdaptorFunction(this, 'onEachSearch', {\n                fields: temp.fieldNames,\n                operator: temp.operator,\n                key: temp.searchKey,\n                ignoreCase: temp.ignoreCase\n            }, query));\n        }\n        // Grouping\n        for (let i = 0; i < queries.groups.length; i++) {\n            request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));\n        }\n        // aggregates\n        for (let i = 0; i < queries.aggregates.length; i++) {\n            temp = queries.aggregates[i].e;\n            request.aggregates.push({ type: temp.type, field: DataUtil.getValue(temp.field, query) });\n        }\n        let req = {};\n        this.getRequestQuery(options, query, singles, request, req);\n        // Params\n        DataUtil.callAdaptorFunction(this, 'addParams', { dm: dm, query: query, params: params, reqParams: req });\n        if (query.lazyLoad.length) {\n            for (let i = 0; i < query.lazyLoad.length; i++) {\n                req[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n            }\n        }\n        // cleanup\n        let keys = Object.keys(req);\n        for (let prop of keys) {\n            if (DataUtil.isNull(req[prop]) || req[prop] === '' || req[prop].length === 0) {\n                delete req[prop];\n            }\n        }\n        if (!(options.skip in req && options.take in req) && take !== null) {\n            req[options.skip] = DataUtil.callAdaptorFunction(this, 'onSkip', skip, query);\n            req[options.take] = DataUtil.callAdaptorFunction(this, 'onTake', take, query);\n        }\n        let p = this.pvt;\n        this.pvt = {};\n        if (this.options.requestType === 'json') {\n            return {\n                data: JSON.stringify(req, DataUtil.parse.jsonDateReplacer),\n                url: url,\n                pvtData: p,\n                type: 'POST',\n                contentType: 'application/json; charset=utf-8'\n            };\n        }\n        temp = this.convertToQueryString(req, query, dm);\n        temp = (dm.dataSource.url.indexOf('?') !== -1 ? '&' : '/') + temp;\n        return {\n            type: 'GET', url: temp.length ? url.replace(/\\/*$/, temp) : url, pvtData: p\n        };\n    }\n    getRequestQuery(options, query, singles, request, request1) {\n        let param = 'param';\n        let req = request1;\n        req[options.from] = query.fromTable;\n        if (options.apply && query.distincts.length) {\n            req[options.apply] = 'onDistinct' in this ? DataUtil.callAdaptorFunction(this, 'onDistinct', query.distincts) : '';\n        }\n        if (!query.distincts.length && options.expand) {\n            req[options.expand] = 'onExpand' in this && 'onSelect' in singles ?\n                DataUtil.callAdaptorFunction(this, 'onExpand', { selects: DataUtil.getValue(singles.onSelect.fieldNames, query), expands: query.expands }, query) : query.expands;\n        }\n        req[options.select] = 'onSelect' in singles && !query.distincts.length ?\n            DataUtil.callAdaptorFunction(this, 'onSelect', DataUtil.getValue(singles.onSelect.fieldNames, query), query) : '';\n        req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, 'onCount', query.isCountRequired, query) : '';\n        req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, 'onSearch', request.searches, query) : '';\n        req[options.skip] = 'onSkip' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onSkip', DataUtil.getValue(singles.onSkip.nos, query), query) : '';\n        req[options.take] = 'onTake' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onTake', DataUtil.getValue(singles.onTake.nos, query), query) : '';\n        req[options.where] = request.filters.length || request.searches.length ?\n            DataUtil.callAdaptorFunction(this, 'onWhere', request.filters, query) : '';\n        req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, 'onSortBy', request.sorts, query) : '';\n        req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, 'onGroup', request.groups, query) : '';\n        req[options.aggregates] = request.aggregates.length ?\n            DataUtil.callAdaptorFunction(this, 'onAggregates', request.aggregates, query) : '';\n        req[param] = [];\n    }\n    /**\n     * Convert the object from processQuery to string which can be added query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     */\n    convertToQueryString(request, query, dm) {\n        return '';\n        // this needs to be overridden\n    }\n    /**\n     * Return the data from the data manager processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Object} request?\n     * @param  {CrudOptions} changes?\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        if (xhr && xhr.getResponseHeader('Content-Type') &&\n            xhr.getResponseHeader('Content-Type').indexOf('application/json') !== -1) {\n            let handleTimeZone = DataUtil.timeZoneHandling;\n            if (ds && !ds.timeZoneHandling) {\n                DataUtil.timeZoneHandling = false;\n            }\n            data = DataUtil.parse.parseJson(data);\n            DataUtil.timeZoneHandling = handleTimeZone;\n        }\n        let requests = request;\n        let pvt = requests.pvtData || {};\n        let groupDs = data ? data.groupDs : [];\n        if (xhr && xhr.getResponseHeader('Content-Type') &&\n            xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        let d = JSON.parse(requests.data);\n        if (d && d.action === 'batch' && data && data.addedRecords) {\n            changes.addedRecords = data.addedRecords;\n            return changes;\n        }\n        if (data && data.d) {\n            data = data.d;\n        }\n        let args = {};\n        if (data && 'count' in data) {\n            args.count = data.count;\n        }\n        args.result = data && data.result ? data.result : data;\n        let isExpand = false;\n        if (Array.isArray(data.result) && data.result.length) {\n            let key = 'key';\n            let val = 'value';\n            let level = 'level';\n            if (!isNullOrUndefined(data.result[0][key])) {\n                args.result = this.formRemoteGroupedData(args.result, 1, pvt.groups.length - 1);\n            }\n            if (query && query.lazyLoad.length && pvt.groups.length) {\n                for (let i = 0; i < query.lazyLoad.length; i++) {\n                    if (query.lazyLoad[i][key] === 'onDemandGroupInfo') {\n                        let value = query.lazyLoad[i][val][level];\n                        if (pvt.groups.length === value) {\n                            isExpand = true;\n                        }\n                    }\n                }\n            }\n        }\n        if (!isExpand) {\n            this.getAggregateResult(pvt, data, args, groupDs, query);\n        }\n        return DataUtil.isNull(args.count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n    formRemoteGroupedData(data, level, childLevel) {\n        for (let i = 0; i < data.length; i++) {\n            if (data[i].items.length && Object.keys(data[i].items[0]).indexOf('key') > -1) {\n                this.formRemoteGroupedData(data[i].items, level + 1, childLevel - 1);\n            }\n        }\n        let uid = 'GroupGuid';\n        let childLvl = 'childLevels';\n        let lvl = 'level';\n        let records = 'records';\n        data[uid] = consts$1[uid];\n        data[lvl] = level;\n        data[childLvl] = childLevel;\n        data[records] = data[0].items.length ? this.getGroupedRecords(data, !isNullOrUndefined(data[0].items[records])) : [];\n        return data;\n    }\n    getGroupedRecords(data, hasRecords) {\n        let childGroupedRecords = [];\n        let records = 'records';\n        for (let i = 0; i < data.length; i++) {\n            if (!hasRecords) {\n                for (let j = 0; j < data[i].items.length; j++) {\n                    childGroupedRecords.push(data[i].items[j]);\n                }\n            }\n            else {\n                childGroupedRecords = childGroupedRecords.concat(data[i].items[records]);\n            }\n        }\n        return childGroupedRecords;\n    }\n    /**\n     * Add the group query to the adaptor`s option.\n     * @param  {Object[]} e\n     * @returns void\n     */\n    onGroup(e) {\n        this.pvt.groups = e;\n        return e;\n    }\n    /**\n     * Add the aggregate query to the adaptor`s option.\n     * @param  {Aggregates[]} e\n     * @returns void\n     */\n    onAggregates(e) {\n        this.pvt.aggregates = e;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {Object} e\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let url;\n        let key;\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify(extend({}, {\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e[url],\n                key: e[key]\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @returns void\n     */\n    beforeSend(dm, request) {\n        // need to extend this method\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName\n     */\n    insert(dm, data, tableName, query) {\n        return {\n            url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: data,\n                table: tableName,\n                action: 'insert'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number|string} value\n     * @param  {string} tableName\n     */\n    remove(dm, keyField, value, tableName, query) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                key: value,\n                keyColumn: keyField,\n                table: tableName,\n                action: 'remove'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    update(dm, keyField, value, tableName, query) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: value,\n                action: 'update',\n                keyColumn: keyField,\n                key: DataUtil.getObject(keyField, value),\n                table: tableName\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * To generate the predicate based on the filtered query.\n     * @param  {Object[]|string[]|number[]} data\n     * @param  {Query} query\n     * @hidden\n     */\n    getFiltersFrom(data, query) {\n        let key = query.fKey;\n        let value;\n        let prop = key;\n        let pKey = query.key;\n        let predicats = [];\n        if (typeof data[0] !== 'object') {\n            prop = null;\n        }\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[0] === 'object') {\n                value = DataUtil.getObject(pKey || prop, data[i]);\n            }\n            else {\n                value = data[i];\n            }\n            predicats.push(new Predicate(key, 'equal', value));\n        }\n        return Predicate.or(predicats);\n    }\n    getAggregateResult(pvt, data, args, groupDs, query) {\n        let pData = data;\n        if (data && data.result) {\n            pData = data.result;\n        }\n        if (pvt && pvt.aggregates && pvt.aggregates.length) {\n            let agg = pvt.aggregates;\n            let fn;\n            let aggregateData = pData;\n            let res = {};\n            if (data.aggregate) {\n                aggregateData = data.aggregate;\n            }\n            for (let i = 0; i < agg.length; i++) {\n                fn = DataUtil.aggregates[agg[i].type];\n                if (fn) {\n                    res[agg[i].field + ' - ' + agg[i].type] = fn(aggregateData, agg[i].field);\n                }\n            }\n            args.aggregates = res;\n        }\n        let key = 'key';\n        let isServerGrouping = Array.isArray(data.result) && data.result.length && !isNullOrUndefined(data.result[0][key]);\n        if (pvt && pvt.groups && pvt.groups.length && !isServerGrouping) {\n            let groups = pvt.groups;\n            for (let i = 0; i < groups.length; i++) {\n                let level = null;\n                if (!isNullOrUndefined(groupDs)) {\n                    groupDs = DataUtil.group(groupDs, groups[i]);\n                }\n                let groupQuery = Query.filterQueries(query.queries, 'onGroup')[i].e;\n                pData = DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs, groupQuery.comparer);\n            }\n            args.result = pData;\n        }\n        return args;\n    }\n    getQueryRequest(query) {\n        let req = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        req.sorts = Query.filterQueries(query.queries, 'onSortBy');\n        req.groups = Query.filterQueries(query.queries, 'onGroup');\n        req.filters = Query.filterQueries(query.queries, 'onWhere');\n        req.searches = Query.filterQueries(query.queries, 'onSearch');\n        req.aggregates = Query.filterQueries(query.queries, 'onAggregates');\n        return req;\n    }\n    addParams(options) {\n        let req = options.reqParams;\n        if (options.params.length) {\n            req.params = {};\n        }\n        for (let tmp of options.params) {\n            if (req[tmp.key]) {\n                throw new Error('Query() - addParams: Custom Param is conflicting other request arguments');\n            }\n            req[tmp.key] = tmp.value;\n            if (tmp.fn) {\n                req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);\n            }\n            req.params[tmp.key] = req[tmp.key];\n        }\n    }\n}\n/**\n * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.\n * @hidden\n */\nclass ODataAdaptor extends UrlAdaptor {\n    constructor(props) {\n        super();\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            requestType: 'get',\n            accept: 'application/json;odata=light;q=1,application/json;odata=verbose;q=0.5',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$inlinecount',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n            updateType: 'PUT'\n        });\n        extend(this.options, props || {});\n    }\n    getModuleName() {\n        return 'ODataAdaptor';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onPredicate(predicate, query, requiresCast) {\n        let returnValue = '';\n        let operator;\n        let guid;\n        let val = predicate.value;\n        let type = typeof val;\n        let field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;\n        if (val instanceof Date) {\n            val = 'datetime\\'' + DataUtil.parse.replacer(val) + '\\'';\n        }\n        if (type === 'string') {\n            val = val.replace(/'/g, \"''\");\n            if (predicate.ignoreCase) {\n                val = val.toLowerCase();\n            }\n            val = encodeURIComponent(val);\n            val = '\\'' + val + '\\'';\n            if (requiresCast) {\n                field = 'cast(' + field + ', \\'Edm.String\\')';\n            }\n            if (DataUtil.parse.isGuid(val)) {\n                guid = 'guid';\n            }\n            if (predicate.ignoreCase) {\n                if (!guid) {\n                    field = 'tolower(' + field + ')';\n                }\n                val = val.toLowerCase();\n            }\n        }\n        operator = DataUtil.odBiOperator[predicate.operator];\n        if (operator) {\n            returnValue += field;\n            returnValue += operator;\n            if (guid) {\n                returnValue += guid;\n            }\n            return returnValue + val;\n        }\n        if (!isNullOrUndefined(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor') {\n            operator = DataUtil.odv4UniOperator[predicate.operator];\n        }\n        else {\n            operator = DataUtil.odUniOperator[predicate.operator];\n        }\n        if (operator === 'substringof') {\n            let temp = val;\n            val = field;\n            field = temp;\n        }\n        returnValue += operator + '(';\n        returnValue += field + ',';\n        if (guid) {\n            returnValue += guid;\n        }\n        returnValue += val + ')';\n        return returnValue;\n    }\n    addParams(options) {\n        super.addParams(options);\n        delete options.reqParams.params;\n    }\n    /**\n     * Generate request string based on the multiple filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onComplexPredicate(predicate, query, requiresCast) {\n        let res = [];\n        for (let i = 0; i < predicate.predicates.length; i++) {\n            res.push('(' + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ')');\n        }\n        return res.join(' ' + predicate.condition + ' ');\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {Predicate} filter\n     * @param  {boolean} requiresCast?\n     */\n    onEachWhere(filter, query, requiresCast) {\n        return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {string[]} filters\n     */\n    onWhere(filters) {\n        if (this.pvt.search) {\n            filters.push(this.onEachWhere(this.pvt.search, null, true));\n        }\n        return filters.join(' and ');\n    }\n    /**\n     * Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    onEachSearch(e) {\n        if (e.fields && e.fields.length === 0) {\n            DataUtil.throwError('Query() - Search : oData search requires list of field names to search');\n        }\n        let filter = this.pvt.search || [];\n        for (let i = 0; i < e.fields.length; i++) {\n            filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));\n        }\n        this.pvt.search = filter;\n    }\n    /**\n     * Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    onSearch(e) {\n        this.pvt.search = Predicate.or(this.pvt.search);\n        return '';\n    }\n    /**\n     * Generate query string based on multiple sort criteria from query.\n     * @param  {QueryOptions} e\n     */\n    onEachSort(e) {\n        let res = [];\n        if (e.name instanceof Array) {\n            for (let i = 0; i < e.name.length; i++) {\n                res.push(ODataAdaptor.getField(e.name[i]) + (e.direction === 'descending' ? ' desc' : ''));\n            }\n        }\n        else {\n            res.push(ODataAdaptor.getField(e.name) + (e.direction === 'descending' ? ' desc' : ''));\n        }\n        return res.join(',');\n    }\n    /**\n     * Returns sort query string.\n     * @param  {string[]} e\n     */\n    onSortBy(e) {\n        return e.reverse().join(',');\n    }\n    /**\n     * Adds the group query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    onGroup(e) {\n        this.pvt.groups = e;\n        return [];\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n    onSelect(e) {\n        for (let i = 0; i < e.length; i++) {\n            e[i] = ODataAdaptor.getField(e[i]);\n        }\n        return e.join(',');\n    }\n    /**\n     * Add the aggregate query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    onAggregates(e) {\n        this.pvt.aggregates = e;\n        return '';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    onCount(e) {\n        return e === true ? 'allpages' : '';\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    beforeSend(dm, request, settings) {\n        if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.options.multipartAccept);\n            request.setRequestHeader('DataServiceVersion', '2.0');\n            request.overrideMimeType('text/plain; charset=x-user-defined');\n        }\n        else {\n            request.setRequestHeader('Accept', this.options.accept);\n        }\n        request.setRequestHeader('DataServiceVersion', '2.0');\n        request.setRequestHeader('MaxDataServiceVersion', '2.0');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let metaCheck = 'odata.metadata';\n        if ((request && request.type === 'GET') && !this.rootUrl && data[metaCheck]) {\n            let dataUrls = data[metaCheck].split('/$metadata#');\n            this.rootUrl = dataUrls[0];\n            this.resourceTableName = dataUrls[1];\n        }\n        let pvtData = 'pvtData';\n        if (!isNullOrUndefined(data.d)) {\n            let dataCopy = ((query && query.isCountRequired) ? data.d.results : data.d);\n            let metaData = '__metadata';\n            if (!isNullOrUndefined(dataCopy)) {\n                for (let i = 0; i < dataCopy.length; i++) {\n                    if (!isNullOrUndefined(dataCopy[i][metaData])) {\n                        delete dataCopy[i][metaData];\n                    }\n                }\n            }\n        }\n        let pvt = request && request[pvtData];\n        let emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n        let count = null;\n        let version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n        if (query && query.isCountRequired) {\n            let oDataCount = '__count';\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n            if (data.d) {\n                data = data.d;\n            }\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n        }\n        if (version === 3 && data.value) {\n            data = data.value;\n        }\n        if (data.d) {\n            data = data.d;\n        }\n        if (version < 3 && data.results) {\n            data = data.results;\n        }\n        let args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args, null, query);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n    /**\n     * Converts the request object to query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     * @returns tableName\n     */\n    convertToQueryString(request, query, dm) {\n        let res = [];\n        let table = 'table';\n        let tableName = request[table] || '';\n        let format = '$format';\n        delete request[table];\n        if (dm.dataSource.requiresFormat) {\n            request[format] = 'json';\n        }\n        let keys = Object.keys(request);\n        for (let prop of keys) {\n            res.push(prop + '=' + request[prop]);\n        }\n        res = res.join('&');\n        if (dm.dataSource.url && dm.dataSource.url.indexOf('?') !== -1 && !tableName) {\n            return res;\n        }\n        return res.length ? tableName + '?' + res : tableName || '';\n    }\n    localTimeReplacer(key, convertObj) {\n        for (let prop of !isNullOrUndefined(convertObj) ? Object.keys(convertObj) : []) {\n            if ((convertObj[prop] instanceof Date)) {\n                convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]);\n            }\n        }\n        return convertObj;\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        return {\n            url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : ''),\n            data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        let url;\n        if (typeof value === 'string' && !DataUtil.parse.isGuid(value)) {\n            url = `('${value}')`;\n        }\n        else {\n            url = `(${value})`;\n        }\n        return {\n            type: 'DELETE',\n            url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url\n        };\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns this\n     */\n    update(dm, keyField, value, tableName, query, original) {\n        if (this.options.updateType === 'PATCH' && !isNullOrUndefined(original)) {\n            value = this.compareAndRemove(value, original, keyField);\n        }\n        let url;\n        if (typeof value[keyField] === 'string' && !DataUtil.parse.isGuid(value[keyField])) {\n            url = `('${value[keyField]}')`;\n        }\n        else {\n            url = `(${value[keyField]})`;\n        }\n        return {\n            type: this.options.updateType,\n            url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url,\n            data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),\n            accept: this.options.accept\n        };\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     * @returns {Object}\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n        let url = this.rootUrl ? this.rootUrl + '/' + this.options.batch :\n            dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        e.url = this.resourceTableName ? this.resourceTableName : e.url;\n        let args = {\n            url: e.url,\n            key: e.key,\n            cid: 1,\n            cSet: DataUtil.getGuid(this.options.changeSet)\n        };\n        let req = '--' + initialGuid + '\\n';\n        req += 'Content-Type: multipart/mixed; boundary=' + args.cSet.replace('--', '') + '\\n';\n        this.pvt.changeSet = 0;\n        req += this.generateInsertRequest(changes.addedRecords, args, dm);\n        req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);\n        req += this.generateDeleteRequest(changes.deletedRecords, args, dm);\n        req += args.cSet + '--\\n';\n        req += '--' + initialGuid + '--';\n        return {\n            type: 'POST',\n            url: url,\n            dataType: 'json',\n            contentType: 'multipart/mixed; charset=UTF-8;boundary=' + initialGuid,\n            data: req\n        };\n    }\n    /**\n     * Generate the string content from the removed records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     * @returns this\n     */\n    generateDeleteRequest(arr, e, dm) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'DELETE ',\n            'url': (data, i, key) => {\n                let url = DataUtil.getObject(key, data[i]);\n                if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n                    return '(' + url + ')';\n                }\n                else if (url instanceof Date) {\n                    let dateTime = data[i][key];\n                    return '(' + dateTime.toJSON() + ')';\n                }\n                else {\n                    return `('${url}')`;\n                }\n            },\n            'data': (data, i) => ''\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req + '\\n';\n    }\n    /**\n     * Generate the string content from the inserted records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    generateInsertRequest(arr, e, dm) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'POST ',\n            'url': (data, i, key) => '',\n            'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req;\n    }\n    /**\n     * Generate the string content from the updated records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    generateUpdateRequest(arr, e, dm, org) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        arr.forEach((change) => change = this.compareAndRemove(change, org.filter((o) => DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change))[0], e.key));\n        let stat = {\n            'method': this.options.updateType + ' ',\n            'url': (data, i, key) => {\n                if (typeof data[i][key] === 'number' || DataUtil.parse.isGuid(data[i][key])) {\n                    return '(' + data[i][key] + ')';\n                }\n                else if (data[i][key] instanceof Date) {\n                    let date = data[i][key];\n                    return '(' + date.toJSON() + ')';\n                }\n                else {\n                    return `('${data[i][key]}')`;\n                }\n            },\n            'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req;\n    }\n    static getField(prop) {\n        return prop.replace(/\\./g, '/');\n    }\n    generateBodyContent(arr, e, stat, dm) {\n        let req = '';\n        for (let i = 0; i < arr.length; i++) {\n            req += '\\n' + e.cSet + '\\n';\n            req += this.options.changeSetContent + '\\n\\n';\n            req += stat.method;\n            if (stat.method === 'POST ') {\n                req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            else if (stat.method === 'PUT ' || stat.method === 'PATCH ') {\n                req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            else if (stat.method === 'DELETE ') {\n                req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            req += 'Accept: ' + this.options.accept + '\\n';\n            req += 'Content-Id: ' + this.pvt.changeSet++ + '\\n';\n            req += this.options.batchChangeSetContentType + '\\n';\n            if (!isNullOrUndefined(arr[i]['@odata.etag'])) {\n                req += 'If-Match: ' + arr[i]['@odata.etag'] + '\\n\\n';\n                delete arr[i]['@odata.etag'];\n            }\n            else {\n                req += '\\n';\n            }\n            req += stat.data(arr, i);\n        }\n        return req;\n    }\n    processBatchResponse(data, query, xhr, request, changes) {\n        if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === 'post') {\n            let guid = xhr.getResponseHeader('Content-Type');\n            let cIdx;\n            let jsonObj;\n            let d = data + '';\n            guid = guid.substring(guid.indexOf('=batchresponse') + 1);\n            d = d.split(guid);\n            if (d.length < 2) {\n                return {};\n            }\n            d = d[1];\n            let exVal = /(?:\\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);\n            if (exVal) {\n                d.replace(exVal[0], '');\n            }\n            let changeGuid = exVal ? exVal[1] : '';\n            d = d.split(changeGuid);\n            for (let i = d.length; i > -1; i--) {\n                if (!/\\bContent-ID:/i.test(d[i]) || !/\\bHTTP.+201/.test(d[i])) {\n                    continue;\n                }\n                cIdx = parseInt(/\\bContent-ID: (\\d+)/i.exec(d[i])[1], 10);\n                if (changes.addedRecords[cIdx]) {\n                    jsonObj = DataUtil.parse.parseJson(/^\\{.+\\}/m.exec(d[i])[0]);\n                    extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));\n                }\n            }\n            return changes;\n        }\n        return null;\n    }\n    compareAndRemove(data, original, key) {\n        if (isNullOrUndefined(original)) {\n            return data;\n        }\n        Object.keys(data).forEach((prop) => {\n            if (prop !== key && prop !== '@odata.etag') {\n                if (DataUtil.isPlainObject(data[prop])) {\n                    this.compareAndRemove(data[prop], original[prop]);\n                    let final = Object.keys(data[prop]).filter((data) => data !== '@odata.etag');\n                    if (final.length === 0) {\n                        delete data[prop];\n                    }\n                }\n                else if (data[prop] === original[prop]) {\n                    delete data[prop];\n                }\n                else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {\n                    delete data[prop];\n                }\n            }\n        });\n        return data;\n    }\n}\n/**\n * The OData v4 is an improved version of OData protocols.\n * The DataManager uses the ODataV4Adaptor to consume OData v4 services.\n * @hidden\n */\nclass ODataV4Adaptor extends ODataAdaptor {\n    constructor(props) {\n        super(props);\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            requestType: 'get',\n            accept: 'application/json, text/javascript, */*; q=0.01',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$count',\n            search: '$search',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n            updateType: 'PATCH',\n            localTime: false,\n            apply: '$apply'\n        });\n        extend(this.options, props || {});\n    }\n    /**\n     * @hidden\n     */\n    getModuleName() {\n        return 'ODataV4Adaptor';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    onCount(e) {\n        return e === true ? 'true' : '';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onPredicate(predicate, query, requiresCast) {\n        let returnValue = '';\n        let val = predicate.value;\n        let isDate = val instanceof Date;\n        if (query instanceof Query) {\n            let queries = this.getQueryRequest(query);\n            for (let i = 0; i < queries.filters.length; i++) {\n                if (queries.filters[i].e.key === predicate.value) {\n                    requiresCast = true;\n                }\n            }\n        }\n        returnValue = super.onPredicate.call(this, predicate, query, requiresCast);\n        if (isDate) {\n            returnValue = returnValue.replace(/datetime'(.*)'$/, '$1');\n        }\n        if (DataUtil.parse.isGuid(val)) {\n            returnValue = returnValue.replace('guid', '').replace(/'/g, '');\n        }\n        return returnValue;\n    }\n    /**\n     *  Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    onEachSearch(e) {\n        let search = this.pvt.searches || [];\n        search.push(e.key);\n        this.pvt.searches = search;\n    }\n    /**\n     *  Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    onSearch(e) {\n        return this.pvt.searches.join(' OR ');\n    }\n    /**\n     * Returns the expand query string.\n     * @param  {string} e\n     */\n    onExpand(e) {\n        let selected = {};\n        let expanded = {};\n        let expands = e.expands.slice();\n        let exArr = [];\n        let selects = e.selects.filter((item) => item.indexOf('.') > -1);\n        selects.forEach((select) => {\n            let splits = select.split('.');\n            if (!(splits[0] in selected)) {\n                selected[splits[0]] = [];\n            }\n            if (splits.length == 2) {\n                if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1) {\n                    if (selected[splits[0]][0].indexOf('$expand') !== -1 && selected[splits[0]][0].indexOf(';$select=') === -1) {\n                        selected[splits[0]][0] = selected[splits[0]][0] + ';' + '$select=' + splits[1];\n                    }\n                    else {\n                        selected[splits[0]][0] = selected[splits[0]][0] + ',' + splits[1];\n                    }\n                }\n                else {\n                    selected[splits[0]].push('$select=' + splits[1]);\n                }\n            }\n            else {\n                let sel = '$select=' + splits[splits.length - 1];\n                let exp = '';\n                let close = '';\n                for (let i = 1; i < splits.length - 1; i++) {\n                    exp = exp + '$expand=' + splits[i] + '(';\n                    close = close + ')';\n                }\n                let combineVal = exp + sel + close;\n                if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1 &&\n                    this.expandQueryIndex(selected[splits[0]], true)) {\n                    let idx = this.expandQueryIndex(selected[splits[0]]);\n                    selected[splits[0]][idx] = selected[splits[0]][idx] + combineVal.replace('$expand=', ',');\n                }\n                else {\n                    selected[splits[0]].push(combineVal);\n                }\n            }\n        });\n        //Auto expand from select query\n        Object.keys(selected).forEach((expand) => {\n            if ((expands.indexOf(expand) === -1)) {\n                expands.push(expand);\n            }\n        });\n        expands.forEach((expand) => {\n            expanded[expand] = expand in selected ? `${expand}(${selected[expand].join(';')})` : expand;\n        });\n        Object.keys(expanded).forEach((ex) => exArr.push(expanded[ex]));\n        return exArr.join(',');\n    }\n    expandQueryIndex(query, isExpand) {\n        for (let i = 0; i < query.length; i++) {\n            if (query[i].indexOf('$expand') !== -1) {\n                return isExpand ? true : i;\n            }\n        }\n        return isExpand ? false : 0;\n    }\n    /**\n     * Returns the groupby query string.\n     * @param  {string} e\n     */\n    onDistinct(distinctFields) {\n        let fields = distinctFields.map((field) => ODataAdaptor.getField(field)).join(',');\n        return `groupby((${fields}))`;\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n    onSelect(e) {\n        return super.onSelect(e.filter((item) => item.indexOf('.') === -1));\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    beforeSend(dm, request, settings) {\n        if (settings.type === 'POST' || settings.type === 'PUT' || settings.type === 'PATCH') {\n            request.setRequestHeader('Prefer', 'return=representation');\n        }\n        request.setRequestHeader('Accept', this.options.accept);\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let metaName = '@odata.context';\n        if ((request && request.type === 'GET') && !this.rootUrl && data[metaName]) {\n            let dataUrl = data[metaName].split('/$metadata#');\n            this.rootUrl = dataUrl[0];\n            this.resourceTableName = dataUrl[1];\n        }\n        let pvtData = 'pvtData';\n        let pvt = request && request[pvtData];\n        let emptyAndBatch = super.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        let count = null;\n        let dataCount = '@odata.count';\n        if (query && query.isCountRequired) {\n            if (dataCount in data) {\n                count = data[dataCount];\n            }\n        }\n        data = !isNullOrUndefined(data.value) ? data.value : data;\n        let args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args, null, query);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: count, aggregates: args.aggregates };\n    }\n}\n/**\n * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.\n * The DataManager uses the WebApiAdaptor to consume Web API.\n * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n * @hidden\n */\nclass WebApiAdaptor extends ODataAdaptor {\n    getModuleName() {\n        return 'WebApiAdaptor';\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.url,\n            data: JSON.stringify(data)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        return {\n            type: 'DELETE',\n            url: dm.dataSource.url + '/' + value,\n            data: JSON.stringify(value)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    update(dm, keyField, value, tableName) {\n        return {\n            type: 'PUT',\n            url: dm.dataSource.url,\n            data: JSON.stringify(value)\n        };\n    }\n    batchRequest(dm, changes, e) {\n        let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n        let url = dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        e.url = this.resourceTableName ? this.resourceTableName : e.url;\n        let req = [];\n        //insertion\n        for (let i = 0, x = changes.addedRecords.length; i < x; i++) {\n            changes.addedRecords.forEach((j, d) => {\n                let stat = {\n                    'method': 'POST ',\n                    'url': (data, i, key) => '',\n                    'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('POST ' + '/api/' + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url)\n                    + stat.url(changes.addedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        //updation \n        for (let i = 0, x = changes.changedRecords.length; i < x; i++) {\n            changes.changedRecords.forEach((j, d) => {\n                let stat = {\n                    'method': this.options.updateType + ' ',\n                    'url': (data, i, key) => '',\n                    'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('PUT ' + '/api/' + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url)\n                    + stat.url(changes.changedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        //deletion\n        for (let i = 0, x = changes.deletedRecords.length; i < x; i++) {\n            changes.deletedRecords.forEach((j, d) => {\n                let state = {\n                    'mtd': 'DELETE ',\n                    'url': (data, i, key) => {\n                        let url = DataUtil.getObject(key, data[i]);\n                        if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n                            return '/' + url;\n                        }\n                        else if (url instanceof Date) {\n                            let datTime = data[i][key];\n                            return '/' + datTime.toJSON();\n                        }\n                        else {\n                            return `/'${url}'`;\n                        }\n                    },\n                    'data': (data, i) => ''\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('DELETE ' + '/api/' + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url)\n                    + state.url(changes.deletedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        req.push('--' + initialGuid + '--', '');\n        return {\n            type: 'POST',\n            url: url,\n            contentType: 'multipart/mixed; boundary=' + initialGuid,\n            data: req.join('\\r\\n')\n        };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    beforeSend(dm, request, settings) {\n        request.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let pvtData = 'pvtData';\n        let pvt = request && request[pvtData];\n        let count = null;\n        let args = {};\n        if (request && request.type.toLowerCase() !== 'post') {\n            let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n            let version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n            if (query && query.isCountRequired) {\n                if (!DataUtil.isNull(data.Count)) {\n                    count = data.Count;\n                }\n            }\n            if (version < 3 && data.Items) {\n                data = data.Items;\n            }\n            args.count = count;\n            args.result = data;\n            this.getAggregateResult(pvt, data, args, null, query);\n        }\n        args.result = args.result || data;\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n}\n/**\n * WebMethodAdaptor can be used by DataManager to interact with web method.\n * @hidden\n */\nclass WebMethodAdaptor extends UrlAdaptor {\n    /**\n     * Prepare the request body based on the query.\n     * The query information can be accessed at the WebMethod using variable named `value`.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns application\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);\n        let getData = 'data';\n        let data = DataUtil.parse.parseJson(obj[getData]);\n        let result = {};\n        let value = 'value';\n        if (data.param) {\n            for (let i = 0; i < data.param.length; i++) {\n                let param = data.param[i];\n                let key = Object.keys(param)[0];\n                result[key] = param[key];\n            }\n        }\n        result[value] = data;\n        let pvtData = 'pvtData';\n        let url = 'url';\n        return {\n            data: JSON.stringify(result),\n            url: obj[url],\n            pvtData: obj[pvtData],\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8'\n        };\n    }\n}\n/**\n * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.\n * It interacts with server-side only for CRUD operations.\n * @hidden\n */\nclass RemoteSaveAdaptor extends JsonAdaptor {\n    /**\n     * @hidden\n     */\n    constructor() {\n        super();\n        setValue('beforeSend', UrlAdaptor.prototype.beforeSend, this);\n    }\n    insert(dm, data, tableName, query, position) {\n        this.pvt.position = position;\n        this.updateType = 'add';\n        return {\n            url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: data,\n                table: tableName,\n                action: 'insert'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    remove(dm, keyField, val, tableName, query) {\n        super.remove(dm, keyField, val);\n        return {\n            type: 'POST',\n            url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                key: val,\n                keyColumn: keyField,\n                table: tableName,\n                action: 'remove'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    update(dm, keyField, val, tableName, query) {\n        this.updateType = 'update';\n        this.updateKey = keyField;\n        return {\n            type: 'POST',\n            url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: val,\n                action: 'update',\n                keyColumn: keyField,\n                key: val[keyField],\n                table: tableName\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    processResponse(data, ds, query, xhr, request, changes, e) {\n        let i;\n        let newData = request ? JSON.parse(request.data) : data;\n        data = newData.action === 'batch' ? DataUtil.parse.parseJson(data) : data;\n        if (this.updateType === 'add') {\n            super.insert(ds, data, null, null, this.pvt.position);\n        }\n        if (this.updateType === 'update') {\n            super.update(ds, this.updateKey, data);\n        }\n        this.updateType = undefined;\n        if (data.added) {\n            for (i = 0; i < data.added.length; i++) {\n                super.insert(ds, data.added[i]);\n            }\n        }\n        if (data.changed) {\n            for (i = 0; i < data.changed.length; i++) {\n                super.update(ds, e.key, data.changed[i]);\n            }\n        }\n        if (data.deleted) {\n            for (i = 0; i < data.deleted.length; i++) {\n                super.remove(ds, e.key, data.deleted[i]);\n            }\n        }\n        return data;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * Also perform the changes in the locally cached data to sync with the remote data.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e, query, original) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify(extend({}, {\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e.url,\n                key: e.key\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    addParams(options) {\n        let urlParams = new UrlAdaptor();\n        urlParams.addParams(options);\n    }\n}\n/**\n * Ajax Adaptor that is extended from URL Adaptor, is used for handle data operations with user defined functions.\n * @hidden\n */\nclass CustomDataAdaptor extends UrlAdaptor {\n    constructor(props) {\n        super();\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            getData: new Function(),\n            addRecord: new Function(),\n            updateRecord: new Function(),\n            deleteRecord: new Function(),\n            batchUpdate: new Function()\n        });\n        extend(this.options, props || {});\n    }\n    getModuleName() {\n        return 'CustomDataAdaptor';\n    }\n}\n/**\n * The GraphqlAdaptor that is extended from URL Adaptor, is used for retrieving data from the Graphql server.\n * It interacts with the Graphql server with all the DataManager Queries and performs CRUD operations.\n * @hidden\n */\nclass GraphQLAdaptor extends UrlAdaptor {\n    getModuleName() {\n        return 'GraphQLAdaptor';\n    }\n    constructor(options) {\n        super();\n        this.opt = options;\n        this.schema = this.opt.response;\n        this.query = this.opt.query;\n        this.getVariables = this.opt.getVariables ? this.opt.getVariables : () => { };\n        this.getQuery = () => this.query;\n    }\n    /**\n     * Process the JSON data based on the provided queries.\n     * @param  {DataManager} dm\n     * @param  {Query} query?\n     */\n    processQuery(datamanager, query) {\n        let urlQuery = super.processQuery.apply(this, arguments);\n        let dm = JSON.parse(urlQuery.data);\n        // constructing GraphQL parameters\n        let keys = ['skip', 'take', 'sorted', 'table', 'select', 'where',\n            'search', 'requiresCounts', 'aggregates', 'params'];\n        let temp = {};\n        let str = 'searchwhereparams';\n        keys.filter((e) => {\n            temp[e] = str.indexOf(e) > -1 ? JSON.stringify(dm[e]) : dm[e];\n        });\n        let vars = this.getVariables() || {};\n        vars['datamanager'] = temp;\n        let data = JSON.stringify({\n            query: this.getQuery(),\n            variables: vars\n        });\n        urlQuery.data = data;\n        return urlQuery;\n    }\n    /**\n     * Returns the data from the query processing.\n     * It will also cache the data for later usage.\n     * @param  {DataResult} data\n     * @param  {DataManager} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Object} request?\n     * @returns DataResult\n     */\n    processResponse(resData, ds, query, xhr, request) {\n        const res = resData;\n        let count;\n        let aggregates;\n        let result = getValue(this.schema.result, res.data);\n        if (this.schema.count) {\n            count = getValue(this.schema.count, res.data);\n        }\n        if (this.schema.aggregates) {\n            aggregates = getValue(this.schema.aggregates, res.data);\n            aggregates = !isNullOrUndefined(aggregates) ? DataUtil.parse.parseJson(aggregates) : aggregates;\n        }\n        let pvt = request.pvtData || {};\n        let args = { result: result, aggregates: aggregates };\n        let data = args;\n        if (pvt && pvt.groups && pvt.groups.length) {\n            this.getAggregateResult(pvt, data, args, null, query);\n        }\n        return !isNullOrUndefined(count) ? { result: args.result, count: count, aggregates: aggregates } : args.result;\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     */\n    insert() {\n        let inserted = super.insert.apply(this, arguments);\n        return this.generateCrudData(inserted, 'insert');\n    }\n    /**\n     * Prepare and returns request body which is used to update a new record in the table.\n     */\n    update() {\n        let inserted = super.update.apply(this, arguments);\n        return this.generateCrudData(inserted, 'update');\n    }\n    /**\n     * Prepare and returns request body which is used to remove a new record in the table.\n     */\n    remove() {\n        let inserted = super.remove.apply(this, arguments);\n        return this.generateCrudData(inserted, 'remove');\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {Object} e\n     * @param  {Query} query\n     * @param  {Object} original\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let batch = super.batchRequest.apply(this, arguments);\n        let bData = JSON.parse(batch.data);\n        bData.key = e.key;\n        batch.data = JSON.stringify(bData);\n        return this.generateCrudData(batch, 'batch');\n    }\n    generateCrudData(crudData, action) {\n        let parsed = JSON.parse(crudData.data);\n        crudData.data = JSON.stringify({\n            query: this.opt.getMutation(action),\n            variables: parsed\n        });\n        return crudData;\n    }\n}\n/**\n * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.\n * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager\n * @hidden\n */\nclass CacheAdaptor extends UrlAdaptor {\n    /**\n     * Constructor for CacheAdaptor class.\n     * @param  {CacheAdaptor} adaptor?\n     * @param  {number} timeStamp?\n     * @param  {number} pageSize?\n     * @hidden\n     */\n    constructor(adaptor, timeStamp, pageSize) {\n        super();\n        this.isCrudAction = false;\n        this.isInsertAction = false;\n        if (!isNullOrUndefined(adaptor)) {\n            this.cacheAdaptor = adaptor;\n        }\n        this.pageSize = pageSize;\n        this.guidId = DataUtil.getGuid('cacheAdaptor');\n        let obj = { keys: [], results: [] };\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        let guid = this.guidId;\n        if (!isNullOrUndefined(timeStamp)) {\n            setInterval(() => {\n                let data;\n                data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));\n                let forDel = [];\n                for (let i = 0; i < data.results.length; i++) {\n                    let currentTime = +new Date();\n                    let requestTime = +new Date(data.results[i].timeStamp);\n                    data.results[i].timeStamp = currentTime - requestTime;\n                    if (currentTime - requestTime > timeStamp) {\n                        forDel.push(i);\n                    }\n                }\n                for (let i = 0; i < forDel.length; i++) {\n                    data.results.splice(forDel[i], 1);\n                    data.keys.splice(forDel[i], 1);\n                }\n                window.localStorage.removeItem(guid);\n                window.localStorage.setItem(guid, JSON.stringify(data));\n            }, timeStamp);\n        }\n    }\n    /**\n     * It will generate the key based on the URL when we send a request to server.\n     * @param  {string} url\n     * @param  {Query} query?\n     * @hidden\n     */\n    generateKey(url, query) {\n        let queries = this.getQueryRequest(query);\n        let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        let key = url;\n        let page = 'onPage';\n        if (page in singles) {\n            key += singles[page].pageIndex;\n        }\n        queries.sorts.forEach((obj) => {\n            key += obj.e.direction + obj.e.fieldName;\n        });\n        queries.groups.forEach((obj) => {\n            key += obj.e.fieldName;\n        });\n        queries.searches.forEach((obj) => {\n            key += obj.e.searchKey;\n        });\n        for (let filter = 0; filter < queries.filters.length; filter++) {\n            let currentFilter = queries.filters[filter];\n            if (currentFilter.e.isComplex) {\n                let newQuery = query.clone();\n                newQuery.queries = [];\n                for (let i = 0; i < currentFilter.e.predicates.length; i++) {\n                    newQuery.queries.push({ fn: 'onWhere', e: currentFilter.e.predicates[i], filter: query.queries.filter });\n                }\n                key += currentFilter.e.condition + this.generateKey(url, newQuery);\n            }\n            else {\n                key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;\n            }\n        }\n        return key;\n    }\n    /**\n     * Process the query to generate request body.\n     * If the data is already cached, it will return the cached data.\n     * @param  {DataManager} dm\n     * @param  {Query} query?\n     * @param  {Object[]} hierarchyFilters?\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let key = this.generateKey(dm.dataSource.url, query);\n        let cachedItems;\n        cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        let data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;\n        if (data != null && !this.isCrudAction && !this.isInsertAction) {\n            return data;\n        }\n        this.isCrudAction = null;\n        this.isInsertAction = null;\n        return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n    }\n    /**\n     * Returns the data from the query processing.\n     * It will also cache the data for later usage.\n     * @param  {DataResult} data\n     * @param  {DataManager} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        if (this.isInsertAction || (request && this.cacheAdaptor.options.batch &&\n            DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === 'post')) {\n            return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);\n        }\n        data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n        let key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;\n        let obj = {};\n        obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        let index = obj.keys.indexOf(key);\n        if (index !== -1) {\n            obj.results.splice(index, 1);\n            obj.keys.splice(index, 1);\n        }\n        obj.results[obj.keys.push(key) - 1] = { keys: key, result: data.result, timeStamp: new Date(), count: data.count };\n        while (obj.results.length > this.pageSize) {\n            obj.results.splice(0, 1);\n            obj.keys.splice(0, 1);\n        }\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        return data;\n    }\n    /**\n     * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    beforeSend(dm, request, settings) {\n        if (!isNullOrUndefined(this.cacheAdaptor.options.batch) && DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch)\n            && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.multipartAccept);\n        }\n        if (!dm.dataSource.crossDomain) {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.accept);\n        }\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    update(dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.update(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        this.isInsertAction = true;\n        return this.cacheAdaptor.insert(dm, data, tableName);\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.remove(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        return this.cacheAdaptor.batchRequest(dm, changes, e);\n    }\n}\n\n/**\n * DataManager is used to manage and manipulate relational data.\n */\nclass DataManager {\n    /**\n     * Constructor for DataManager class\n     * @param  {DataOptions|JSON[]} dataSource?\n     * @param  {Query} query?\n     * @param  {AdaptorOptions|string} adaptor?\n     * @hidden\n     */\n    constructor(dataSource, query, adaptor) {\n        /** @hidden */\n        this.dateParse = true;\n        /** @hidden */\n        this.timeZoneHandling = true;\n        this.requests = [];\n        if (!dataSource && !this.dataSource) {\n            dataSource = [];\n        }\n        adaptor = adaptor || dataSource.adaptor;\n        if (dataSource && dataSource.timeZoneHandling === false) {\n            this.timeZoneHandling = dataSource.timeZoneHandling;\n        }\n        let data;\n        if (dataSource instanceof Array) {\n            data = {\n                json: dataSource,\n                offline: true\n            };\n        }\n        else if (typeof dataSource === 'object') {\n            if (!dataSource.json) {\n                dataSource.json = [];\n            }\n            data = {\n                url: dataSource.url,\n                insertUrl: dataSource.insertUrl,\n                removeUrl: dataSource.removeUrl,\n                updateUrl: dataSource.updateUrl,\n                crudUrl: dataSource.crudUrl,\n                batchUrl: dataSource.batchUrl,\n                json: dataSource.json,\n                headers: dataSource.headers,\n                accept: dataSource.accept,\n                data: dataSource.data,\n                timeTillExpiration: dataSource.timeTillExpiration,\n                cachingPageSize: dataSource.cachingPageSize,\n                enableCaching: dataSource.enableCaching,\n                requestType: dataSource.requestType,\n                key: dataSource.key,\n                crossDomain: dataSource.crossDomain,\n                jsonp: dataSource.jsonp,\n                dataType: dataSource.dataType,\n                offline: dataSource.offline !== undefined ? dataSource.offline\n                    : dataSource.adaptor instanceof RemoteSaveAdaptor || dataSource.adaptor instanceof CustomDataAdaptor ?\n                        false : dataSource.url ? false : true,\n                requiresFormat: dataSource.requiresFormat\n            };\n        }\n        else {\n            DataUtil.throwError('DataManager: Invalid arguments');\n        }\n        if (data.requiresFormat === undefined && !DataUtil.isCors()) {\n            data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;\n        }\n        if (data.dataType === undefined) {\n            data.dataType = 'json';\n        }\n        this.dataSource = data;\n        this.defaultQuery = query;\n        if (data.url && data.offline && !data.json.length) {\n            this.isDataAvailable = false;\n            this.adaptor = adaptor || new ODataAdaptor();\n            this.dataSource.offline = false;\n            this.ready = this.executeQuery(query || new Query());\n            this.ready.then((e) => {\n                this.dataSource.offline = true;\n                this.isDataAvailable = true;\n                data.json = e.result;\n                this.adaptor = new JsonAdaptor();\n            });\n        }\n        else {\n            this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();\n        }\n        if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {\n            data.jsonp = 'callback';\n        }\n        this.adaptor = adaptor || this.adaptor;\n        if (data.enableCaching) {\n            this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);\n        }\n        return this;\n    }\n    /**\n     * Overrides DataManager's default query with given query.\n     * @param  {Query} query - Defines the new default query.\n     */\n    setDefaultQuery(query) {\n        this.defaultQuery = query;\n        return this;\n    }\n    /**\n     * Executes the given query with local data source.\n     * @param  {Query} query - Defines the query to retrieve data.\n     */\n    executeLocal(query) {\n        if (!this.defaultQuery && !(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');\n        }\n        if (!this.dataSource.json) {\n            DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');\n        }\n        query = query || this.defaultQuery;\n        let result = this.adaptor.processQuery(this, query);\n        if (query.subQuery) {\n            let from = query.subQuery.fromTable;\n            let lookup = query.subQuery.lookups;\n            let res = query.isCountRequired ? result.result :\n                result;\n            if (lookup && lookup instanceof Array) {\n                DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);\n            }\n            for (let j = 0; j < res.length; j++) {\n                if (res[j][from] instanceof Array) {\n                    res[j] = extend({}, {}, res[j]);\n                    res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);\n                }\n            }\n        }\n        return this.adaptor.processResponse(result, this, query);\n    }\n    /**\n     * Executes the given query with either local or remote data source.\n     * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.\n     * @param  {Query|Function} query - Defines the query to retrieve data.\n     * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.\n     * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.\n     * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.\n     */\n    executeQuery(query, done, fail, always) {\n        let makeRequest = 'makeRequest';\n        if (typeof query === 'function') {\n            always = fail;\n            fail = done;\n            done = query;\n            query = null;\n        }\n        if (!query) {\n            query = this.defaultQuery;\n        }\n        if (!(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');\n        }\n        let deffered = new Deferred();\n        let args = { query: query };\n        if (!this.dataSource.offline && (this.dataSource.url !== undefined && this.dataSource.url !== '')\n            || (!isNullOrUndefined(this.adaptor[makeRequest])) || this.isCustomDataAdaptor(this.adaptor)) {\n            let result = this.adaptor.processQuery(this, query);\n            if (!isNullOrUndefined(this.adaptor[makeRequest])) {\n                this.adaptor[makeRequest](result, deffered, args, query);\n            }\n            else if (!isNullOrUndefined(result.url) || this.isCustomDataAdaptor(this.adaptor)) {\n                this.makeRequest(result, deffered, args, query);\n            }\n            else {\n                args = DataManager.getDeferedArgs(query, result, args);\n                deffered.resolve(args);\n            }\n        }\n        else {\n            DataManager.nextTick(() => {\n                let res = this.executeLocal(query);\n                args = DataManager.getDeferedArgs(query, res, args);\n                deffered.resolve(args);\n            });\n        }\n        if (done || fail) {\n            deffered.promise.then(done, fail);\n        }\n        if (always) {\n            deffered.promise.then(always, always);\n        }\n        return deffered.promise;\n    }\n    static getDeferedArgs(query, result, args) {\n        if (query.isCountRequired) {\n            args.result = result.result;\n            args.count = result.count;\n            args.aggregates = result.aggregates;\n        }\n        else {\n            args.result = result;\n        }\n        return args;\n    }\n    static nextTick(fn) {\n        (window.setImmediate || window.setTimeout)(fn, 0);\n    }\n    extendRequest(url, fnSuccess, fnFail) {\n        return extend({}, {\n            type: 'GET',\n            dataType: this.dataSource.dataType,\n            crossDomain: this.dataSource.crossDomain,\n            jsonp: this.dataSource.jsonp,\n            cache: true,\n            processData: false,\n            onSuccess: fnSuccess,\n            onFailure: fnFail\n        }, url);\n    }\n    // tslint:disable-next-line:max-func-body-length\n    makeRequest(url, deffered, args, query) {\n        let isSelector = !!query.subQuerySelector;\n        let fnFail = (e) => {\n            args.error = e;\n            deffered.reject(args);\n        };\n        let process = (data, count, xhr, request, actual, aggregates, virtualSelectRecords) => {\n            args.xhr = xhr;\n            args.count = count ? parseInt(count.toString(), 10) : 0;\n            args.result = data;\n            args.request = request;\n            args.aggregates = aggregates;\n            args.actual = actual;\n            args.virtualSelectRecords = virtualSelectRecords;\n            deffered.resolve(args);\n        };\n        let fnQueryChild = (data, selector) => {\n            let subDeffer = new Deferred();\n            let childArgs = { parent: args };\n            query.subQuery.isChild = true;\n            let subUrl = this.adaptor.processQuery(this, query.subQuery, data ? this.adaptor.processResponse(data) : selector);\n            let childReq = this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);\n            if (!isSelector) {\n                subDeffer.then((subData) => {\n                    if (data) {\n                        DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);\n                        process(data, subData.count, subData.xhr);\n                    }\n                }, fnFail);\n            }\n            return childReq;\n        };\n        let fnSuccess = (data, request) => {\n            if (this.isGraphQLAdaptor(this.adaptor)) {\n                if (!isNullOrUndefined(data['errors'])) {\n                    return fnFail(data['errors'], request);\n                }\n            }\n            if (this.isCustomDataAdaptor(this.adaptor)) {\n                request = extend({}, this.ajaxReqOption, request);\n            }\n            if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && this.dateParse) {\n                data = DataUtil.parse.parseJson(data);\n            }\n            let result = this.adaptor.processResponse(data, this, query, request.httpRequest, request);\n            let count = 0;\n            let aggregates = null;\n            let virtualSelectRecords = 'virtualSelectRecords';\n            let virtualRecords = data[virtualSelectRecords];\n            if (query.isCountRequired) {\n                count = result.count;\n                aggregates = result.aggregates;\n                result = result.result;\n            }\n            if (!query.subQuery) {\n                process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);\n                return;\n            }\n            if (!isSelector) {\n                fnQueryChild(result, request);\n            }\n        };\n        let req = this.extendRequest(url, fnSuccess, fnFail);\n        if (!this.isCustomDataAdaptor(this.adaptor)) {\n            let ajax = new Ajax(req);\n            ajax.beforeSend = () => {\n                this.beforeSend(ajax.httpRequest, ajax);\n            };\n            req = ajax.send();\n            req.catch((e) => true); // to handle failure remote requests.        \n            this.requests.push(ajax);\n        }\n        else {\n            this.ajaxReqOption = req;\n            let request = req;\n            this.adaptor.options.getData({\n                data: request.data,\n                onSuccess: request.onSuccess, onFailure: request.onFailure\n            });\n        }\n        if (isSelector) {\n            let promise;\n            let res = query.subQuerySelector.call(this, { query: query.subQuery, parent: query });\n            if (res && res.length) {\n                promise = Promise.all([req, fnQueryChild(null, res)]);\n                promise.then((...args) => {\n                    let result = args[0];\n                    let pResult = this.adaptor.processResponse(result[0], this, query, this.requests[0].httpRequest, this.requests[0]);\n                    let count = 0;\n                    if (query.isCountRequired) {\n                        count = pResult.count;\n                        pResult = pResult.result;\n                    }\n                    let cResult = this.adaptor.processResponse(result[1], this, query.subQuery, this.requests[1].httpRequest, this.requests[1]);\n                    count = 0;\n                    if (query.subQuery.isCountRequired) {\n                        count = cResult.count;\n                        cResult = cResult.result;\n                    }\n                    DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);\n                    isSelector = false;\n                    process(pResult, count, this.requests[0].httpRequest);\n                });\n            }\n            else {\n                isSelector = false;\n            }\n        }\n        return req;\n    }\n    beforeSend(request, settings) {\n        this.adaptor.beforeSend(this, request, settings);\n        let headers = this.dataSource.headers;\n        let props;\n        for (let i = 0; headers && i < headers.length; i++) {\n            props = [];\n            let keys = Object.keys(headers[i]);\n            for (let prop of keys) {\n                props.push(prop);\n                request.setRequestHeader(prop, headers[i][prop]);\n            }\n        }\n    }\n    /**\n     * Save bulk changes to the given table name.\n     * User can add a new record, edit an existing record, and delete a record at the same time.\n     * If the datasource from remote, then updated in a single post.\n     * @param  {Object} changes - Defines the CrudOptions.\n     * @param  {string} key - Defines the column field.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    saveChanges(changes, key, tableName, query, original) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let args = {\n            url: tableName,\n            key: key || this.dataSource.key\n        };\n        let req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](req);\n        }\n        else if (!this.isCustomDataAdaptor(this.adaptor)) {\n            let deff = new Deferred();\n            let ajax = new Ajax(req);\n            ajax.beforeSend = () => {\n                this.beforeSend(ajax.httpRequest, ajax);\n            };\n            ajax.onSuccess = (data, request) => {\n                if (this.isGraphQLAdaptor(this.adaptor)) {\n                    if (!isNullOrUndefined(data['errors'])) {\n                        ajax.onFailure(JSON.stringify(data['errors']));\n                    }\n                }\n                deff.resolve(this.adaptor.processResponse(data, this, null, request.httpRequest, request, changes, args));\n            };\n            ajax.onFailure = (e) => {\n                deff.reject([{ error: e }]);\n            };\n            ajax.send().catch((e) => true); // to handle the failure requests.        \n            return deff.promise;\n        }\n        else {\n            return this.doAjaxRequest(req, this.adaptor.options.batchUpdate);\n        }\n    }\n    /**\n     * Inserts new record in the given table.\n     * @param  {Object} data - Defines the data to insert.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    insert(data, tableName, query, position) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let req = this.adaptor.insert(this, data, tableName, query, position);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](req);\n        }\n        else {\n            return this.doAjaxRequest(req, this.adaptor.options.addRecord);\n        }\n    }\n    /**\n     * Removes data from the table with the given key.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    remove(keyField, value, tableName, query) {\n        if (typeof value === 'object') {\n            value = DataUtil.getObject(keyField, value);\n        }\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let res = this.adaptor.remove(this, keyField, value, tableName, query);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](res);\n        }\n        else {\n            let remove = this.adaptor.options.deleteRecord;\n            return this.doAjaxRequest(res, remove);\n        }\n    }\n    /**\n     * Updates existing record in the given table.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    update(keyField, value, tableName, query, original) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let res = this.adaptor.update(this, keyField, value, tableName, query, original);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](res);\n        }\n        else {\n            let update = this.adaptor.options.updateRecord;\n            return this.doAjaxRequest(res, update);\n        }\n    }\n    isCustomDataAdaptor(dataSource) {\n        return this.adaptor.getModuleName &&\n            this.adaptor.getModuleName() === 'CustomDataAdaptor';\n    }\n    isGraphQLAdaptor(dataSource) {\n        return this.adaptor.getModuleName &&\n            this.adaptor.getModuleName() === 'GraphQLAdaptor';\n    }\n    successFunc(record, request) {\n        if (this.isGraphQLAdaptor(this.adaptor)) {\n            let data = JSON.parse(record);\n            if (!isNullOrUndefined(data['errors'])) {\n                this.failureFunc(JSON.stringify(data['errors']));\n            }\n        }\n        if (this.isCustomDataAdaptor(this.adaptor)) {\n            request = extend({}, this.ajaxReqOption, request);\n        }\n        try {\n            DataUtil.parse.parseJson(record);\n        }\n        catch (e) {\n            record = [];\n        }\n        record = this.adaptor.processResponse(DataUtil.parse.parseJson(record), this, null, request.httpRequest, request);\n        this.ajaxDeffered.resolve(record);\n    }\n    ;\n    failureFunc(e) {\n        this.ajaxDeffered.reject([{ error: e }]);\n    }\n    ;\n    doAjaxRequest(res, ajaxFunc) {\n        res = extend({}, {\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8',\n            processData: false\n        }, res);\n        this.ajaxDeffered = new Deferred();\n        if (!this.isCustomDataAdaptor(this.adaptor)) {\n            let ajax = new Ajax(res);\n            ajax.beforeSend = () => {\n                this.beforeSend(ajax.httpRequest, ajax);\n            };\n            ajax.onSuccess = this.successFunc.bind(this);\n            ajax.onFailure = this.failureFunc.bind(this);\n            ajax.send().catch((e) => true); // to handle the failure requests.\n        }\n        else {\n            this.ajaxReqOption = res;\n            ajaxFunc.call(this, {\n                data: res.data, onSuccess: this.successFunc.bind(this),\n                onFailure: this.failureFunc.bind(this)\n            });\n        }\n        return this.ajaxDeffered.promise;\n    }\n}\n/**\n * Deferred is used to handle asynchronous operation.\n */\nclass Deferred {\n    constructor() {\n        /**\n         * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n         */\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        /**\n         * Defines the callback function triggers when the Deferred object is resolved.\n         */\n        this.then = this.promise.then.bind(this.promise);\n        /**\n         * Defines the callback function triggers when the Deferred object is rejected.\n         */\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n}\n\n/**\n * Data modules\n */\n\nexport { DataManager, Deferred, Query, Predicate, Adaptor, JsonAdaptor, UrlAdaptor, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, WebMethodAdaptor, RemoteSaveAdaptor, CustomDataAdaptor, GraphQLAdaptor, CacheAdaptor, DataUtil };\n"],"mappings":"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;EAClB,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,IAAI;EACd,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,GAAG;EACb,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE,QAAQ;EAClB,QAAQ,EAAE;AAC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"},"metadata":{},"sourceType":"module"}