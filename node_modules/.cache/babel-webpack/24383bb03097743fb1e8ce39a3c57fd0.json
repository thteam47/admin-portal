{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { dataLoader } from \"./DataLoader\";\nimport { JSONParser } from \"./JSONParser\";\nimport { CSVParser } from \"./CSVParser\";\nimport { BaseObjectEvents } from \"../Base\";\nimport { Adapter } from \"../utils/Adapter\";\nimport { Language } from \"../utils/Language\";\nimport { DateFormatter } from \"../formatters/DateFormatter\";\nimport { registry } from \"../Registry\";\nimport * as $type from \"../utils/Type\";\nimport * as $object from \"../utils/Object\";\n;\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Represents a single data source - external file with all of its settings,\r\n * such as format, data parsing, etc.\r\n *\r\n * ```TypeScript\r\n * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n * chart.dataSource.parser = am4core.JSONParser;\r\n * ```\r\n * ```JavaScript\r\n * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n * chart.dataSource.parser = am4core.JSONParser;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"dataSource\": {\r\n *     \"url\": \"http://www.myweb.com/data.json\",\r\n *     \"parser\": \"JSONParser\"\r\n *   },\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * @see {@link IDataSourceEvents} for a list of available events\r\n * @see {@link IDataSourceAdapters} for a list of available Adapters\r\n */\nvar DataSource = /** @class */function (_super) {\n  __extends(DataSource, _super);\n  /**\r\n   * Constructor\r\n   */\n  function DataSource(url, parser) {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Adapter.\r\n     */\n    _this.adapter = new Adapter(_this);\n    /**\r\n     * Custom options for HTTP(S) request.\r\n     */\n    _this._requestOptions = {};\n    /**\r\n     * If set to `true`, any subsequent data loads will be considered incremental\r\n     * (containing only new data points that are supposed to be added to existing\r\n     * data).\r\n     *\r\n     * NOTE: this setting works only with element's `data` property. It won't\r\n     * work with any other externally-loadable data property.\r\n     *\r\n     * @default false\r\n     */\n    _this._incremental = false;\n    /**\r\n     * A collection of key/value pairs to attach to a data source URL when making\r\n     * an incremental request.\r\n     */\n    _this._incrementalParams = {};\n    /**\r\n     * This setting is used only when `incremental = true`. If set to `true`,\r\n     * it will try to retain the same number of data items across each load.\r\n     *\r\n     * E.g. if incremental load yeilded 5 new records, then 5 items from the\r\n     * beginning of data will be removed so that we end up with the same number\r\n     * of data items.\r\n     *\r\n     * @default false\r\n     */\n    _this._keepCount = false;\n    /**\r\n     * If set to `true`, each subsequent load will be treated as an update to\r\n     * currently loaded data, meaning that it will try to update values on\r\n     * existing data items, not overwrite the whole data.\r\n     *\r\n     * This will work faster than complete update, and also will animate the\r\n     * values to their new positions.\r\n     *\r\n     * Data sources across loads must contain the same number of data items.\r\n     *\r\n     * Loader will not truncate the data set if loaded data has fewer data items,\r\n     * and if it is longer, the excess data items will be ignored.\r\n     *\r\n     * @default false\r\n     * @since 4.5.5\r\n     */\n    _this._updateCurrentData = false;\n    /**\r\n     * Will show loading indicator when loading files.\r\n     */\n    _this.showPreloader = true;\n    _this.className = \"DataSource\";\n    // Set defaults\n    if (url) {\n      _this.url = url;\n    }\n    // Set parser\n    if (parser) {\n      if (typeof parser == \"string\") {\n        _this.parser = dataLoader.getParserByType(parser);\n      } else {\n        _this.parser = parser;\n      }\n    }\n    return _this;\n  }\n  /**\r\n   * Processes the loaded data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param data         Raw (unparsed) data\r\n   * @param contentType  Content type of the loaded data (optional)\r\n   */\n  DataSource.prototype.processData = function (data, contentType) {\n    // Parsing started\n    this.dispatchImmediately(\"parsestarted\");\n    // Check if parser is set\n    if (!this.parser) {\n      // Try to resolve from data\n      this.parser = dataLoader.getParserByData(data, contentType);\n      if (!this.parser) {\n        // We have a problem - nobody knows what to do with the data\n        // Raise error\n        if (this.events.isEnabled(\"parseerror\")) {\n          var event_1 = {\n            type: \"parseerror\",\n            message: this.language.translate(\"No parser available for file: %1\", null, this.url),\n            target: this\n          };\n          this.events.dispatchImmediately(\"parseerror\", event_1);\n        }\n        this.dispatchImmediately(\"parseended\");\n        return;\n      }\n    }\n    // Apply options adapters\n    this.parser.options = this.adapter.apply(\"parserOptions\", this.parser.options);\n    this.parser.options.dateFields = this.adapter.apply(\"dateFields\", this.parser.options.dateFields || []);\n    this.parser.options.numberFields = this.adapter.apply(\"numberFields\", this.parser.options.numberFields || []);\n    // Check if we need to pass in date formatter\n    if (this.parser.options.dateFields && !this.parser.options.dateFormatter) {\n      this.parser.options.dateFormatter = this.dateFormatter;\n    }\n    // Parse\n    this.data = this.adapter.apply(\"parsedData\", this.parser.parse(this.adapter.apply(\"unparsedData\", data)));\n    // Check for parsing errors\n    if (!$type.hasValue(this.data) && this.events.isEnabled(\"parseerror\")) {\n      var event_2 = {\n        type: \"parseerror\",\n        message: this.language.translate(\"Error parsing file: %1\", null, this.url),\n        target: this\n      };\n      this.events.dispatchImmediately(\"parseerror\", event_2);\n    }\n    // Wrap up\n    this.dispatchImmediately(\"parseended\");\n    if ($type.hasValue(this.data)) {\n      this.dispatchImmediately(\"done\", {\n        \"data\": this.data\n      });\n    }\n    // The component is responsible for updating its own data vtriggered via\n    // events.\n    // Update last data load\n    this.lastLoad = new Date();\n  };\n  Object.defineProperty(DataSource.prototype, \"url\", {\n    /**\r\n     * @return URL\r\n     */\n    get: function () {\n      // Get URL\n      var url = this.disableCache ? this.timestampUrl(this._url) : this._url;\n      // Add incremental params\n      if (this.incremental && this.component.data.length) {\n        url = this.addUrlParams(url, this.incrementalParams);\n      }\n      return this.adapter.apply(\"url\", url);\n    },\n    /**\r\n     * URL of the data source.\r\n     *\r\n     * @param value  URL\r\n     */\n    set: function (value) {\n      this._url = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"requestOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      return this.adapter.apply(\"requestOptions\", this._requestOptions);\n    },\n    /**\r\n     * Custom options for HTTP(S) request.\r\n     *\r\n     * At this moment the only option supported is: `requestHeaders`, which holds\r\n     * an array of objects for custom request headers, e.g.:\r\n     *\r\n     * ```TypeScript\r\n     * chart.dataSource.requestOptions.requestHeaders = [{\r\n     *   \"key\": \"x-access-token\",\r\n     *   \"value\": \"123456789\"\r\n     * }];\r\n     * ``````JavaScript\r\n     * chart.dataSource.requestOptions.requestHeaders = [{\r\n     *   \"key\": \"x-access-token\",\r\n     *   \"value\": \"123456789\"\r\n     * }];\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"dataSource\": {\r\n     *     // ...\r\n     *     \"requestOptions\": {\r\n     *       \"requestHeaders\": [{\r\n     *         \"key\": \"x-access-token\",\r\n     *         \"value\": \"123456789\"\r\n     *       }]\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * NOTE: setting this options on an-already loaded DataSource will not\r\n     * trigger a reload.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._requestOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"parser\", {\n    /**\r\n     * @return Data parser\r\n     */\n    get: function () {\n      if (!this._parser) {\n        this._parser = new JSONParser();\n      }\n      return this.adapter.apply(\"parser\", this._parser);\n    },\n    /**\r\n     * A parser to be used to parse data.\r\n     *\r\n     * ```TypeScript\r\n     * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n     * chart.dataSource.parser = am4core.JSONParser;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n     * chart.dataSource.parser = am4core.JSONParser;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"dataSource\": {\r\n     *     \"url\": \"http://www.myweb.com/data.json\",\r\n     *     \"parser\": {\r\n     *       \"type\": \"JSONParser\"\r\n     *     }\r\n     *   },\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @default JSONParser\r\n     * @param value  Data parser\r\n     */\n    set: function (value) {\n      this._parser = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"reloadFrequency\", {\n    /**\r\n     * @return Reload frequency (ms)\r\n     */\n    get: function () {\n      return this.adapter.apply(\"reloadTimeout\", this._reloadFrequency);\n    },\n    /**\r\n     * Data source reload frequency.\r\n     *\r\n     * If set, it will reload the same URL every X milliseconds.\r\n     *\r\n     * @param value Reload frequency (ms)\r\n     */\n    set: function (value) {\n      var _this = this;\n      if (this._reloadFrequency != value) {\n        this._reloadFrequency = value;\n        // Should we schedule a reload?\n        if (value) {\n          if (!$type.hasValue(this._reloadDisposer)) {\n            this._reloadDisposer = this.events.on(\"ended\", function (ev) {\n              _this._reloadTimeout = setTimeout(function () {\n                _this.load();\n              }, _this.reloadFrequency);\n            });\n          }\n        } else if ($type.hasValue(this._reloadDisposer)) {\n          this._reloadDisposer.dispose();\n          this._reloadDisposer = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"incremental\", {\n    /**\r\n     * @return Incremental load?\r\n     */\n    get: function () {\n      return this.adapter.apply(\"incremental\", this._incremental);\n    },\n    /**\r\n     * Should subsequent reloads be treated as incremental?\r\n     *\r\n     * Incremental loads will assume that they contain only new data items\r\n     * since the last load.\r\n     *\r\n     * If `incremental = false` the loader will replace all of the target's\r\n     * data with each load.\r\n     *\r\n     * This setting does not have any effect trhe first time data is loaded.\r\n     *\r\n     * NOTE: this setting works only with element's `data` property. It won't\r\n     * work with any other externally-loadable data property.\r\n     *\r\n     * @default false\r\n     * @param Incremental load?\r\n     */\n    set: function (value) {\n      this._incremental = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"incrementalParams\", {\n    /**\r\n     * @return Incremental request parameters\r\n     */\n    get: function () {\n      return this.adapter.apply(\"incrementalParams\", this._incrementalParams);\n    },\n    /**\r\n     * An object consisting of key/value pairs to apply to an URL when data\r\n     * source is making an incremental request.\r\n     *\r\n     * @param value  Incremental request parameters\r\n     */\n    set: function (value) {\n      this._incrementalParams = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"keepCount\", {\n    /**\r\n     * @return keepCount load?\r\n     */\n    get: function () {\n      return this.adapter.apply(\"keepCount\", this._keepCount);\n    },\n    /**\r\n     * This setting is used only when `incremental = true`. If set to `true`,\r\n     * it will try to retain the same number of data items across each load.\r\n     *\r\n     * E.g. if incremental load yeilded 5 new records, then 5 items from the\r\n     * beginning of data will be removed so that we end up with the same number\r\n     * of data items.\r\n     *\r\n     * @default false\r\n     * @param Keep record count?\r\n     */\n    set: function (value) {\n      this._keepCount = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"updateCurrentData\", {\n    /**\r\n     * @return Update current data?\r\n     */\n    get: function () {\n      return this.adapter.apply(\"updateCurrentData\", this._updateCurrentData);\n    },\n    /**\r\n     * If set to `true`, each subsequent load will be treated as an update to\r\n     * currently loaded data, meaning that it will try to update values on\r\n     * existing data items, not overwrite the whole data.\r\n     *\r\n     * This will work faster than complete update, and also will animate the\r\n     * values to their new positions.\r\n     *\r\n     * Data sources across loads must contain the same number of data items.\r\n     *\r\n     * Loader will not truncate the data set if loaded data has fewer data items,\r\n     * and if it is longer, the excess data items will be ignored.\r\n     *\r\n     * NOTE: this setting is ignored if `incremental = true`.\r\n     *\r\n     * @default false\r\n     * @since 2.5.5\r\n     * @param Update current data?\r\n     */\n    set: function (value) {\n      this._updateCurrentData = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"language\", {\n    /**\r\n     * @return A [[Language]] instance to be used\r\n     */\n    get: function () {\n      if (this._language) {\n        return this._language;\n      } else if (this.component) {\n        this._language = this.component.language;\n        return this._language;\n      }\n      this.language = new Language();\n      return this.language;\n    },\n    /**\r\n     * Language instance to use.\r\n     *\r\n     * Will inherit and use chart's language, if not set.\r\n     *\r\n     * @param value An instance of Language\r\n     */\n    set: function (value) {\n      this._language = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"dateFormatter\", {\n    /**\r\n     * @return A [[DateFormatter]] instance to be used\r\n     */\n    get: function () {\n      if (this._dateFormatter) {\n        return this._dateFormatter;\n      } else if (this.component) {\n        this._dateFormatter = this.component.dateFormatter;\n        return this._dateFormatter;\n      }\n      this.dateFormatter = new DateFormatter();\n      return this.dateFormatter;\n    },\n    /**\r\n     * A [[DateFormatter]] to use when parsing dates from string formats.\r\n     *\r\n     * Will inherit and use chart's DateFormatter if not ser.\r\n     *\r\n     * @param value An instance of [[DateFormatter]]\r\n     */\n    set: function (value) {\n      this._dateFormatter = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds current timestamp to the URL.\r\n   *\r\n   * @param url  Source URL\r\n   * @return Timestamped URL\r\n   */\n  DataSource.prototype.timestampUrl = function (url) {\n    var tstamp = new Date().getTime().toString();\n    var params = {};\n    params[tstamp] = \"\";\n    return this.addUrlParams(url, params);\n  };\n  /**\r\n   * Disposes of this object.\r\n   */\n  DataSource.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n    if (this._reloadTimeout) {\n      clearTimeout(this._reloadTimeout);\n    }\n    if ($type.hasValue(this._reloadDisposer)) {\n      this._reloadDisposer.dispose();\n      this._reloadDisposer = undefined;\n    }\n  };\n  /**\r\n   * Initiate the load.\r\n   *\r\n   * All loading in JavaScript is asynchronous. This function will trigger the\r\n   * load and will exit immediately.\r\n   *\r\n   * Use DataSource's events to watch for loaded data and errors.\r\n   */\n  DataSource.prototype.load = function () {\n    if (this.url) {\n      if (this._reloadTimeout) {\n        clearTimeout(this._reloadTimeout);\n      }\n      dataLoader.load(this);\n    }\n  };\n  /**\r\n   * Adds parameters to `url` as query strings. Will take care of proper\r\n   * separators.\r\n   *\r\n   * @param url     Source URL\r\n   * @param params  Parameters\r\n   * @return New URL\r\n   */\n  DataSource.prototype.addUrlParams = function (url, params) {\n    var join = url.match(/\\?/) ? \"&\" : \"?\";\n    var add = [];\n    $object.each(params, function (key, value) {\n      if (value != \"\") {\n        add.push(key + \"=\" + encodeURIComponent(value));\n      } else {\n        add.push(key);\n      }\n    });\n    if (add.length) {\n      return url + join + add.join(\"&\");\n    }\n    return url;\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  DataSource.prototype.processConfig = function (config) {\n    registry.registeredClasses[\"json\"] = JSONParser;\n    registry.registeredClasses[\"JSONParser\"] = JSONParser;\n    registry.registeredClasses[\"csv\"] = CSVParser;\n    registry.registeredClasses[\"CSVParser\"] = CSVParser;\n    _super.prototype.processConfig.call(this, config);\n  };\n  return DataSource;\n}(BaseObjectEvents);\nexport { DataSource };","map":{"version":3,"names":["__extends","dataLoader","JSONParser","CSVParser","BaseObjectEvents","Adapter","Language","DateFormatter","registry","$type","$object","DataSource","_super","url","parser","_this","call","adapter","_requestOptions","_incremental","_incrementalParams","_keepCount","_updateCurrentData","showPreloader","className","getParserByType","prototype","processData","data","contentType","dispatchImmediately","getParserByData","events","isEnabled","event_1","type","message","language","translate","target","options","apply","dateFields","numberFields","dateFormatter","parse","hasValue","event_2","lastLoad","Date","Object","defineProperty","get","disableCache","timestampUrl","_url","incremental","component","length","addUrlParams","incrementalParams","set","value","enumerable","configurable","_parser","_reloadFrequency","_reloadDisposer","on","ev","_reloadTimeout","setTimeout","load","reloadFrequency","dispose","undefined","_language","_dateFormatter","tstamp","getTime","toString","params","clearTimeout","join","match","add","each","key","push","encodeURIComponent","processConfig","config","registeredClasses"],"sources":["/home/unutu/go/src/github.com/thteam47/admin-portal/node_modules/@amcharts/amcharts4/.internal/core/data/DataSource.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { dataLoader } from \"./DataLoader\";\r\nimport { JSONParser } from \"./JSONParser\";\r\nimport { CSVParser } from \"./CSVParser\";\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { DateFormatter } from \"../formatters/DateFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $object from \"../utils/Object\";\r\n;\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents a single data source - external file with all of its settings,\r\n * such as format, data parsing, etc.\r\n *\r\n * ```TypeScript\r\n * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n * chart.dataSource.parser = am4core.JSONParser;\r\n * ```\r\n * ```JavaScript\r\n * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n * chart.dataSource.parser = am4core.JSONParser;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"dataSource\": {\r\n *     \"url\": \"http://www.myweb.com/data.json\",\r\n *     \"parser\": \"JSONParser\"\r\n *   },\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * @see {@link IDataSourceEvents} for a list of available events\r\n * @see {@link IDataSourceAdapters} for a list of available Adapters\r\n */\r\nvar DataSource = /** @class */ (function (_super) {\r\n    __extends(DataSource, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DataSource(url, parser) {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Adapter.\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        /**\r\n         * Custom options for HTTP(S) request.\r\n         */\r\n        _this._requestOptions = {};\r\n        /**\r\n         * If set to `true`, any subsequent data loads will be considered incremental\r\n         * (containing only new data points that are supposed to be added to existing\r\n         * data).\r\n         *\r\n         * NOTE: this setting works only with element's `data` property. It won't\r\n         * work with any other externally-loadable data property.\r\n         *\r\n         * @default false\r\n         */\r\n        _this._incremental = false;\r\n        /**\r\n         * A collection of key/value pairs to attach to a data source URL when making\r\n         * an incremental request.\r\n         */\r\n        _this._incrementalParams = {};\r\n        /**\r\n         * This setting is used only when `incremental = true`. If set to `true`,\r\n         * it will try to retain the same number of data items across each load.\r\n         *\r\n         * E.g. if incremental load yeilded 5 new records, then 5 items from the\r\n         * beginning of data will be removed so that we end up with the same number\r\n         * of data items.\r\n         *\r\n         * @default false\r\n         */\r\n        _this._keepCount = false;\r\n        /**\r\n         * If set to `true`, each subsequent load will be treated as an update to\r\n         * currently loaded data, meaning that it will try to update values on\r\n         * existing data items, not overwrite the whole data.\r\n         *\r\n         * This will work faster than complete update, and also will animate the\r\n         * values to their new positions.\r\n         *\r\n         * Data sources across loads must contain the same number of data items.\r\n         *\r\n         * Loader will not truncate the data set if loaded data has fewer data items,\r\n         * and if it is longer, the excess data items will be ignored.\r\n         *\r\n         * @default false\r\n         * @since 4.5.5\r\n         */\r\n        _this._updateCurrentData = false;\r\n        /**\r\n         * Will show loading indicator when loading files.\r\n         */\r\n        _this.showPreloader = true;\r\n        _this.className = \"DataSource\";\r\n        // Set defaults\r\n        if (url) {\r\n            _this.url = url;\r\n        }\r\n        // Set parser\r\n        if (parser) {\r\n            if (typeof parser == \"string\") {\r\n                _this.parser = dataLoader.getParserByType(parser);\r\n            }\r\n            else {\r\n                _this.parser = parser;\r\n            }\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Processes the loaded data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param data         Raw (unparsed) data\r\n     * @param contentType  Content type of the loaded data (optional)\r\n     */\r\n    DataSource.prototype.processData = function (data, contentType) {\r\n        // Parsing started\r\n        this.dispatchImmediately(\"parsestarted\");\r\n        // Check if parser is set\r\n        if (!this.parser) {\r\n            // Try to resolve from data\r\n            this.parser = dataLoader.getParserByData(data, contentType);\r\n            if (!this.parser) {\r\n                // We have a problem - nobody knows what to do with the data\r\n                // Raise error\r\n                if (this.events.isEnabled(\"parseerror\")) {\r\n                    var event_1 = {\r\n                        type: \"parseerror\",\r\n                        message: this.language.translate(\"No parser available for file: %1\", null, this.url),\r\n                        target: this\r\n                    };\r\n                    this.events.dispatchImmediately(\"parseerror\", event_1);\r\n                }\r\n                this.dispatchImmediately(\"parseended\");\r\n                return;\r\n            }\r\n        }\r\n        // Apply options adapters\r\n        this.parser.options = this.adapter.apply(\"parserOptions\", this.parser.options);\r\n        this.parser.options.dateFields = this.adapter.apply(\"dateFields\", this.parser.options.dateFields || []);\r\n        this.parser.options.numberFields = this.adapter.apply(\"numberFields\", this.parser.options.numberFields || []);\r\n        // Check if we need to pass in date formatter\r\n        if (this.parser.options.dateFields && !this.parser.options.dateFormatter) {\r\n            this.parser.options.dateFormatter = this.dateFormatter;\r\n        }\r\n        // Parse\r\n        this.data = this.adapter.apply(\"parsedData\", this.parser.parse(this.adapter.apply(\"unparsedData\", data)));\r\n        // Check for parsing errors\r\n        if (!$type.hasValue(this.data) && this.events.isEnabled(\"parseerror\")) {\r\n            var event_2 = {\r\n                type: \"parseerror\",\r\n                message: this.language.translate(\"Error parsing file: %1\", null, this.url),\r\n                target: this\r\n            };\r\n            this.events.dispatchImmediately(\"parseerror\", event_2);\r\n        }\r\n        // Wrap up\r\n        this.dispatchImmediately(\"parseended\");\r\n        if ($type.hasValue(this.data)) {\r\n            this.dispatchImmediately(\"done\", {\r\n                \"data\": this.data\r\n            });\r\n        }\r\n        // The component is responsible for updating its own data vtriggered via\r\n        // events.\r\n        // Update last data load\r\n        this.lastLoad = new Date();\r\n    };\r\n    Object.defineProperty(DataSource.prototype, \"url\", {\r\n        /**\r\n         * @return URL\r\n         */\r\n        get: function () {\r\n            // Get URL\r\n            var url = this.disableCache\r\n                ? this.timestampUrl(this._url)\r\n                : this._url;\r\n            // Add incremental params\r\n            if (this.incremental && this.component.data.length) {\r\n                url = this.addUrlParams(url, this.incrementalParams);\r\n            }\r\n            return this.adapter.apply(\"url\", url);\r\n        },\r\n        /**\r\n         * URL of the data source.\r\n         *\r\n         * @param value  URL\r\n         */\r\n        set: function (value) {\r\n            this._url = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"requestOptions\", {\r\n        /**\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"requestOptions\", this._requestOptions);\r\n        },\r\n        /**\r\n         * Custom options for HTTP(S) request.\r\n         *\r\n         * At this moment the only option supported is: `requestHeaders`, which holds\r\n         * an array of objects for custom request headers, e.g.:\r\n         *\r\n         * ```TypeScript\r\n         * chart.dataSource.requestOptions.requestHeaders = [{\r\n         *   \"key\": \"x-access-token\",\r\n         *   \"value\": \"123456789\"\r\n         * }];\r\n         * ``````JavaScript\r\n         * chart.dataSource.requestOptions.requestHeaders = [{\r\n         *   \"key\": \"x-access-token\",\r\n         *   \"value\": \"123456789\"\r\n         * }];\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"dataSource\": {\r\n         *     // ...\r\n         *     \"requestOptions\": {\r\n         *       \"requestHeaders\": [{\r\n         *         \"key\": \"x-access-token\",\r\n         *         \"value\": \"123456789\"\r\n         *       }]\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * NOTE: setting this options on an-already loaded DataSource will not\r\n         * trigger a reload.\r\n         *\r\n         * @param value  Options\r\n         */\r\n        set: function (value) {\r\n            this._requestOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"parser\", {\r\n        /**\r\n         * @return Data parser\r\n         */\r\n        get: function () {\r\n            if (!this._parser) {\r\n                this._parser = new JSONParser();\r\n            }\r\n            return this.adapter.apply(\"parser\", this._parser);\r\n        },\r\n        /**\r\n         * A parser to be used to parse data.\r\n         *\r\n         * ```TypeScript\r\n         * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n         * chart.dataSource.parser = am4core.JSONParser;\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n         * chart.dataSource.parser = am4core.JSONParser;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"dataSource\": {\r\n         *     \"url\": \"http://www.myweb.com/data.json\",\r\n         *     \"parser\": {\r\n         *       \"type\": \"JSONParser\"\r\n         *     }\r\n         *   },\r\n         *   // ...\r\n         * }\r\n         * ```\r\n         *\r\n         * @default JSONParser\r\n         * @param value  Data parser\r\n         */\r\n        set: function (value) {\r\n            this._parser = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"reloadFrequency\", {\r\n        /**\r\n         * @return Reload frequency (ms)\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"reloadTimeout\", this._reloadFrequency);\r\n        },\r\n        /**\r\n         * Data source reload frequency.\r\n         *\r\n         * If set, it will reload the same URL every X milliseconds.\r\n         *\r\n         * @param value Reload frequency (ms)\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            if (this._reloadFrequency != value) {\r\n                this._reloadFrequency = value;\r\n                // Should we schedule a reload?\r\n                if (value) {\r\n                    if (!$type.hasValue(this._reloadDisposer)) {\r\n                        this._reloadDisposer = this.events.on(\"ended\", function (ev) {\r\n                            _this._reloadTimeout = setTimeout(function () {\r\n                                _this.load();\r\n                            }, _this.reloadFrequency);\r\n                        });\r\n                    }\r\n                }\r\n                else if ($type.hasValue(this._reloadDisposer)) {\r\n                    this._reloadDisposer.dispose();\r\n                    this._reloadDisposer = undefined;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"incremental\", {\r\n        /**\r\n         * @return Incremental load?\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"incremental\", this._incremental);\r\n        },\r\n        /**\r\n         * Should subsequent reloads be treated as incremental?\r\n         *\r\n         * Incremental loads will assume that they contain only new data items\r\n         * since the last load.\r\n         *\r\n         * If `incremental = false` the loader will replace all of the target's\r\n         * data with each load.\r\n         *\r\n         * This setting does not have any effect trhe first time data is loaded.\r\n         *\r\n         * NOTE: this setting works only with element's `data` property. It won't\r\n         * work with any other externally-loadable data property.\r\n         *\r\n         * @default false\r\n         * @param Incremental load?\r\n         */\r\n        set: function (value) {\r\n            this._incremental = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"incrementalParams\", {\r\n        /**\r\n         * @return Incremental request parameters\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"incrementalParams\", this._incrementalParams);\r\n        },\r\n        /**\r\n         * An object consisting of key/value pairs to apply to an URL when data\r\n         * source is making an incremental request.\r\n         *\r\n         * @param value  Incremental request parameters\r\n         */\r\n        set: function (value) {\r\n            this._incrementalParams = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"keepCount\", {\r\n        /**\r\n         * @return keepCount load?\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"keepCount\", this._keepCount);\r\n        },\r\n        /**\r\n         * This setting is used only when `incremental = true`. If set to `true`,\r\n         * it will try to retain the same number of data items across each load.\r\n         *\r\n         * E.g. if incremental load yeilded 5 new records, then 5 items from the\r\n         * beginning of data will be removed so that we end up with the same number\r\n         * of data items.\r\n         *\r\n         * @default false\r\n         * @param Keep record count?\r\n         */\r\n        set: function (value) {\r\n            this._keepCount = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"updateCurrentData\", {\r\n        /**\r\n         * @return Update current data?\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"updateCurrentData\", this._updateCurrentData);\r\n        },\r\n        /**\r\n         * If set to `true`, each subsequent load will be treated as an update to\r\n         * currently loaded data, meaning that it will try to update values on\r\n         * existing data items, not overwrite the whole data.\r\n         *\r\n         * This will work faster than complete update, and also will animate the\r\n         * values to their new positions.\r\n         *\r\n         * Data sources across loads must contain the same number of data items.\r\n         *\r\n         * Loader will not truncate the data set if loaded data has fewer data items,\r\n         * and if it is longer, the excess data items will be ignored.\r\n         *\r\n         * NOTE: this setting is ignored if `incremental = true`.\r\n         *\r\n         * @default false\r\n         * @since 2.5.5\r\n         * @param Update current data?\r\n         */\r\n        set: function (value) {\r\n            this._updateCurrentData = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"language\", {\r\n        /**\r\n         * @return A [[Language]] instance to be used\r\n         */\r\n        get: function () {\r\n            if (this._language) {\r\n                return this._language;\r\n            }\r\n            else if (this.component) {\r\n                this._language = this.component.language;\r\n                return this._language;\r\n            }\r\n            this.language = new Language();\r\n            return this.language;\r\n        },\r\n        /**\r\n         * Language instance to use.\r\n         *\r\n         * Will inherit and use chart's language, if not set.\r\n         *\r\n         * @param value An instance of Language\r\n         */\r\n        set: function (value) {\r\n            this._language = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"dateFormatter\", {\r\n        /**\r\n         * @return A [[DateFormatter]] instance to be used\r\n         */\r\n        get: function () {\r\n            if (this._dateFormatter) {\r\n                return this._dateFormatter;\r\n            }\r\n            else if (this.component) {\r\n                this._dateFormatter = this.component.dateFormatter;\r\n                return this._dateFormatter;\r\n            }\r\n            this.dateFormatter = new DateFormatter();\r\n            return this.dateFormatter;\r\n        },\r\n        /**\r\n         * A [[DateFormatter]] to use when parsing dates from string formats.\r\n         *\r\n         * Will inherit and use chart's DateFormatter if not ser.\r\n         *\r\n         * @param value An instance of [[DateFormatter]]\r\n         */\r\n        set: function (value) {\r\n            this._dateFormatter = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adds current timestamp to the URL.\r\n     *\r\n     * @param url  Source URL\r\n     * @return Timestamped URL\r\n     */\r\n    DataSource.prototype.timestampUrl = function (url) {\r\n        var tstamp = new Date().getTime().toString();\r\n        var params = {};\r\n        params[tstamp] = \"\";\r\n        return this.addUrlParams(url, params);\r\n    };\r\n    /**\r\n     * Disposes of this object.\r\n     */\r\n    DataSource.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        if (this._reloadTimeout) {\r\n            clearTimeout(this._reloadTimeout);\r\n        }\r\n        if ($type.hasValue(this._reloadDisposer)) {\r\n            this._reloadDisposer.dispose();\r\n            this._reloadDisposer = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Initiate the load.\r\n     *\r\n     * All loading in JavaScript is asynchronous. This function will trigger the\r\n     * load and will exit immediately.\r\n     *\r\n     * Use DataSource's events to watch for loaded data and errors.\r\n     */\r\n    DataSource.prototype.load = function () {\r\n        if (this.url) {\r\n            if (this._reloadTimeout) {\r\n                clearTimeout(this._reloadTimeout);\r\n            }\r\n            dataLoader.load(this);\r\n        }\r\n    };\r\n    /**\r\n     * Adds parameters to `url` as query strings. Will take care of proper\r\n     * separators.\r\n     *\r\n     * @param url     Source URL\r\n     * @param params  Parameters\r\n     * @return New URL\r\n     */\r\n    DataSource.prototype.addUrlParams = function (url, params) {\r\n        var join = url.match(/\\?/) ? \"&\" : \"?\";\r\n        var add = [];\r\n        $object.each(params, function (key, value) {\r\n            if (value != \"\") {\r\n                add.push(key + \"=\" + encodeURIComponent(value));\r\n            }\r\n            else {\r\n                add.push(key);\r\n            }\r\n        });\r\n        if (add.length) {\r\n            return url + join + add.join(\"&\");\r\n        }\r\n        return url;\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    DataSource.prototype.processConfig = function (config) {\r\n        registry.registeredClasses[\"json\"] = JSONParser;\r\n        registry.registeredClasses[\"JSONParser\"] = JSONParser;\r\n        registry.registeredClasses[\"csv\"] = CSVParser;\r\n        registry.registeredClasses[\"CSVParser\"] = CSVParser;\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return DataSource;\r\n}(BaseObjectEvents));\r\nexport { DataSource };\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,gBAAgB,QAAQ,SAAS;AAC1C,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAO,KAAKC,KAAK,MAAM,eAAe;AACtC,OAAO,KAAKC,OAAO,MAAM,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC9CZ,SAAS,CAACW,UAAU,EAAEC,MAAM,CAAC;EAC7B;AACJ;AACA;EACI,SAASD,UAAUA,CAACE,GAAG,EAAEC,MAAM,EAAE;IAC7B,IAAIC,KAAK;IACT;IACAH,MAAM,CAACI,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACzB;AACR;AACA;IACQD,KAAK,CAACE,OAAO,GAAG,IAAIZ,OAAO,CAACU,KAAK,CAAC;IAClC;AACR;AACA;IACQA,KAAK,CAACG,eAAe,GAAG,CAAC,CAAC;IAC1B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQH,KAAK,CAACI,YAAY,GAAG,KAAK;IAC1B;AACR;AACA;AACA;IACQJ,KAAK,CAACK,kBAAkB,GAAG,CAAC,CAAC;IAC7B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQL,KAAK,CAACM,UAAU,GAAG,KAAK;IACxB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQN,KAAK,CAACO,kBAAkB,GAAG,KAAK;IAChC;AACR;AACA;IACQP,KAAK,CAACQ,aAAa,GAAG,IAAI;IAC1BR,KAAK,CAACS,SAAS,GAAG,YAAY;IAC9B;IACA,IAAIX,GAAG,EAAE;MACLE,KAAK,CAACF,GAAG,GAAGA,GAAG;IACnB;IACA;IACA,IAAIC,MAAM,EAAE;MACR,IAAI,OAAOA,MAAM,IAAI,QAAQ,EAAE;QAC3BC,KAAK,CAACD,MAAM,GAAGb,UAAU,CAACwB,eAAe,CAACX,MAAM,CAAC;MACrD,CAAC,MACI;QACDC,KAAK,CAACD,MAAM,GAAGA,MAAM;MACzB;IACJ;IACA,OAAOC,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIJ,UAAU,CAACe,SAAS,CAACC,WAAW,GAAG,UAAUC,IAAI,EAAEC,WAAW,EAAE;IAC5D;IACA,IAAI,CAACC,mBAAmB,CAAC,cAAc,CAAC;IACxC;IACA,IAAI,CAAC,IAAI,CAAChB,MAAM,EAAE;MACd;MACA,IAAI,CAACA,MAAM,GAAGb,UAAU,CAAC8B,eAAe,CAACH,IAAI,EAAEC,WAAW,CAAC;MAC3D,IAAI,CAAC,IAAI,CAACf,MAAM,EAAE;QACd;QACA;QACA,IAAI,IAAI,CAACkB,MAAM,CAACC,SAAS,CAAC,YAAY,CAAC,EAAE;UACrC,IAAIC,OAAO,GAAG;YACVC,IAAI,EAAE,YAAY;YAClBC,OAAO,EAAE,IAAI,CAACC,QAAQ,CAACC,SAAS,CAAC,kCAAkC,EAAE,IAAI,EAAE,IAAI,CAACzB,GAAG,CAAC;YACpF0B,MAAM,EAAE;UACZ,CAAC;UACD,IAAI,CAACP,MAAM,CAACF,mBAAmB,CAAC,YAAY,EAAEI,OAAO,CAAC;QAC1D;QACA,IAAI,CAACJ,mBAAmB,CAAC,YAAY,CAAC;QACtC;MACJ;IACJ;IACA;IACA,IAAI,CAAChB,MAAM,CAAC0B,OAAO,GAAG,IAAI,CAACvB,OAAO,CAACwB,KAAK,CAAC,eAAe,EAAE,IAAI,CAAC3B,MAAM,CAAC0B,OAAO,CAAC;IAC9E,IAAI,CAAC1B,MAAM,CAAC0B,OAAO,CAACE,UAAU,GAAG,IAAI,CAACzB,OAAO,CAACwB,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC3B,MAAM,CAAC0B,OAAO,CAACE,UAAU,IAAI,EAAE,CAAC;IACvG,IAAI,CAAC5B,MAAM,CAAC0B,OAAO,CAACG,YAAY,GAAG,IAAI,CAAC1B,OAAO,CAACwB,KAAK,CAAC,cAAc,EAAE,IAAI,CAAC3B,MAAM,CAAC0B,OAAO,CAACG,YAAY,IAAI,EAAE,CAAC;IAC7G;IACA,IAAI,IAAI,CAAC7B,MAAM,CAAC0B,OAAO,CAACE,UAAU,IAAI,CAAC,IAAI,CAAC5B,MAAM,CAAC0B,OAAO,CAACI,aAAa,EAAE;MACtE,IAAI,CAAC9B,MAAM,CAAC0B,OAAO,CAACI,aAAa,GAAG,IAAI,CAACA,aAAa;IAC1D;IACA;IACA,IAAI,CAAChB,IAAI,GAAG,IAAI,CAACX,OAAO,CAACwB,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC3B,MAAM,CAAC+B,KAAK,CAAC,IAAI,CAAC5B,OAAO,CAACwB,KAAK,CAAC,cAAc,EAAEb,IAAI,CAAC,CAAC,CAAC;IACzG;IACA,IAAI,CAACnB,KAAK,CAACqC,QAAQ,CAAC,IAAI,CAAClB,IAAI,CAAC,IAAI,IAAI,CAACI,MAAM,CAACC,SAAS,CAAC,YAAY,CAAC,EAAE;MACnE,IAAIc,OAAO,GAAG;QACVZ,IAAI,EAAE,YAAY;QAClBC,OAAO,EAAE,IAAI,CAACC,QAAQ,CAACC,SAAS,CAAC,wBAAwB,EAAE,IAAI,EAAE,IAAI,CAACzB,GAAG,CAAC;QAC1E0B,MAAM,EAAE;MACZ,CAAC;MACD,IAAI,CAACP,MAAM,CAACF,mBAAmB,CAAC,YAAY,EAAEiB,OAAO,CAAC;IAC1D;IACA;IACA,IAAI,CAACjB,mBAAmB,CAAC,YAAY,CAAC;IACtC,IAAIrB,KAAK,CAACqC,QAAQ,CAAC,IAAI,CAAClB,IAAI,CAAC,EAAE;MAC3B,IAAI,CAACE,mBAAmB,CAAC,MAAM,EAAE;QAC7B,MAAM,EAAE,IAAI,CAACF;MACjB,CAAC,CAAC;IACN;IACA;IACA;IACA;IACA,IAAI,CAACoB,QAAQ,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC9B,CAAC;EACDC,MAAM,CAACC,cAAc,CAACxC,UAAU,CAACe,SAAS,EAAE,KAAK,EAAE;IAC/C;AACR;AACA;IACQ0B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb;MACA,IAAIvC,GAAG,GAAG,IAAI,CAACwC,YAAY,GACrB,IAAI,CAACC,YAAY,CAAC,IAAI,CAACC,IAAI,CAAC,GAC5B,IAAI,CAACA,IAAI;MACf;MACA,IAAI,IAAI,CAACC,WAAW,IAAI,IAAI,CAACC,SAAS,CAAC7B,IAAI,CAAC8B,MAAM,EAAE;QAChD7C,GAAG,GAAG,IAAI,CAAC8C,YAAY,CAAC9C,GAAG,EAAE,IAAI,CAAC+C,iBAAiB,CAAC;MACxD;MACA,OAAO,IAAI,CAAC3C,OAAO,CAACwB,KAAK,CAAC,KAAK,EAAE5B,GAAG,CAAC;IACzC,CAAC;IACD;AACR;AACA;AACA;AACA;IACQgD,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACP,IAAI,GAAGO,KAAK;IACrB,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFd,MAAM,CAACC,cAAc,CAACxC,UAAU,CAACe,SAAS,EAAE,gBAAgB,EAAE;IAC1D;AACR;AACA;IACQ0B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACnC,OAAO,CAACwB,KAAK,CAAC,gBAAgB,EAAE,IAAI,CAACvB,eAAe,CAAC;IACrE,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ2C,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAAC5C,eAAe,GAAG4C,KAAK;IAChC,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFd,MAAM,CAACC,cAAc,CAACxC,UAAU,CAACe,SAAS,EAAE,QAAQ,EAAE;IAClD;AACR;AACA;IACQ0B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,CAAC,IAAI,CAACa,OAAO,EAAE;QACf,IAAI,CAACA,OAAO,GAAG,IAAI/D,UAAU,CAAC,CAAC;MACnC;MACA,OAAO,IAAI,CAACe,OAAO,CAACwB,KAAK,CAAC,QAAQ,EAAE,IAAI,CAACwB,OAAO,CAAC;IACrD,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQJ,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACG,OAAO,GAAGH,KAAK;IACxB,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFd,MAAM,CAACC,cAAc,CAACxC,UAAU,CAACe,SAAS,EAAE,iBAAiB,EAAE;IAC3D;AACR;AACA;IACQ0B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACnC,OAAO,CAACwB,KAAK,CAAC,eAAe,EAAE,IAAI,CAACyB,gBAAgB,CAAC;IACrE,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;IACQL,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI/C,KAAK,GAAG,IAAI;MAChB,IAAI,IAAI,CAACmD,gBAAgB,IAAIJ,KAAK,EAAE;QAChC,IAAI,CAACI,gBAAgB,GAAGJ,KAAK;QAC7B;QACA,IAAIA,KAAK,EAAE;UACP,IAAI,CAACrD,KAAK,CAACqC,QAAQ,CAAC,IAAI,CAACqB,eAAe,CAAC,EAAE;YACvC,IAAI,CAACA,eAAe,GAAG,IAAI,CAACnC,MAAM,CAACoC,EAAE,CAAC,OAAO,EAAE,UAAUC,EAAE,EAAE;cACzDtD,KAAK,CAACuD,cAAc,GAAGC,UAAU,CAAC,YAAY;gBAC1CxD,KAAK,CAACyD,IAAI,CAAC,CAAC;cAChB,CAAC,EAAEzD,KAAK,CAAC0D,eAAe,CAAC;YAC7B,CAAC,CAAC;UACN;QACJ,CAAC,MACI,IAAIhE,KAAK,CAACqC,QAAQ,CAAC,IAAI,CAACqB,eAAe,CAAC,EAAE;UAC3C,IAAI,CAACA,eAAe,CAACO,OAAO,CAAC,CAAC;UAC9B,IAAI,CAACP,eAAe,GAAGQ,SAAS;QACpC;MACJ;IACJ,CAAC;IACDZ,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFd,MAAM,CAACC,cAAc,CAACxC,UAAU,CAACe,SAAS,EAAE,aAAa,EAAE;IACvD;AACR;AACA;IACQ0B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACnC,OAAO,CAACwB,KAAK,CAAC,aAAa,EAAE,IAAI,CAACtB,YAAY,CAAC;IAC/D,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ0C,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAAC3C,YAAY,GAAG2C,KAAK;IAC7B,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFd,MAAM,CAACC,cAAc,CAACxC,UAAU,CAACe,SAAS,EAAE,mBAAmB,EAAE;IAC7D;AACR;AACA;IACQ0B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACnC,OAAO,CAACwB,KAAK,CAAC,mBAAmB,EAAE,IAAI,CAACrB,kBAAkB,CAAC;IAC3E,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;IACQyC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAAC1C,kBAAkB,GAAG0C,KAAK;IACnC,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFd,MAAM,CAACC,cAAc,CAACxC,UAAU,CAACe,SAAS,EAAE,WAAW,EAAE;IACrD;AACR;AACA;IACQ0B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACnC,OAAO,CAACwB,KAAK,CAAC,WAAW,EAAE,IAAI,CAACpB,UAAU,CAAC;IAC3D,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQwC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACzC,UAAU,GAAGyC,KAAK;IAC3B,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFd,MAAM,CAACC,cAAc,CAACxC,UAAU,CAACe,SAAS,EAAE,mBAAmB,EAAE;IAC7D;AACR;AACA;IACQ0B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACnC,OAAO,CAACwB,KAAK,CAAC,mBAAmB,EAAE,IAAI,CAACnB,kBAAkB,CAAC;IAC3E,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQuC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACxC,kBAAkB,GAAGwC,KAAK;IACnC,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFd,MAAM,CAACC,cAAc,CAACxC,UAAU,CAACe,SAAS,EAAE,UAAU,EAAE;IACpD;AACR;AACA;IACQ0B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,IAAI,CAACwB,SAAS,EAAE;QAChB,OAAO,IAAI,CAACA,SAAS;MACzB,CAAC,MACI,IAAI,IAAI,CAACnB,SAAS,EAAE;QACrB,IAAI,CAACmB,SAAS,GAAG,IAAI,CAACnB,SAAS,CAACpB,QAAQ;QACxC,OAAO,IAAI,CAACuC,SAAS;MACzB;MACA,IAAI,CAACvC,QAAQ,GAAG,IAAI/B,QAAQ,CAAC,CAAC;MAC9B,OAAO,IAAI,CAAC+B,QAAQ;IACxB,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;IACQwB,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACc,SAAS,GAAGd,KAAK;IAC1B,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFd,MAAM,CAACC,cAAc,CAACxC,UAAU,CAACe,SAAS,EAAE,eAAe,EAAE;IACzD;AACR;AACA;IACQ0B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,IAAI,CAACyB,cAAc,EAAE;QACrB,OAAO,IAAI,CAACA,cAAc;MAC9B,CAAC,MACI,IAAI,IAAI,CAACpB,SAAS,EAAE;QACrB,IAAI,CAACoB,cAAc,GAAG,IAAI,CAACpB,SAAS,CAACb,aAAa;QAClD,OAAO,IAAI,CAACiC,cAAc;MAC9B;MACA,IAAI,CAACjC,aAAa,GAAG,IAAIrC,aAAa,CAAC,CAAC;MACxC,OAAO,IAAI,CAACqC,aAAa;IAC7B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;IACQiB,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACe,cAAc,GAAGf,KAAK;IAC/B,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;EACIrD,UAAU,CAACe,SAAS,CAAC4B,YAAY,GAAG,UAAUzC,GAAG,EAAE;IAC/C,IAAIiE,MAAM,GAAG,IAAI7B,IAAI,CAAC,CAAC,CAAC8B,OAAO,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAC5C,IAAIC,MAAM,GAAG,CAAC,CAAC;IACfA,MAAM,CAACH,MAAM,CAAC,GAAG,EAAE;IACnB,OAAO,IAAI,CAACnB,YAAY,CAAC9C,GAAG,EAAEoE,MAAM,CAAC;EACzC,CAAC;EACD;AACJ;AACA;EACItE,UAAU,CAACe,SAAS,CAACgD,OAAO,GAAG,YAAY;IACvC9D,MAAM,CAACc,SAAS,CAACgD,OAAO,CAAC1D,IAAI,CAAC,IAAI,CAAC;IACnC,IAAI,IAAI,CAACsD,cAAc,EAAE;MACrBY,YAAY,CAAC,IAAI,CAACZ,cAAc,CAAC;IACrC;IACA,IAAI7D,KAAK,CAACqC,QAAQ,CAAC,IAAI,CAACqB,eAAe,CAAC,EAAE;MACtC,IAAI,CAACA,eAAe,CAACO,OAAO,CAAC,CAAC;MAC9B,IAAI,CAACP,eAAe,GAAGQ,SAAS;IACpC;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIhE,UAAU,CAACe,SAAS,CAAC8C,IAAI,GAAG,YAAY;IACpC,IAAI,IAAI,CAAC3D,GAAG,EAAE;MACV,IAAI,IAAI,CAACyD,cAAc,EAAE;QACrBY,YAAY,CAAC,IAAI,CAACZ,cAAc,CAAC;MACrC;MACArE,UAAU,CAACuE,IAAI,CAAC,IAAI,CAAC;IACzB;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI7D,UAAU,CAACe,SAAS,CAACiC,YAAY,GAAG,UAAU9C,GAAG,EAAEoE,MAAM,EAAE;IACvD,IAAIE,IAAI,GAAGtE,GAAG,CAACuE,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG;IACtC,IAAIC,GAAG,GAAG,EAAE;IACZ3E,OAAO,CAAC4E,IAAI,CAACL,MAAM,EAAE,UAAUM,GAAG,EAAEzB,KAAK,EAAE;MACvC,IAAIA,KAAK,IAAI,EAAE,EAAE;QACbuB,GAAG,CAACG,IAAI,CAACD,GAAG,GAAG,GAAG,GAAGE,kBAAkB,CAAC3B,KAAK,CAAC,CAAC;MACnD,CAAC,MACI;QACDuB,GAAG,CAACG,IAAI,CAACD,GAAG,CAAC;MACjB;IACJ,CAAC,CAAC;IACF,IAAIF,GAAG,CAAC3B,MAAM,EAAE;MACZ,OAAO7C,GAAG,GAAGsE,IAAI,GAAGE,GAAG,CAACF,IAAI,CAAC,GAAG,CAAC;IACrC;IACA,OAAOtE,GAAG;EACd,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIF,UAAU,CAACe,SAAS,CAACgE,aAAa,GAAG,UAAUC,MAAM,EAAE;IACnDnF,QAAQ,CAACoF,iBAAiB,CAAC,MAAM,CAAC,GAAG1F,UAAU;IAC/CM,QAAQ,CAACoF,iBAAiB,CAAC,YAAY,CAAC,GAAG1F,UAAU;IACrDM,QAAQ,CAACoF,iBAAiB,CAAC,KAAK,CAAC,GAAGzF,SAAS;IAC7CK,QAAQ,CAACoF,iBAAiB,CAAC,WAAW,CAAC,GAAGzF,SAAS;IACnDS,MAAM,CAACc,SAAS,CAACgE,aAAa,CAAC1E,IAAI,CAAC,IAAI,EAAE2E,MAAM,CAAC;EACrD,CAAC;EACD,OAAOhF,UAAU;AACrB,CAAC,CAACP,gBAAgB,CAAE;AACpB,SAASO,UAAU"},"metadata":{},"sourceType":"module"}