/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-terminal.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ElementRef, Input, Output, EventEmitter } from '@angular/core';
import { Terminal } from 'xterm';
import { FitAddon } from 'xterm-addon-fit';
import { Subject, combineLatest } from 'rxjs';
export class NgTerminalComponent {
    constructor() {
        this.keyInputSubject = new Subject();
        this.keyEventSubject = new Subject();
        this.termSnippetSubject = new Subject();
        this.afterViewInitSubject = new Subject();
        this.h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        this.displayOption = {};
        this.terminalStyle = {};
        this.keyInputEmitter = new EventEmitter();
        this.keyEventEmitter = new EventEmitter();
        this.termSnippetSubscription = combineLatest(this.termSnippetSubject, this.afterViewInitSubject).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([snippet]) => {
            snippet();
        }));
    }
    /**
     * @param {?} ds
     * @return {?}
     */
    set _dataSource(ds) {
        if (this.dataSourceSubscription != null) {
            this.dataSourceSubscription.unsubscribe();
        }
        this.dataSource = ds;
        this.dataSourceSubscription = this.dataSource.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.write(data);
        }));
    }
    /**
     * @return {?}
     */
    get _dataSource() {
        return this.dataSource;
    }
    /**
     * @param {?} opt
     * @return {?}
     */
    set _displayOption(opt) {
        this.setDisplayOption(opt);
    }
    /**
     * @param {?} opt
     * @return {?}
     */
    set _style(opt) {
        this.setStyle(opt);
    }
    /**
     * @private
     * @return {?}
     */
    observableSetup() {
        this.term.onData((/**
         * @param {?} input
         * @return {?}
         */
        (input) => {
            this.keyInputSubject.next(input);
        }));
        this.term.onKey((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            this.keyEventSubject.next(e);
        }));
        this.keyInputSubjectSubscription = this.keyInputSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.keyInputEmitter.emit(data);
        }));
        this.keyEventSubjectSubscription = this.keyEventSubject.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.keyEventEmitter.emit(e);
        }));
        this.afterViewInitSubject.next();
    }
    /**
     * set block or inline-block to #terminal for fitting client or outer element
     * @private
     * @param {?} isBlock
     * @return {?}
     */
    setTerminalBlock(isBlock) {
        if (isBlock)
            this.terminalStyle['display'] = 'block';
        else
            this.terminalStyle['display'] = 'inline-block';
    }
    /**
     * set dimensions
     * @private
     * @param {?} left
     * @param {?} top
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    setTerminalDimensions(left, top, width, height) {
        this.terminalStyle['left'] = left ? `${left}px` : undefined;
        this.terminalStyle['top'] = top ? `${top}px` : undefined;
        this.terminalStyle['width'] = width ? `${width}px` : undefined;
        this.terminalStyle['height'] = height ? `${height}px` : undefined;
    }
    /**
     * remove dimensions
     * @private
     * @return {?}
     */
    removeTerminalDimensions() {
        this.terminalStyle['left'] = undefined;
        this.terminalStyle['top'] = undefined;
        this.terminalStyle['width'] = undefined;
        this.terminalStyle['height'] = undefined;
    }
    /**
     * @param {?} styleObject
     * @return {?}
     */
    setStyle(styleObject) {
        Object.assign(this.terminalStyle, styleObject);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * When a dimension of div changes, fit a terminal in div.
     * @return {?}
     */
    ngAfterViewChecked() {
        /** @type {?} */
        let dims = this.fitAddon.proposeDimensions();
        if (dims === undefined || isNaN(dims.rows) || dims.rows == Infinity || isNaN(dims.cols) || dims.cols == Infinity) {
            this.term.resize(10, 10);
        }
        else if (!this.displayOption.fixedGrid) {
            this.fitAddon.fit();
        }
        else {
            this.term.resize(this.displayOption.fixedGrid.cols, this.displayOption.fixedGrid.rows);
            /** @type {?} */
            let xtermScreen = this.term.element.getElementsByClassName('xterm-screen')[0];
            /** @type {?} */
            let scrollArea = this.term.element.getElementsByClassName('xterm-scroll-area')[0];
            /** @type {?} */
            let terminal = this.term.element;
            /** @type {?} */
            const contentWidth = xtermScreen.clientWidth;
            /** @type {?} */
            const scrollWidth = terminal.clientWidth - scrollArea.clientWidth;
            this.setTerminalDimensions(undefined, undefined, contentWidth + scrollWidth, undefined);
        }
    }
    /**
     * It creates new terminal in #terminal.
     * @return {?}
     */
    ngAfterViewInit() {
        this.fitAddon = new FitAddon();
        this.term = new Terminal();
        this.term.open(this.terminalDiv.nativeElement);
        this.term.loadAddon(this.fitAddon);
        this.observableSetup();
    }
    /**
     * clean all resources
     * @return {?}
     */
    ngOnDestroy() {
        if (this.keyInputSubjectSubscription)
            this.keyInputSubjectSubscription.unsubscribe();
        if (this.dataSourceSubscription)
            this.dataSourceSubscription.unsubscribe();
        if (this.keyEventSubjectSubscription)
            this.keyEventSubjectSubscription.unsubscribe();
        if (this.termSnippetSubscription)
            this.termSnippetSubscription.unsubscribe();
        if (this.term)
            this.term.dispose();
    }
    /**
     * @param {?} chars
     * @return {?}
     */
    write(chars) {
        this.term.write(chars);
    }
    /**
     * @param {?} opt
     * @return {?}
     */
    setDisplayOption(opt) {
        if (opt) {
            if (opt.fixedGrid != null) {
                console.debug("resizable will be ignored.");
                this.setTerminalBlock(false);
                this.removeTerminalDimensions();
            }
            else {
                this.setTerminalBlock(true);
            }
            this.displayOption = opt;
        }
        else
            console.warn(`A falsy option is not allowed`);
    }
    /**
     * @return {?}
     */
    get keyInput() {
        return this.keyInputSubject;
    }
    /**
     * @return {?}
     */
    get keyEventInput() {
        return this.keyEventSubject;
    }
    /**
     * @return {?}
     */
    get underlying() {
        return this.term;
    }
    /**
     * @return {?}
     */
    get isDraggableOnEdgeActivated() {
        return this.displayOption.activateDraggableOnEdge != undefined && this.displayOption.fixedGrid == undefined;
    }
    /**
     * After user coordinate dimensions of terminal, it's called.
     * @param {?} left
     * @param {?} top
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    onResizeEnd(left, top, width, height) {
        this.setTerminalDimensions(left, top, width, height);
    }
    /**
     * Before onResizeEnd is called, it valiates dimensions to change.
     * @return {?}
     */
    validatorFactory() {
        /** @type {?} */
        const comp = this;
        return (/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            /** @type {?} */
            const displayOption = comp.displayOption;
            if (displayOption.activateDraggableOnEdge) {
                /** @type {?} */
                let left = re.rectangle.left;
                /** @type {?} */
                let top = re.rectangle.top;
                /** @type {?} */
                let width = re.rectangle.width;
                /** @type {?} */
                let height = re.rectangle.height;
                if ((width < displayOption.activateDraggableOnEdge.minWidth) || (height < displayOption.activateDraggableOnEdge.minHeight)) {
                    return false;
                }
                else
                    return true;
            }
        });
    }
}
NgTerminalComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-terminal',
                template: "<global-style></global-style>\r\n\r\n<div #terminal class=\"terminal-outer\" mwlResizable [ngStyle]=\"terminalStyle\" [validateResize]=\"validatorFactory()\" [enableGhostResize]=\"true\" [resizeEdges]=\"isDraggableOnEdgeActivated ? {bottom: true, right: true} : {bottom: false, right: false}\"\r\n(resizeEnd)=\"onResizeEnd($event.rectangle.left, $event.rectangle.top, $event.rectangle.width, $event.rectangle.height)\">\r\n</div>",
                styles: [".terminal-outer{box-sizing:border-box;height:100%}"]
            }] }
];
/** @nocollapse */
NgTerminalComponent.ctorParameters = () => [];
NgTerminalComponent.propDecorators = {
    _dataSource: [{ type: Input, args: ['dataSource',] }],
    _displayOption: [{ type: Input, args: ['displayOption',] }],
    _style: [{ type: Input, args: ['style',] }],
    keyInputEmitter: [{ type: Output, args: ['keyInput',] }],
    keyEventEmitter: [{ type: Output, args: ['keyEvent',] }],
    terminalDiv: [{ type: ViewChild, args: ['terminal', { static: true },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.term;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.fitAddon;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.keyInputSubject;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.keyEventSubject;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.termSnippetSubject;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.afterViewInitSubject;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.keyInputSubjectSubscription;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.keyEventSubjectSubscription;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.termSnippetSubscription;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.h;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.displayOption;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.dataSource;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.dataSourceSubscription;
    /** @type {?} */
    NgTerminalComponent.prototype.terminalStyle;
    /** @type {?} */
    NgTerminalComponent.prototype.keyInputEmitter;
    /** @type {?} */
    NgTerminalComponent.prototype.keyEventEmitter;
    /** @type {?} */
    NgTerminalComponent.prototype.terminalDiv;
}
//# sourceMappingURL=data:application/json;base64,