{"version":3,"file":"ng-terminal.component.d.ts","sources":["ng-terminal.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, AfterViewChecked, ElementRef, EventEmitter, OnDestroy, AfterViewInit } from '@angular/core';\r\nimport { Terminal } from 'xterm';\r\nimport { NgTerminal } from './ng-terminal';\r\nimport { Observable } from 'rxjs';\r\nimport { DisplayOption } from './display-option';\r\nimport { ResizeEvent } from 'angular-resizable-element';\r\nexport declare class NgTerminalComponent implements OnInit, AfterViewInit, AfterViewChecked, NgTerminal, OnDestroy {\r\n    private term;\r\n    private fitAddon;\r\n    private keyInputSubject;\r\n    private keyEventSubject;\r\n    private termSnippetSubject;\r\n    private afterViewInitSubject;\r\n    private keyInputSubjectSubscription;\r\n    private keyEventSubjectSubscription;\r\n    private termSnippetSubscription;\r\n    private h;\r\n    private displayOption;\r\n    private dataSource;\r\n    private dataSourceSubscription;\r\n    terminalStyle: object;\r\n    _dataSource: any;\r\n    _displayOption: DisplayOption;\r\n    _style: any;\r\n    keyInputEmitter: EventEmitter<string>;\r\n    keyEventEmitter: EventEmitter<{\r\n        key: string;\r\n        domEvent: KeyboardEvent;\r\n    }>;\r\n    terminalDiv: ElementRef;\r\n    constructor();\r\n    private observableSetup;\r\n    /**\r\n     * set block or inline-block to #terminal for fitting client or outer element\r\n     */\r\n    private setTerminalBlock;\r\n    /**\r\n     * set dimensions\r\n     */\r\n    private setTerminalDimensions;\r\n    /**\r\n     * remove dimensions\r\n     */\r\n    private removeTerminalDimensions;\r\n    setStyle(styleObject: any): void;\r\n    ngOnInit(): void;\r\n    /**\r\n     * When a dimension of div changes, fit a terminal in div.\r\n     */\r\n    ngAfterViewChecked(): void;\r\n    /**\r\n     * It creates new terminal in #terminal.\r\n     */\r\n    ngAfterViewInit(): void;\r\n    /**\r\n     * clean all resources\r\n     */\r\n    ngOnDestroy(): void;\r\n    write(chars: string): void;\r\n    setDisplayOption(opt: DisplayOption): void;\r\n    readonly keyInput: Observable<string>;\r\n    readonly keyEventInput: Observable<{\r\n        key: string;\r\n        domEvent: KeyboardEvent;\r\n    }>;\r\n    readonly underlying: Terminal;\r\n    readonly isDraggableOnEdgeActivated: boolean;\r\n    /**\r\n     * After user coordinate dimensions of terminal, it's called.\r\n     * @param left\r\n     * @param top\r\n     * @param width\r\n     * @param height\r\n     */\r\n    onResizeEnd(left: number, top: number, width: number, height: number): void;\r\n    /**\r\n     * Before onResizeEnd is called, it valiates dimensions to change.\r\n     * @param re dimension to be submitted from resizable stuff\r\n     */\r\n    validatorFactory(): (re: ResizeEvent) => boolean;\r\n}\r\n"]}