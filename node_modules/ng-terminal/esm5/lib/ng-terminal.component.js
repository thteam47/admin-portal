/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-terminal.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, ElementRef, Input, Output, EventEmitter } from '@angular/core';
import { Terminal } from 'xterm';
import { FitAddon } from 'xterm-addon-fit';
import { Subject, combineLatest } from 'rxjs';
var NgTerminalComponent = /** @class */ (function () {
    function NgTerminalComponent() {
        this.keyInputSubject = new Subject();
        this.keyEventSubject = new Subject();
        this.termSnippetSubject = new Subject();
        this.afterViewInitSubject = new Subject();
        this.h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        this.displayOption = {};
        this.terminalStyle = {};
        this.keyInputEmitter = new EventEmitter();
        this.keyEventEmitter = new EventEmitter();
        this.termSnippetSubscription = combineLatest(this.termSnippetSubject, this.afterViewInitSubject).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 1), snippet = _b[0];
            snippet();
        }));
    }
    Object.defineProperty(NgTerminalComponent.prototype, "_dataSource", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dataSource;
        },
        set: /**
         * @param {?} ds
         * @return {?}
         */
        function (ds) {
            var _this = this;
            if (this.dataSourceSubscription != null) {
                this.dataSourceSubscription.unsubscribe();
            }
            this.dataSource = ds;
            this.dataSourceSubscription = this.dataSource.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.write(data);
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgTerminalComponent.prototype, "_displayOption", {
        set: /**
         * @param {?} opt
         * @return {?}
         */
        function (opt) {
            this.setDisplayOption(opt);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgTerminalComponent.prototype, "_style", {
        set: /**
         * @param {?} opt
         * @return {?}
         */
        function (opt) {
            this.setStyle(opt);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    NgTerminalComponent.prototype.observableSetup = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.term.onData((/**
         * @param {?} input
         * @return {?}
         */
        function (input) {
            _this.keyInputSubject.next(input);
        }));
        this.term.onKey((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.keyEventSubject.next(e);
        }));
        this.keyInputSubjectSubscription = this.keyInputSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.keyInputEmitter.emit(data);
        }));
        this.keyEventSubjectSubscription = this.keyEventSubject.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.keyEventEmitter.emit(e);
        }));
        this.afterViewInitSubject.next();
    };
    /**
     * set block or inline-block to #terminal for fitting client or outer element
     */
    /**
     * set block or inline-block to #terminal for fitting client or outer element
     * @private
     * @param {?} isBlock
     * @return {?}
     */
    NgTerminalComponent.prototype.setTerminalBlock = /**
     * set block or inline-block to #terminal for fitting client or outer element
     * @private
     * @param {?} isBlock
     * @return {?}
     */
    function (isBlock) {
        if (isBlock)
            this.terminalStyle['display'] = 'block';
        else
            this.terminalStyle['display'] = 'inline-block';
    };
    /**
     * set dimensions
     */
    /**
     * set dimensions
     * @private
     * @param {?} left
     * @param {?} top
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    NgTerminalComponent.prototype.setTerminalDimensions = /**
     * set dimensions
     * @private
     * @param {?} left
     * @param {?} top
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (left, top, width, height) {
        this.terminalStyle['left'] = left ? left + "px" : undefined;
        this.terminalStyle['top'] = top ? top + "px" : undefined;
        this.terminalStyle['width'] = width ? width + "px" : undefined;
        this.terminalStyle['height'] = height ? height + "px" : undefined;
    };
    /**
     * remove dimensions
     */
    /**
     * remove dimensions
     * @private
     * @return {?}
     */
    NgTerminalComponent.prototype.removeTerminalDimensions = /**
     * remove dimensions
     * @private
     * @return {?}
     */
    function () {
        this.terminalStyle['left'] = undefined;
        this.terminalStyle['top'] = undefined;
        this.terminalStyle['width'] = undefined;
        this.terminalStyle['height'] = undefined;
    };
    /**
     * @param {?} styleObject
     * @return {?}
     */
    NgTerminalComponent.prototype.setStyle = /**
     * @param {?} styleObject
     * @return {?}
     */
    function (styleObject) {
        Object.assign(this.terminalStyle, styleObject);
    };
    /**
     * @return {?}
     */
    NgTerminalComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * When a dimension of div changes, fit a terminal in div.
     */
    /**
     * When a dimension of div changes, fit a terminal in div.
     * @return {?}
     */
    NgTerminalComponent.prototype.ngAfterViewChecked = /**
     * When a dimension of div changes, fit a terminal in div.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dims = this.fitAddon.proposeDimensions();
        if (dims === undefined || isNaN(dims.rows) || dims.rows == Infinity || isNaN(dims.cols) || dims.cols == Infinity) {
            this.term.resize(10, 10);
        }
        else if (!this.displayOption.fixedGrid) {
            this.fitAddon.fit();
        }
        else {
            this.term.resize(this.displayOption.fixedGrid.cols, this.displayOption.fixedGrid.rows);
            /** @type {?} */
            var xtermScreen = this.term.element.getElementsByClassName('xterm-screen')[0];
            /** @type {?} */
            var scrollArea = this.term.element.getElementsByClassName('xterm-scroll-area')[0];
            /** @type {?} */
            var terminal = this.term.element;
            /** @type {?} */
            var contentWidth = xtermScreen.clientWidth;
            /** @type {?} */
            var scrollWidth = terminal.clientWidth - scrollArea.clientWidth;
            this.setTerminalDimensions(undefined, undefined, contentWidth + scrollWidth, undefined);
        }
    };
    /**
     * It creates new terminal in #terminal.
     */
    /**
     * It creates new terminal in #terminal.
     * @return {?}
     */
    NgTerminalComponent.prototype.ngAfterViewInit = /**
     * It creates new terminal in #terminal.
     * @return {?}
     */
    function () {
        this.fitAddon = new FitAddon();
        this.term = new Terminal();
        this.term.open(this.terminalDiv.nativeElement);
        this.term.loadAddon(this.fitAddon);
        this.observableSetup();
    };
    /**
     * clean all resources
     */
    /**
     * clean all resources
     * @return {?}
     */
    NgTerminalComponent.prototype.ngOnDestroy = /**
     * clean all resources
     * @return {?}
     */
    function () {
        if (this.keyInputSubjectSubscription)
            this.keyInputSubjectSubscription.unsubscribe();
        if (this.dataSourceSubscription)
            this.dataSourceSubscription.unsubscribe();
        if (this.keyEventSubjectSubscription)
            this.keyEventSubjectSubscription.unsubscribe();
        if (this.termSnippetSubscription)
            this.termSnippetSubscription.unsubscribe();
        if (this.term)
            this.term.dispose();
    };
    /**
     * @param {?} chars
     * @return {?}
     */
    NgTerminalComponent.prototype.write = /**
     * @param {?} chars
     * @return {?}
     */
    function (chars) {
        this.term.write(chars);
    };
    /**
     * @param {?} opt
     * @return {?}
     */
    NgTerminalComponent.prototype.setDisplayOption = /**
     * @param {?} opt
     * @return {?}
     */
    function (opt) {
        if (opt) {
            if (opt.fixedGrid != null) {
                console.debug("resizable will be ignored.");
                this.setTerminalBlock(false);
                this.removeTerminalDimensions();
            }
            else {
                this.setTerminalBlock(true);
            }
            this.displayOption = opt;
        }
        else
            console.warn("A falsy option is not allowed");
    };
    Object.defineProperty(NgTerminalComponent.prototype, "keyInput", {
        get: /**
         * @return {?}
         */
        function () {
            return this.keyInputSubject;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgTerminalComponent.prototype, "keyEventInput", {
        get: /**
         * @return {?}
         */
        function () {
            return this.keyEventSubject;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgTerminalComponent.prototype, "underlying", {
        get: /**
         * @return {?}
         */
        function () {
            return this.term;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgTerminalComponent.prototype, "isDraggableOnEdgeActivated", {
        get: /**
         * @return {?}
         */
        function () {
            return this.displayOption.activateDraggableOnEdge != undefined && this.displayOption.fixedGrid == undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * After user coordinate dimensions of terminal, it's called.
     * @param left
     * @param top
     * @param width
     * @param height
     */
    /**
     * After user coordinate dimensions of terminal, it's called.
     * @param {?} left
     * @param {?} top
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    NgTerminalComponent.prototype.onResizeEnd = /**
     * After user coordinate dimensions of terminal, it's called.
     * @param {?} left
     * @param {?} top
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (left, top, width, height) {
        this.setTerminalDimensions(left, top, width, height);
    };
    /**
     * Before onResizeEnd is called, it valiates dimensions to change.
     * @param re dimension to be submitted from resizable stuff
     */
    /**
     * Before onResizeEnd is called, it valiates dimensions to change.
     * @return {?}
     */
    NgTerminalComponent.prototype.validatorFactory = /**
     * Before onResizeEnd is called, it valiates dimensions to change.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var comp = this;
        return (/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            /** @type {?} */
            var displayOption = comp.displayOption;
            if (displayOption.activateDraggableOnEdge) {
                /** @type {?} */
                var left = re.rectangle.left;
                /** @type {?} */
                var top_1 = re.rectangle.top;
                /** @type {?} */
                var width = re.rectangle.width;
                /** @type {?} */
                var height = re.rectangle.height;
                if ((width < displayOption.activateDraggableOnEdge.minWidth) || (height < displayOption.activateDraggableOnEdge.minHeight)) {
                    return false;
                }
                else
                    return true;
            }
        });
    };
    NgTerminalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-terminal',
                    template: "<global-style></global-style>\r\n\r\n<div #terminal class=\"terminal-outer\" mwlResizable [ngStyle]=\"terminalStyle\" [validateResize]=\"validatorFactory()\" [enableGhostResize]=\"true\" [resizeEdges]=\"isDraggableOnEdgeActivated ? {bottom: true, right: true} : {bottom: false, right: false}\"\r\n(resizeEnd)=\"onResizeEnd($event.rectangle.left, $event.rectangle.top, $event.rectangle.width, $event.rectangle.height)\">\r\n</div>",
                    styles: [".terminal-outer{box-sizing:border-box;height:100%}"]
                }] }
    ];
    /** @nocollapse */
    NgTerminalComponent.ctorParameters = function () { return []; };
    NgTerminalComponent.propDecorators = {
        _dataSource: [{ type: Input, args: ['dataSource',] }],
        _displayOption: [{ type: Input, args: ['displayOption',] }],
        _style: [{ type: Input, args: ['style',] }],
        keyInputEmitter: [{ type: Output, args: ['keyInput',] }],
        keyEventEmitter: [{ type: Output, args: ['keyEvent',] }],
        terminalDiv: [{ type: ViewChild, args: ['terminal', { static: true },] }]
    };
    return NgTerminalComponent;
}());
export { NgTerminalComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.term;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.fitAddon;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.keyInputSubject;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.keyEventSubject;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.termSnippetSubject;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.afterViewInitSubject;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.keyInputSubjectSubscription;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.keyEventSubjectSubscription;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.termSnippetSubscription;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.h;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.displayOption;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.dataSource;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.dataSourceSubscription;
    /** @type {?} */
    NgTerminalComponent.prototype.terminalStyle;
    /** @type {?} */
    NgTerminalComponent.prototype.keyInputEmitter;
    /** @type {?} */
    NgTerminalComponent.prototype.keyEventEmitter;
    /** @type {?} */
    NgTerminalComponent.prototype.terminalDiv;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdGVybWluYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctdGVybWluYWwvIiwic291cmNlcyI6WyJsaWIvbmctdGVybWluYWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQTRCLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBQ2xKLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDakMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxPQUFPLEVBQTRCLGFBQWEsRUFBMkIsTUFBTSxNQUFNLENBQUM7QUFJakc7SUF1REU7UUEvQ1Esb0JBQWUsR0FBb0IsSUFBSSxPQUFPLEVBQVUsQ0FBQztRQUN6RCxvQkFBZSxHQUFHLElBQUksT0FBTyxFQUEyQyxDQUFDO1FBQ3pFLHVCQUFrQixHQUFHLElBQUksT0FBTyxFQUFZLENBQUM7UUFDN0MseUJBQW9CLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUszQyxNQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzdFLGtCQUFhLEdBQWtCLEVBQUUsQ0FBQztRQUcxQyxrQkFBYSxHQUFXLEVBQUUsQ0FBQztRQTJCM0Isb0JBQWUsR0FBSSxJQUFJLFlBQVksRUFBVSxDQUFDO1FBRzlDLG9CQUFlLEdBQUksSUFBSSxZQUFZLEVBQTJDLENBQUM7UUFNN0UsSUFBSSxDQUFDLHVCQUF1QixHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUMsU0FBUzs7OztRQUFDLFVBQUMsRUFBUztnQkFBVCwwQkFBUyxF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Q3BCO1FBQ0gsQ0FBQyxFQUFBO0lBQ0gsQ0FBQzs7Z0JBN05GLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtvQkFDdkIseWJBQTJDOztpQkFFNUM7Ozs7OzhCQWtCRSxLQUFLLFNBQUMsWUFBWTtpQ0FjbEIsS0FBSyxTQUFDLGVBQWU7eUJBS3JCLEtBQUssU0FBQyxPQUFPO2tDQUtiLE1BQU0sU0FBQyxVQUFVO2tDQUdqQixNQUFNLFNBQUMsVUFBVTs4QkFHakIsU0FBUyxTQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7O0lBMEt6QywwQkFBQztDQUFBLEFBOU5ELElBOE5DO1NBek5ZLG1CQUFtQjs7Ozs7O0lBQzlCLG1DQUF1Qjs7Ozs7SUFDdkIsdUNBQTJCOzs7OztJQUMzQiw4Q0FBaUU7Ozs7O0lBQ2pFLDhDQUFpRjs7Ozs7SUFDakYsaURBQXFEOzs7OztJQUNyRCxtREFBbUQ7Ozs7O0lBRW5ELDBEQUFrRDs7Ozs7SUFDbEQsMERBQWtEOzs7OztJQUNsRCxzREFBOEM7Ozs7O0lBQzlDLGdDQUFxRjs7Ozs7SUFDckYsNENBQTBDOzs7OztJQUMxQyx5Q0FBdUM7Ozs7O0lBQ3ZDLHFEQUE2Qzs7SUFDN0MsNENBQTJCOztJQTBCM0IsOENBQzhDOztJQUU5Qyw4Q0FDK0U7O0lBRS9FLDBDQUN3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBBZnRlclZpZXdDaGVja2VkLCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRlcm1pbmFsIH0gZnJvbSAneHRlcm0nO1xyXG5pbXBvcnQgeyBGaXRBZGRvbiB9IGZyb20gJ3h0ZXJtLWFkZG9uLWZpdCc7XHJcbmltcG9ydCB7IE5nVGVybWluYWwgfSBmcm9tICcuL25nLXRlcm1pbmFsJztcclxuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uLCBjb21iaW5lTGF0ZXN0LCBPYmplY3RVbnN1YnNjcmliZWRFcnJvciB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBEaXNwbGF5T3B0aW9uIH0gZnJvbSAnLi9kaXNwbGF5LW9wdGlvbic7XHJcbmltcG9ydCB7IFJlc2l6ZUV2ZW50IH0gZnJvbSAnYW5ndWxhci1yZXNpemFibGUtZWxlbWVudCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25nLXRlcm1pbmFsJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vbmctdGVybWluYWwuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL25nLXRlcm1pbmFsLmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdUZXJtaW5hbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZCwgTmdUZXJtaW5hbCwgT25EZXN0cm95IHtcclxuICBwcml2YXRlIHRlcm06IFRlcm1pbmFsO1xyXG4gIHByaXZhdGUgZml0QWRkb246IEZpdEFkZG9uO1xyXG4gIHByaXZhdGUga2V5SW5wdXRTdWJqZWN0OiBTdWJqZWN0PHN0cmluZz4gPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XHJcbiAgcHJpdmF0ZSBrZXlFdmVudFN1YmplY3QgPSBuZXcgU3ViamVjdDx7a2V5OiBzdHJpbmc7IGRvbUV2ZW50OiBLZXlib2FyZEV2ZW50O30+KCk7XHJcbiAgcHJpdmF0ZSB0ZXJtU25pcHBldFN1YmplY3QgPSBuZXcgU3ViamVjdDwoKT0+dm9pZD4oKTtcclxuICBwcml2YXRlIGFmdGVyVmlld0luaXRTdWJqZWN0ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcclxuICBcclxuICBwcml2YXRlIGtleUlucHV0U3ViamVjdFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG4gIHByaXZhdGUga2V5RXZlbnRTdWJqZWN0U3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcbiAgcHJpdmF0ZSB0ZXJtU25pcHBldFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG4gIHByaXZhdGUgaCA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcclxuICBwcml2YXRlIGRpc3BsYXlPcHRpb246IERpc3BsYXlPcHRpb24gPSB7fTtcclxuICBwcml2YXRlIGRhdGFTb3VyY2U6IE9ic2VydmFibGU8c3RyaW5nPjtcclxuICBwcml2YXRlIGRhdGFTb3VyY2VTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuICB0ZXJtaW5hbFN0eWxlOiBvYmplY3QgPSB7fTtcclxuXHJcbiAgQElucHV0KCdkYXRhU291cmNlJylcclxuICBzZXQgX2RhdGFTb3VyY2UoZHMpIHtcclxuICAgIGlmKHRoaXMuZGF0YVNvdXJjZVN1YnNjcmlwdGlvbiAhPSBudWxsKXtcclxuICAgICAgdGhpcy5kYXRhU291cmNlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmRhdGFTb3VyY2UgPSBkcztcclxuICAgIHRoaXMuZGF0YVNvdXJjZVN1YnNjcmlwdGlvbiA9IHRoaXMuZGF0YVNvdXJjZS5zdWJzY3JpYmUoKGRhdGEpID0+IHtcclxuICAgICAgdGhpcy53cml0ZShkYXRhKTtcclxuICAgIH0pXHJcbiAgfVxyXG4gIGdldCBfZGF0YVNvdXJjZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmRhdGFTb3VyY2U7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoJ2Rpc3BsYXlPcHRpb24nKVxyXG4gIHNldCBfZGlzcGxheU9wdGlvbihvcHQ6IERpc3BsYXlPcHRpb24pe1xyXG4gICAgdGhpcy5zZXREaXNwbGF5T3B0aW9uKG9wdCk7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoJ3N0eWxlJylcclxuICBzZXQgX3N0eWxlKG9wdDogYW55KXtcclxuICAgIHRoaXMuc2V0U3R5bGUob3B0KTtcclxuICB9XHJcblxyXG4gIEBPdXRwdXQoJ2tleUlucHV0JylcclxuICBrZXlJbnB1dEVtaXR0ZXIgID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XHJcblxyXG4gIEBPdXRwdXQoJ2tleUV2ZW50JylcclxuICBrZXlFdmVudEVtaXR0ZXIgID0gbmV3IEV2ZW50RW1pdHRlcjx7a2V5OiBzdHJpbmc7IGRvbUV2ZW50OiBLZXlib2FyZEV2ZW50O30+KCk7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ3Rlcm1pbmFsJywgeyBzdGF0aWM6IHRydWUgfSkgXHJcbiAgdGVybWluYWxEaXY6IEVsZW1lbnRSZWY7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkgeyBcclxuICAgIHRoaXMudGVybVNuaXBwZXRTdWJzY3JpcHRpb24gPSBjb21iaW5lTGF0ZXN0KHRoaXMudGVybVNuaXBwZXRTdWJqZWN0LCB0aGlzLmFmdGVyVmlld0luaXRTdWJqZWN0KS5zdWJzY3JpYmUoKFtzbmlwcGV0XSkgPT4ge1xyXG4gICAgICBzbmlwcGV0KCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgb2JzZXJ2YWJsZVNldHVwKCl7XHJcbiAgICB0aGlzLnRlcm0ub25EYXRhKChpbnB1dCkgPT4ge1xyXG4gICAgICB0aGlzLmtleUlucHV0U3ViamVjdC5uZXh0KGlucHV0KTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy50ZXJtLm9uS2V5KGUgPT4ge1xyXG4gICAgICB0aGlzLmtleUV2ZW50U3ViamVjdC5uZXh0KGUpO1xyXG4gICAgfSlcclxuICAgIHRoaXMua2V5SW5wdXRTdWJqZWN0U3Vic2NyaXB0aW9uID0gdGhpcy5rZXlJbnB1dFN1YmplY3Quc3Vic2NyaWJlKChkYXRhKSA9PiB7XHJcbiAgICAgIHRoaXMua2V5SW5wdXRFbWl0dGVyLmVtaXQoZGF0YSk7XHJcbiAgICB9KVxyXG4gICAgdGhpcy5rZXlFdmVudFN1YmplY3RTdWJzY3JpcHRpb24gPSB0aGlzLmtleUV2ZW50U3ViamVjdC5zdWJzY3JpYmUoKGUpID0+IHtcclxuICAgICAgdGhpcy5rZXlFdmVudEVtaXR0ZXIuZW1pdChlKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5hZnRlclZpZXdJbml0U3ViamVjdC5uZXh0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBzZXQgYmxvY2sgb3IgaW5saW5lLWJsb2NrIHRvICN0ZXJtaW5hbCBmb3IgZml0dGluZyBjbGllbnQgb3Igb3V0ZXIgZWxlbWVudFxyXG4gICAqL1xyXG4gIHByaXZhdGUgc2V0VGVybWluYWxCbG9jayhpc0Jsb2NrOiBib29sZWFuKXtcclxuICAgIGlmKGlzQmxvY2spXHJcbiAgICAgIHRoaXMudGVybWluYWxTdHlsZVsnZGlzcGxheSddID0gJ2Jsb2NrJztcclxuICAgIGVsc2VcclxuICAgICAgdGhpcy50ZXJtaW5hbFN0eWxlWydkaXNwbGF5J10gPSAnaW5saW5lLWJsb2NrJztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHNldCBkaW1lbnNpb25zXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzZXRUZXJtaW5hbERpbWVuc2lvbnMobGVmdDogbnVtYmVyLCB0b3A6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgIHRoaXMudGVybWluYWxTdHlsZVsnbGVmdCddID0gbGVmdCA/IGAke2xlZnR9cHhgIDogdW5kZWZpbmVkO1xyXG4gICAgdGhpcy50ZXJtaW5hbFN0eWxlWyd0b3AnXSA9IHRvcCA/IGAke3RvcH1weGAgOiB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLnRlcm1pbmFsU3R5bGVbJ3dpZHRoJ10gPSB3aWR0aCA/IGAke3dpZHRofXB4YCA6IHVuZGVmaW5lZDtcclxuICAgIHRoaXMudGVybWluYWxTdHlsZVsnaGVpZ2h0J10gPSBoZWlnaHQgPyBgJHtoZWlnaHR9cHhgIDogdW5kZWZpbmVkO1xyXG4gIH1cclxuICBcclxuICAvKipcclxuICAgKiByZW1vdmUgZGltZW5zaW9uc1xyXG4gICAqL1xyXG4gIHByaXZhdGUgcmVtb3ZlVGVybWluYWxEaW1lbnNpb25zKCl7XHJcbiAgICB0aGlzLnRlcm1pbmFsU3R5bGVbJ2xlZnQnXSA9IHVuZGVmaW5lZDtcclxuICAgIHRoaXMudGVybWluYWxTdHlsZVsndG9wJ10gPSB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLnRlcm1pbmFsU3R5bGVbJ3dpZHRoJ10gPSB1bmRlZmluZWQ7XHJcbiAgICB0aGlzLnRlcm1pbmFsU3R5bGVbJ2hlaWdodCddID0gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgc2V0U3R5bGUoc3R5bGVPYmplY3Q6IGFueSl7XHJcbiAgICBPYmplY3QuYXNzaWduKHRoaXMudGVybWluYWxTdHlsZSwgc3R5bGVPYmplY3QpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKXtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZW4gYSBkaW1lbnNpb24gb2YgZGl2IGNoYW5nZXMsIGZpdCBhIHRlcm1pbmFsIGluIGRpdi5cclxuICAgKi9cclxuICBuZ0FmdGVyVmlld0NoZWNrZWQoKSB7XHJcbiAgICBsZXQgZGltcyA9IHRoaXMuZml0QWRkb24ucHJvcG9zZURpbWVuc2lvbnMoKTtcclxuICAgIGlmKGRpbXMgPT09IHVuZGVmaW5lZCB8fCBpc05hTihkaW1zLnJvd3MpIHx8IGRpbXMucm93cyA9PSBJbmZpbml0eSB8fCBpc05hTihkaW1zLmNvbHMpIHx8IGRpbXMuY29scyA9PSBJbmZpbml0eSl7XHJcbiAgICAgIHRoaXMudGVybS5yZXNpemUoMTAsIDEwKTtcclxuICAgIH1lbHNlIGlmKCF0aGlzLmRpc3BsYXlPcHRpb24uZml4ZWRHcmlkKXtcclxuICAgICAgdGhpcy5maXRBZGRvbi5maXQoKTtcclxuICAgIH1lbHNle1xyXG4gICAgICB0aGlzLnRlcm0ucmVzaXplKHRoaXMuZGlzcGxheU9wdGlvbi5maXhlZEdyaWQuY29scywgdGhpcy5kaXNwbGF5T3B0aW9uLmZpeGVkR3JpZC5yb3dzKTtcclxuICAgICAgbGV0IHh0ZXJtU2NyZWVuID0gdGhpcy50ZXJtLmVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgneHRlcm0tc2NyZWVuJylbMF07XHJcbiAgICAgIGxldCBzY3JvbGxBcmVhID0gdGhpcy50ZXJtLmVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgneHRlcm0tc2Nyb2xsLWFyZWEnKVswXTtcclxuICAgICAgbGV0IHRlcm1pbmFsID0gdGhpcy50ZXJtLmVsZW1lbnQ7XHJcbiAgICAgIGNvbnN0IGNvbnRlbnRXaWR0aCA9IHh0ZXJtU2NyZWVuLmNsaWVudFdpZHRoO1xyXG4gICAgICBjb25zdCBzY3JvbGxXaWR0aCA9IHRlcm1pbmFsLmNsaWVudFdpZHRoIC0gc2Nyb2xsQXJlYS5jbGllbnRXaWR0aDtcclxuICAgICAgdGhpcy5zZXRUZXJtaW5hbERpbWVuc2lvbnModW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRlbnRXaWR0aCArIHNjcm9sbFdpZHRoLCB1bmRlZmluZWQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSXQgY3JlYXRlcyBuZXcgdGVybWluYWwgaW4gI3Rlcm1pbmFsLlxyXG4gICAqL1xyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIHRoaXMuZml0QWRkb24gPSBuZXcgRml0QWRkb24oKTtcclxuICAgIHRoaXMudGVybSA9IG5ldyBUZXJtaW5hbCgpO1xyXG4gICAgdGhpcy50ZXJtLm9wZW4odGhpcy50ZXJtaW5hbERpdi5uYXRpdmVFbGVtZW50KTtcclxuICAgIHRoaXMudGVybS5sb2FkQWRkb24odGhpcy5maXRBZGRvbik7XHJcbiAgICB0aGlzLm9ic2VydmFibGVTZXR1cCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogY2xlYW4gYWxsIHJlc291cmNlc1xyXG4gICAqL1xyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgaWYodGhpcy5rZXlJbnB1dFN1YmplY3RTdWJzY3JpcHRpb24pXHJcbiAgICAgIHRoaXMua2V5SW5wdXRTdWJqZWN0U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICBpZih0aGlzLmRhdGFTb3VyY2VTdWJzY3JpcHRpb24pXHJcbiAgICAgIHRoaXMuZGF0YVNvdXJjZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgaWYodGhpcy5rZXlFdmVudFN1YmplY3RTdWJzY3JpcHRpb24pXHJcbiAgICAgIHRoaXMua2V5RXZlbnRTdWJqZWN0U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICBpZih0aGlzLnRlcm1TbmlwcGV0U3Vic2NyaXB0aW9uKVxyXG4gICAgdGhpcy50ZXJtU25pcHBldFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgaWYodGhpcy50ZXJtKVxyXG4gICAgICB0aGlzLnRlcm0uZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgd3JpdGUoY2hhcnM6IHN0cmluZykge1xyXG4gICAgdGhpcy50ZXJtLndyaXRlKGNoYXJzKTtcclxuICB9XHJcblxyXG4gIHNldERpc3BsYXlPcHRpb24ob3B0OiBEaXNwbGF5T3B0aW9uKSB7XHJcbiAgICBpZiAob3B0KSB7XHJcbiAgICAgIGlmIChvcHQuZml4ZWRHcmlkICE9IG51bGwpIHtcclxuICAgICAgICBjb25zb2xlLmRlYnVnKFwicmVzaXphYmxlIHdpbGwgYmUgaWdub3JlZC5cIik7XHJcbiAgICAgICAgdGhpcy5zZXRUZXJtaW5hbEJsb2NrKGZhbHNlKTtcclxuICAgICAgICB0aGlzLnJlbW92ZVRlcm1pbmFsRGltZW5zaW9ucygpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuc2V0VGVybWluYWxCbG9jayh0cnVlKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmRpc3BsYXlPcHRpb24gPSBvcHQ7XHJcbiAgICB9IGVsc2VcclxuICAgICAgY29uc29sZS53YXJuKGBBIGZhbHN5IG9wdGlvbiBpcyBub3QgYWxsb3dlZGApO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGtleUlucHV0KCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XHJcbiAgICByZXR1cm4gdGhpcy5rZXlJbnB1dFN1YmplY3Q7XHJcbiAgfVxyXG5cclxuICBnZXQga2V5RXZlbnRJbnB1dCgpOiBPYnNlcnZhYmxlPHtrZXk6IHN0cmluZzsgZG9tRXZlbnQ6IEtleWJvYXJkRXZlbnQ7fT4ge1xyXG4gICAgcmV0dXJuIHRoaXMua2V5RXZlbnRTdWJqZWN0O1xyXG4gIH1cclxuXHJcbiAgZ2V0IHVuZGVybHlpbmcoKTogVGVybWluYWwge1xyXG4gICAgcmV0dXJuIHRoaXMudGVybTtcclxuICB9XHJcblxyXG4gIGdldCBpc0RyYWdnYWJsZU9uRWRnZUFjdGl2YXRlZCgpIHtcclxuICAgIHJldHVybiB0aGlzLmRpc3BsYXlPcHRpb24uYWN0aXZhdGVEcmFnZ2FibGVPbkVkZ2UgIT0gdW5kZWZpbmVkICYmIHRoaXMuZGlzcGxheU9wdGlvbi5maXhlZEdyaWQgPT0gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWZ0ZXIgdXNlciBjb29yZGluYXRlIGRpbWVuc2lvbnMgb2YgdGVybWluYWwsIGl0J3MgY2FsbGVkLlxyXG4gICAqIEBwYXJhbSBsZWZ0IFxyXG4gICAqIEBwYXJhbSB0b3AgXHJcbiAgICogQHBhcmFtIHdpZHRoIFxyXG4gICAqIEBwYXJhbSBoZWlnaHQgXHJcbiAgICovXHJcbiAgb25SZXNpemVFbmQobGVmdDogbnVtYmVyLCB0b3A6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuc2V0VGVybWluYWxEaW1lbnNpb25zKGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBCZWZvcmUgb25SZXNpemVFbmQgaXMgY2FsbGVkLCBpdCB2YWxpYXRlcyBkaW1lbnNpb25zIHRvIGNoYW5nZS5cclxuICAgKiBAcGFyYW0gcmUgZGltZW5zaW9uIHRvIGJlIHN1Ym1pdHRlZCBmcm9tIHJlc2l6YWJsZSBzdHVmZlxyXG4gICAqL1xyXG4gIHZhbGlkYXRvckZhY3RvcnkoKTogKHJlOiBSZXNpemVFdmVudCkgPT4gYm9vbGVhbiB7XHJcbiAgICBjb25zdCBjb21wID0gdGhpcztcclxuICAgIHJldHVybiAocmU6IFJlc2l6ZUV2ZW50KSA9PnsgXHJcbiAgICAgIGNvbnN0IGRpc3BsYXlPcHRpb24gPSBjb21wLmRpc3BsYXlPcHRpb247XHJcbiAgICAgIGlmKGRpc3BsYXlPcHRpb24uYWN0aXZhdGVEcmFnZ2FibGVPbkVkZ2Upe1xyXG4gICAgICAgIGxldCBsZWZ0ID0gcmUucmVjdGFuZ2xlLmxlZnQsIHRvcCA9IHJlLnJlY3RhbmdsZS50b3AsIHdpZHRoID0gcmUucmVjdGFuZ2xlLndpZHRoLCBoZWlnaHQgPSByZS5yZWN0YW5nbGUuaGVpZ2h0O1xyXG4gICAgICAgIGlmICgod2lkdGggPCBkaXNwbGF5T3B0aW9uLmFjdGl2YXRlRHJhZ2dhYmxlT25FZGdlLm1pbldpZHRoKSB8fCAoaGVpZ2h0IDwgZGlzcGxheU9wdGlvbi5hY3RpdmF0ZURyYWdnYWJsZU9uRWRnZS5taW5IZWlnaHQpKSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==