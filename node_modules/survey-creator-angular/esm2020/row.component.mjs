import { Component, Input } from "@angular/core";
import { RowViewModel } from "survey-creator-core";
import { CreatorModelComponent } from "./creator-model.component";
import { AngularComponentFactory } from "survey-angular-ui";
import * as i0 from "@angular/core";
import * as i1 from "survey-angular-ui";
export class CreatorRowComponent extends CreatorModelComponent {
    get row() {
        return this.componentData.row;
    }
    get creator() {
        return this.componentData.creator;
    }
    getModel() {
        return this.model;
    }
    createModel() {
        this.model = new RowViewModel(this.creator, this.row, undefined);
    }
    getPropertiesToTrack() {
        return ["creator", "row"];
    }
}
CreatorRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CreatorRowComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
CreatorRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.3", type: CreatorRowComponent, selector: "svc-row", inputs: { componentData: "componentData" }, usesInheritance: true, ngImport: i0, template: "<ng-template #template>\n  <div [class]=\"model.cssClasses\">\n    <sv-ng-row [row]=\"row\"></sv-ng-row>\n  </div>\n</ng-template>", components: [{ type: i1.RowComponent, selector: "sv-ng-row", inputs: ["row"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CreatorRowComponent, decorators: [{
            type: Component,
            args: [{ selector: "svc-row", template: "<ng-template #template>\n  <div [class]=\"model.cssClasses\">\n    <sv-ng-row [row]=\"row\"></sv-ng-row>\n  </div>\n</ng-template>" }]
        }], propDecorators: { componentData: [{
                type: Input
            }] } });
AngularComponentFactory.Instance.registerComponent("svc-row", CreatorRowComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm93LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3cuY29tcG9uZW50LnRzIiwiLi4vLi4vc3JjL3Jvdy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQWUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sbUJBQW1CLENBQUM7OztBQU01RCxNQUFNLE9BQU8sbUJBQW9CLFNBQVEscUJBQW1DO0lBSzFFLElBQVcsR0FBRztRQUNaLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUM7SUFDaEMsQ0FBQztJQUNELElBQVcsT0FBTztRQUNoQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO0lBQ3BDLENBQUM7SUFDUyxRQUFRO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBQ0QsV0FBVztRQUNULElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFPLFNBQVMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFDRCxvQkFBb0I7UUFDbEIsT0FBTyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDOztnSEFuQlUsbUJBQW1CO29HQUFuQixtQkFBbUIsa0hDVmhDLG9JQUljOzJGRE1ELG1CQUFtQjtrQkFKL0IsU0FBUzsrQkFDRSxTQUFTOzhCQUlWLGFBQWE7c0JBQXJCLEtBQUs7O0FBcUJSLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgUXVlc3Rpb25Sb3dNb2RlbCB9IGZyb20gXCJzdXJ2ZXktY29yZVwiO1xuaW1wb3J0IHsgQ3JlYXRvckJhc2UsIFJvd1ZpZXdNb2RlbCB9IGZyb20gXCJzdXJ2ZXktY3JlYXRvci1jb3JlXCI7XG5pbXBvcnQgeyBDcmVhdG9yTW9kZWxDb21wb25lbnQgfSBmcm9tIFwiLi9jcmVhdG9yLW1vZGVsLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgQW5ndWxhckNvbXBvbmVudEZhY3RvcnkgfSBmcm9tIFwic3VydmV5LWFuZ3VsYXItdWlcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcInN2Yy1yb3dcIixcbiAgdGVtcGxhdGVVcmw6IFwiLi9yb3cuY29tcG9uZW50Lmh0bWxcIlxufSlcbmV4cG9ydCBjbGFzcyBDcmVhdG9yUm93Q29tcG9uZW50IGV4dGVuZHMgQ3JlYXRvck1vZGVsQ29tcG9uZW50PFJvd1ZpZXdNb2RlbD4ge1xuICBASW5wdXQoKSBjb21wb25lbnREYXRhITogeyBjcmVhdG9yOiBDcmVhdG9yQmFzZSwgcm93OiBRdWVzdGlvblJvd01vZGVsIH07XG5cbiAgcHVibGljIG1vZGVsITogUm93Vmlld01vZGVsO1xuXG4gIHB1YmxpYyBnZXQgcm93KCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudERhdGEucm93O1xuICB9XG4gIHB1YmxpYyBnZXQgY3JlYXRvcigpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnREYXRhLmNyZWF0b3I7XG4gIH1cbiAgcHJvdGVjdGVkIGdldE1vZGVsKCk6IFJvd1ZpZXdNb2RlbCB7XG4gICAgcmV0dXJuIHRoaXMubW9kZWw7XG4gIH1cbiAgY3JlYXRlTW9kZWwoKSB7XG4gICAgdGhpcy5tb2RlbCA9IG5ldyBSb3dWaWV3TW9kZWwodGhpcy5jcmVhdG9yLCB0aGlzLnJvdywgPGFueT51bmRlZmluZWQpO1xuICB9XG4gIGdldFByb3BlcnRpZXNUb1RyYWNrKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gW1wiY3JlYXRvclwiLCBcInJvd1wiXTtcbiAgfVxufVxuXG5Bbmd1bGFyQ29tcG9uZW50RmFjdG9yeS5JbnN0YW5jZS5yZWdpc3RlckNvbXBvbmVudChcInN2Yy1yb3dcIiwgQ3JlYXRvclJvd0NvbXBvbmVudCk7IiwiPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZT5cbiAgPGRpdiBbY2xhc3NdPVwibW9kZWwuY3NzQ2xhc3Nlc1wiPlxuICAgIDxzdi1uZy1yb3cgW3Jvd109XCJyb3dcIj48L3N2LW5nLXJvdz5cbiAgPC9kaXY+XG48L25nLXRlbXBsYXRlPiJdfQ==