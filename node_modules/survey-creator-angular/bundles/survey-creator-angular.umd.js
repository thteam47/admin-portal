(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('survey-angular-ui'), require('survey-core'), require('survey-creator-core')) :
    typeof define === 'function' && define.amd ? define('survey-creator-angular', ['exports', '@angular/core', '@angular/common', '@angular/forms', 'survey-angular-ui', 'survey-core', 'survey-creator-core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["survey-creator-angular"] = {}, global.ng.core, global.ng.common, global.ng.forms, global.i1, global.surveyCore, global.surveyCreatorCore));
})(this, (function (exports, i0, i2, i1$1, i1, surveyCore, surveyCreatorCore) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) { if (f !== void 0 && typeof f !== "function")
            throw new TypeError("Function expected"); return f; }
        var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
        var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
        var _, done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
            var context = {};
            for (var p in contextIn)
                context[p] = p === "access" ? {} : contextIn[p];
            for (var p in contextIn.access)
                context.access[p] = contextIn.access[p];
            context.addInitializer = function (f) { if (done)
                throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
            var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
            if (kind === "accessor") {
                if (result === void 0)
                    continue;
                if (result === null || typeof result !== "object")
                    throw new TypeError("Object expected");
                if (_ = accept(result.get))
                    descriptor.get = _;
                if (_ = accept(result.set))
                    descriptor.set = _;
                if (_ = accept(result.init))
                    initializers.push(_);
            }
            else if (_ = accept(result)) {
                if (kind === "field")
                    initializers.push(_);
                else
                    descriptor[key] = _;
            }
        }
        if (target)
            Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
    }
    ;
    function __runInitializers(thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
            value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
    }
    ;
    function __propKey(x) {
        return typeof x === "symbol" ? x : "".concat(x);
    }
    ;
    function __setFunctionName(f, name, prefix) {
        if (typeof name === "symbol")
            name = name.description ? "[".concat(name.description, "]") : "";
        return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
    }
    ;
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function () { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }
    function __classPrivateFieldIn(state, receiver) {
        if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function"))
            throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
    }

    var SvgBundleComponent = /** @class */ (function () {
        function SvgBundleComponent() {
        }
        SvgBundleComponent.prototype.ngOnInit = function () {
            this.svgContainer.nativeElement.innerHTML = surveyCore.SvgRegistry.iconsRenderedHtml();
        };
        return SvgBundleComponent;
    }());
    SvgBundleComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SvgBundleComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    SvgBundleComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SvgBundleComponent, selector: "svc-svg-bundle", viewQueries: [{ propertyName: "svgContainer", first: true, predicate: ["svgContainer"], descendants: true, static: true }], ngImport: i0__namespace, template: "<svg id='sv-icon-holder-global-container' #svgContainer></svg>", isInline: true, styles: [":host { display: none; }"] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SvgBundleComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-svg-bundle",
                        template: "<svg id='sv-icon-holder-global-container' #svgContainer></svg>",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { svgContainer: [{
                    type: i0.ViewChild,
                    args: ["svgContainer", { static: true }]
                }] } });

    var TabbedMenuItemWrapperComponent = /** @class */ (function (_super) {
        __extends(TabbedMenuItemWrapperComponent, _super);
        function TabbedMenuItemWrapperComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TabbedMenuItemWrapperComponent.prototype.getModel = function () {
            return this.model;
        };
        return TabbedMenuItemWrapperComponent;
    }(i1.BaseAngular));
    TabbedMenuItemWrapperComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TabbedMenuItemWrapperComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    TabbedMenuItemWrapperComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TabbedMenuItemWrapperComponent, selector: "svc-tabbed-menu-item-wrapper", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <span class=\"svc-tabbed-menu-item-container\" [class.sv-action--hidden]=\"!model.isVisible\" [class]=\"model.css\">\n    <div class=\"sv-action__content\">\n      <ng-template [component]=\"{ name: model.component || 'svc-tabbed-menu-item', data: { model } }\"></ng-template>\n    </div>\n  </span>\n</ng-template>", styles: [":host { display: none; }"], directives: [{ type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TabbedMenuItemWrapperComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-tabbed-menu-item-wrapper",
                        templateUrl: "./tabbed-menu-item-wrapper.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var TabbledMenuComponent = /** @class */ (function (_super) {
        __extends(TabbledMenuComponent, _super);
        function TabbledMenuComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TabbledMenuComponent.prototype.getModel = function () {
            return this.model;
        };
        TabbledMenuComponent.prototype.ngAfterViewInit = function () {
            this.responsivityManager = new surveyCore.ResponsivityManager(this.container.nativeElement, this.model, ".svc-tabbed-menu-item-container:not(.sv-dots)>.sv-action__content");
        };
        TabbledMenuComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
            this.responsivityManager.dispose();
        };
        return TabbledMenuComponent;
    }(i1.BaseAngular));
    TabbledMenuComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TabbledMenuComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    TabbledMenuComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TabbledMenuComponent, selector: "svc-tabbed-menu", inputs: { model: "model" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-tabbed-menu\" #container>\n    <ng-container *ngFor=\"let action of model.renderedActions\">  \n      <svc-tabbed-menu-item-wrapper [model]=\"action\"></svc-tabbed-menu-item-wrapper>\n    </ng-container>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: TabbedMenuItemWrapperComponent, selector: "svc-tabbed-menu-item-wrapper", inputs: ["model"] }], directives: [{ type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TabbledMenuComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-tabbed-menu",
                        templateUrl: "./tabbed-menu.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }], container: [{
                    type: i0.ViewChild,
                    args: ["container"]
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-tabbed-menu", TabbledMenuComponent);

    var SidebarTabComponent = /** @class */ (function (_super) {
        __extends(SidebarTabComponent, _super);
        function SidebarTabComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SidebarTabComponent.prototype.getModel = function () {
            return this.model;
        };
        return SidebarTabComponent;
    }(i1.BaseAngular));
    SidebarTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SidebarTabComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    SidebarTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SidebarTabComponent, selector: "svc-side-bar-tab", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <ng-container *ngIf=\"model.visible\">\n    <ng-template [component]=\"{ name: model.componentName, data: { model: model.model } }\"></ng-template>\n  </ng-container>\n</ng-template>", styles: [":host { display: none; }"], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SidebarTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-side-bar-tab",
                        templateUrl: "./side-bar-tab.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var SidebarComponent = /** @class */ (function (_super) {
        __extends(SidebarComponent, _super);
        function SidebarComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SidebarComponent.prototype.getModel = function () {
            return this.model;
        };
        SidebarComponent.prototype.ngOnDestroy = function () {
            this.model.resetResizeManager();
            _super.prototype.ngOnDestroy.call(this);
        };
        SidebarComponent.prototype.ngAfterViewInit = function () {
            this.model.initResizeManager(this.container.nativeElement);
        };
        return SidebarComponent;
    }(i1.BaseAngular));
    SidebarComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SidebarComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    SidebarComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SidebarComponent, selector: "svc-side-bar", inputs: { model: "model" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-side-bar\" [class.svc-flyout-side-bar]=\"model.flyoutPanelMode\" [visible]=\"model.hasVisibleTabs\">\n    <div class=\"svc-side-bar__shadow\" (click)=\"model.collapseSidebar()\"></div>\n    <div class=\"svc-flex-column svc-side-bar__wrapper\">\n      <div class=\"svc-side-bar__container\" [visible]=\"model.visible\" #container>\n        <div class=\"svc-side-bar__container-header\">\n          <div class=\"svc-side-bar__container-actions\">\n            <sv-action-bar [model]=\"model.toolbar\"></sv-action-bar>\n          </div>\n          <div *ngIf=\"!!model.headerText\" class=\"svc-side-bar__container-title\">{{model.headerText}}</div>\n        </div>\n        <div class=\"svc-side-bar__container-content\">\n          <ng-container *ngFor=\"let tab of model.tabs\">\n            <svc-side-bar-tab [model]=\"tab\"></svc-side-bar-tab> \n          </ng-container>\n        </div>\n        <div class=\"svc-side-bar__container-close\">\n          <div class=\"sd-btn sd-btn--action svc-side-bar__container-close-button\"\n            (click)=\"model.collapseSidebar()\"> {{ model.closeText }}</div>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.ActionBarComponent, selector: "sv-action-bar, sv-ng-action-bar", inputs: ["model", "handleClick"] }, { type: SidebarTabComponent, selector: "svc-side-bar-tab", inputs: ["model"] }], directives: [{ type: i1__namespace.VisibleDirective, selector: "[visible]", inputs: ["visible"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SidebarComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-side-bar",
                        templateUrl: "./side-bar.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }], container: [{
                    type: i0.ViewChild,
                    args: ["container"]
                }] } });

    var CreatorComponent = /** @class */ (function (_super) {
        __extends(CreatorComponent, _super);
        function CreatorComponent(changeDetectorRef) {
            var _this = _super.call(this, changeDetectorRef) || this;
            changeDetectorRef.detach();
            return _this;
        }
        CreatorComponent.prototype.getModel = function () {
            return this.model;
        };
        Object.defineProperty(CreatorComponent.prototype, "creator", {
            get: function () {
                return this.model;
            },
            enumerable: false,
            configurable: true
        });
        CreatorComponent.prototype.getShouldReattachChangeDetector = function () {
            return false;
        };
        CreatorComponent.prototype.onModelChanged = function () {
            this.changeDetectorRef.detectChanges();
        };
        CreatorComponent.prototype.ngAfterViewInit = function () {
            this.creator.initKeyboardShortcuts(this.container.nativeElement);
            this.creator.initResponsivityManager(this.container.nativeElement);
            _super.prototype.ngOnInit.call(this);
        };
        CreatorComponent.prototype.ngOnDestroy = function () {
            this.creator.removeKeyboardShortcuts(this.container.nativeElement);
            this.creator.resetResponsivityManager();
            _super.prototype.ngOnDestroy.call(this);
        };
        return CreatorComponent;
    }(i1.BaseAngular));
    CreatorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreatorComponent, deps: [{ token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CreatorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CreatorComponent, selector: "survey-creator", inputs: { model: "model" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true, read: i0.ElementRef }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!creator.isCreatorDisposed\">\n  <sv-ng-modal-container></sv-ng-modal-container>\n  <div class=\"svc-creator\" [class.svc-creator--mobile]=\"creator.isMobileView\" #container>\n    <div>\n      <svc-svg-bundle></svc-svg-bundle>\n    </div>\n    <div class=\"svc-full-container svc-creator__area svc-flex-column\"\n      [class.svc-creator__area--with-banner]=\"!creator.haveCommercialLicense\">\n      <div class=\"svc-flex-row svc-full-container\"\n        [class.svc-creator__side-bar--left]=\"creator.sidebarLocation == 'left'\">\n        <div class=\"svc-flex-column svc-flex-row__element svc-flex-row__element--growing\">\n          <div class=\"svc-top-bar\">\n            <div class=\"svc-tabbed-menu-wrapper\" [visible]=\"creator.showTabs\">\n              <svc-tabbed-menu [model]=\"creator.tabbedMenu\"></svc-tabbed-menu>\n            </div>\n            <div *ngIf=\"creator.showToolbar\" class=\"svc-toolbar-wrapper\" [visible]=\"creator.showToolbar\">\n              <sv-action-bar [model]=\"creator.toolbar\"></sv-action-bar>\n            </div>\n          </div>\n          <div class=\"svc-creator__content-wrapper svc-flex-row\"\n            [class.svc-creator__content-wrapper--footer-toolbar]=\"creator.isMobileView\">\n            <div class=\"svc-creator__content-holder svc-flex-column\">\n              <ng-container *ngFor=\"let tab of creator.tabs\">\n                <div class=\"svc-creator-tab\" *ngIf=\"creator.viewType == tab.id && tab.visible\"\n                  [attr.id]=\"'scrollableDiv-' + tab.id\" [class.svc-creator__toolbox--right]=\"creator.toolboxLocation == 'right'\">\n                  <ng-template [component]=\"{ name: tab.componentContent, data: { model: tab.data.model } }\"></ng-template>\n                </div>\n              </ng-container>\n            </div>\n          </div>\n          <div *ngIf=\"creator.isMobileView\" class=\"svc-footer-bar\">\n            <div class=\"svc-toolbar-wrapper\" [visible]=\"creator.isMobileView\">\n              <sv-action-bar [model]=\"creator.footerToolbar\"></sv-action-bar>\n            </div>\n          </div>\n        </div>\n        <div *ngIf=\"creator.sidebar\" [class.sv-mobile-side-bar]=\"creator.isMobileView\">\n          <svc-side-bar [model]=\"creator.sidebar\"></svc-side-bar>\n        </div>\n      </div>\n      <div class=\"svc-creator__banner\" *ngIf=\"!creator.haveCommercialLicense\">\n        <span class=\"svc-creator__non-commercial-text\">\n          <a href=\"https://surveyjs.io/buy\">\n            {{creator.licenseText}}\n          </a>\n        </span>\n      </div>\n      <sv-notifier [notifier]=\"creator.notifier\"></sv-notifier>\n    </div>\n  </div>\n</ng-container>", components: [{ type: i1__namespace.ModalComponent, selector: "sv-ng-modal-container" }, { type: SvgBundleComponent, selector: "svc-svg-bundle" }, { type: TabbledMenuComponent, selector: "svc-tabbed-menu", inputs: ["model"] }, { type: i1__namespace.ActionBarComponent, selector: "sv-action-bar, sv-ng-action-bar", inputs: ["model", "handleClick"] }, { type: SidebarComponent, selector: "svc-side-bar", inputs: ["model"] }, { type: i1__namespace.NotifierComponent, selector: "sv-notifier", inputs: ["notifier"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.VisibleDirective, selector: "[visible]", inputs: ["visible"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreatorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "survey-creator",
                        templateUrl: "./creator.component.html"
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { model: [{
                    type: i0.Input
                }], container: [{
                    type: i0.ViewChild,
                    args: ["container", { read: i0.ElementRef }]
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("survey-widget", i1.SurveyContentComponent);

    var CreatorModelComponent = /** @class */ (function (_super) {
        __extends(CreatorModelComponent, _super);
        function CreatorModelComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CreatorModelComponent.prototype.createHash = function () {
            var _this = this;
            this.hash = {};
            this.getPropertiesToTrack().forEach(function (prop) {
                _this.hash[prop] = _this[prop];
            });
        };
        CreatorModelComponent.prototype.ngOnInit = function () {
            this.createModel();
            this.createHash();
            _super.prototype.ngOnInit.call(this);
        };
        CreatorModelComponent.prototype.ngDoCheck = function () {
            if (this.needUpdateModel())
                this.createModel();
            _super.prototype.ngDoCheck.call(this);
        };
        CreatorModelComponent.prototype.needUpdateModel = function () {
            var _this = this;
            var res = false;
            Object.keys(this.hash).forEach(function (key) {
                if (_this.hash[key] != _this[key]) {
                    _this.hash[key] = _this[key];
                    res = true;
                }
            });
            return res;
        };
        return CreatorModelComponent;
    }(i1.BaseAngular));
    CreatorModelComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreatorModelComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    CreatorModelComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CreatorModelComponent, selector: "ng-component", usesInheritance: true, ngImport: i0__namespace, template: "", isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreatorModelComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: ""
                    }]
            }] });

    var ToolboxToolComponent = /** @class */ (function (_super) {
        __extends(ToolboxToolComponent, _super);
        function ToolboxToolComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.isCompact = false;
            return _this;
        }
        ToolboxToolComponent.prototype.createModel = function () {
            this.model = new surveyCreatorCore.ToolboxToolViewModel(this.item, this.creator);
        };
        ToolboxToolComponent.prototype.getPropertiesToTrack = function () {
            return ["creator", "item"];
        };
        ToolboxToolComponent.prototype.getModel = function () {
            return this.item;
        };
        ToolboxToolComponent.prototype.getPropertiesToUpdateSync = function () {
            return ["mode"];
        };
        return ToolboxToolComponent;
    }(CreatorModelComponent));
    ToolboxToolComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ToolboxToolComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    ToolboxToolComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ToolboxToolComponent, selector: "svc-toolbox-tool", inputs: { creator: "creator", item: "item", isCompact: "isCompact" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n    <div class=\"svc-toolbox__tool\"\n        [class.sv-action--hidden]=\"!item.isVisible\" [class]=\"item.css\" (pointerdown)=\"model.onPointerDown($event)\">\n        <div class=\"sv-action__content\">\n            <div class=\"svc-toolbox__category-separator\" *ngIf=\"item.needSeparator && !creator.toolbox.showCategoryTitles\"></div>\n            <ng-template [component]=\"{ name: item.component || 'svc-toolbox-item', default: 'svc-toolbox-item', data: { model: item, viewModel: model, creator: creator, isCompact: isCompact } }\"></ng-template>\n        </div>\n    </div>\n</ng-template>", styles: [":host { display: none; }"], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ToolboxToolComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-toolbox-tool",
                        templateUrl: "./toolbox-tool.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { creator: [{
                    type: i0.Input
                }], item: [{
                    type: i0.Input
                }], isCompact: [{
                    type: i0.Input
                }] } });

    var ToolboxCategoryComponent = /** @class */ (function (_super) {
        __extends(ToolboxCategoryComponent, _super);
        function ToolboxCategoryComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ToolboxCategoryComponent.prototype.getModel = function () {
            return this.category;
        };
        return ToolboxCategoryComponent;
    }(i1.BaseAngular));
    ToolboxCategoryComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ToolboxCategoryComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    ToolboxCategoryComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ToolboxCategoryComponent, selector: "svc-toolbox-category ", inputs: { category: "category", toolbox: "toolbox" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-toolbox__category\" [class.svc-toolbox__category--collapsed]=\"category.collapsed\">\n    <div class=\"svc-toolbox__category-header\"\n      (click)=\"category.toggleState()\" [key2click] [class.svc-toolbox__category-header--collapsed]=\"toolbox.canCollapseCategories\">\n      <span class=\"svc-toolbox__category-title\">{{category.name}}</span>\n      <div *ngIf=\"toolbox.canCollapseCategories\" class=\"svc-toolbox__category-header__controls\">\n        <svg [iconName]=\"'icon-arrow-down'\" class=\"svc-toolbox__category-header__button svc-string-editor__button--expand\" [size]=\"24\" sv-ng-svg-icon [visible]=\"category.collapsed\"></svg>\n        <svg [iconName]=\"'icon-arrow-up'\" class=\"svc-toolbox__category-header__button svc-string-editor__button--collapse\" [size]=\"24\" sv-ng-svg-icon [visible]=\"!category.collapsed\"></svg>\n      </div>\n    </div>\n      <ng-container *ngFor=\"let item of category.items\">\n        <svc-toolbox-tool [item]=\"item\" [creator]=\"toolbox.creator\" [isCompact]=\"false\" ></svc-toolbox-tool>\n      </ng-container>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }, { type: ToolboxToolComponent, selector: "svc-toolbox-tool", inputs: ["creator", "item", "isCompact"] }], directives: [{ type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.VisibleDirective, selector: "[visible]", inputs: ["visible"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ToolboxCategoryComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-toolbox-category ",
                        templateUrl: "./toolbox-category.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { category: [{
                    type: i0.Input
                }], toolbox: [{
                    type: i0.Input
                }] } });

    var AdaptiveToolboxComponent = /** @class */ (function (_super) {
        __extends(AdaptiveToolboxComponent, _super);
        function AdaptiveToolboxComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(AdaptiveToolboxComponent.prototype, "model", {
            get: function () {
                return this.creator.toolbox;
            },
            enumerable: false,
            configurable: true
        });
        AdaptiveToolboxComponent.prototype.ngAfterViewInit = function () {
            this.responsivityManager =
                new surveyCore.VerticalResponsivityManager(this.container.nativeElement, this.model, ".svc-toolbox__tool:not(.sv-dots)");
        };
        AdaptiveToolboxComponent.prototype.getModel = function () {
            return this.model;
        };
        AdaptiveToolboxComponent.prototype.ngOnDestroy = function () {
            var _a;
            (_a = this.responsivityManager) === null || _a === void 0 ? void 0 : _a.dispose();
            _super.prototype.ngOnDestroy.call(this);
        };
        return AdaptiveToolboxComponent;
    }(i1.BaseAngular));
    AdaptiveToolboxComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AdaptiveToolboxComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    AdaptiveToolboxComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: AdaptiveToolboxComponent, selector: "svc-adaptive-toolbox", inputs: { creator: "creator" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-toolbox\" [class.svc-toolbox--compact]=\"model.isCompact\" #container>\n    <div class=\"svc-toolbox__container\">\n      <ng-container *ngIf=\"!(model.isCompact || model.categories.length == 1 || !model.showCategoryTitles)\">\n        <svc-toolbox-category *ngFor=\"let category of model.categories\" [category]=\"category\" [toolbox]=\"model\"></svc-toolbox-category>\n      </ng-container>\n      <ng-container *ngIf=\"model.isCompact || model.categories.length == 1 || !model.showCategoryTitles\">\n        <div class=\"svc-toolbox__category\">\n          <svc-toolbox-tool *ngFor=\"let item of model.renderedActions\" [creator]=\"creator\" [item]=\"item\" [isCompact]=\"model.isCompact\"></svc-toolbox-tool>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: ToolboxCategoryComponent, selector: "svc-toolbox-category ", inputs: ["category", "toolbox"] }, { type: ToolboxToolComponent, selector: "svc-toolbox-tool", inputs: ["creator", "item", "isCompact"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AdaptiveToolboxComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-adaptive-toolbox",
                        templateUrl: "./adaptive-toolbox.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { creator: [{
                    type: i0.Input
                }], container: [{
                    type: i0.ViewChild,
                    args: ["container"]
                }] } });

    var PageDesignerComponent = /** @class */ (function (_super) {
        __extends(PageDesignerComponent, _super);
        function PageDesignerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PageDesignerComponent.prototype.createModel = function () {
            var _a;
            if (this.model) {
                (_a = this.previousModel) === null || _a === void 0 ? void 0 : _a.dispose();
                this.adorner = new surveyCreatorCore.PageAdorner(this.creator, this.model);
            }
        };
        PageDesignerComponent.prototype.getModel = function () {
            return this.adorner;
        };
        PageDesignerComponent.prototype.getPropertiesToTrack = function () {
            return ["creator", "model"];
        };
        PageDesignerComponent.prototype.addNewQuestion = function (event) {
            event.stopPropagation();
            this.adorner.addNewQuestion(this.adorner, event);
        };
        PageDesignerComponent.prototype.selectQuestionType = function (event) {
            event.stopPropagation();
            this.adorner.questionTypeSelectorModel.action();
        };
        PageDesignerComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
            this.adorner.dispose();
        };
        return PageDesignerComponent;
    }(CreatorModelComponent));
    PageDesignerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PageDesignerComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    PageDesignerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PageDesignerComponent, selector: "svc-page", inputs: { model: "model", survey: "survey", creator: "creator", isGhost: "isGhost" }, usesInheritance: true, ngImport: i0__namespace, template: "<div *ngIf=\"model && adorner && (isGhost === undefined || isGhost === adorner.isGhost)\" class=\"svc-page__content\" [class]=\"adorner.css\" [key2click]\n  (click)=\"adorner.select(adorner, $event)\" (mouseover)=\"adorner.hover($event, $event.currentTarget)\"\n  (mouseleave)=\"adorner.hover($event, $event.target)\" [id]=\"adorner.page.id\" data-bind=\"clickBubble: false\">\n  <div class=\"svc-page__content-actions\">\n    <sv-action-bar [model]=\"adorner.actionContainer\"></sv-action-bar>\n  </div>\n  <page [model]=\"model\" [survey]=\"survey\"></page>\n  <div *ngIf=\"adorner.showAddQuestionButton\" class=\"svc-page__add-new-question svc-btn\" [key2click]\n    (click)=\"addNewQuestion($event)\" (mouseover)=\"adorner.hoverStopper($event, $event.currentTarget)\"\n    data-bind=\"clickBubble: false\">\n    <span class=\"svc-text svc-text--normal svc-text--bold\">\n      {{ adorner.addNewQuestionText }}\n    </span>\n    <!-- ko with: questionTypeSelectorModel -->\n    <button type=\"button\" [key2click] (click)=\"selectQuestionType($event)\"\n      [attr.title]=\"adorner.questionTypeSelectorModel.title\" [attr.aria-label]=\"adorner.questionTypeSelectorModel.title\"\n      class=\"svc-page__question-type-selector\">\n      <svg class=\"svc-page__question-type-selector-icon\" [iconName]=\"adorner.questionTypeSelectorModel.iconName\"\n        [size]=\"24\" sv-ng-svg-icon></svg>\n        <sv-ng-popup [popupModel]=\"adorner.questionTypeSelectorModel.popupModel\"></sv-ng-popup>\n      </button>\n    <!-- /ko -->\n  </div>\n</div>", components: [{ type: i1__namespace.ActionBarComponent, selector: "sv-action-bar, sv-ng-action-bar", inputs: ["model", "handleClick"] }, { type: i1__namespace.PageComponent, selector: "page, sv-ng-page", inputs: ["model", "survey"] }, { type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }, { type: i1__namespace.PopupComponent, selector: "sv-ng-popup, '[sv-ng-popup]'", inputs: ["popupModel"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PageDesignerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-page",
                        templateUrl: "./page.component.html",
                        styles: []
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }], survey: [{
                    type: i0.Input
                }], creator: [{
                    type: i0.Input
                }], isGhost: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-page", PageDesignerComponent);

    var DesignerPagesComponent = /** @class */ (function (_super) {
        __extends(DesignerPagesComponent, _super);
        function DesignerPagesComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DesignerPagesComponent.prototype.getModel = function () {
            return this.model.pagesController;
        };
        Object.defineProperty(DesignerPagesComponent.prototype, "creator", {
            get: function () {
                return this.model.creator;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DesignerPagesComponent.prototype, "survey", {
            get: function () {
                return this.creator.survey;
            },
            enumerable: false,
            configurable: true
        });
        return DesignerPagesComponent;
    }(i1.BaseAngular));
    DesignerPagesComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DesignerPagesComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    DesignerPagesComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: DesignerPagesComponent, selector: "svc-designer-pages", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <svc-page class=\"svc-page\" [attr.data-sv-drop-target-survey-element]=\"'newGhostPage'\" [attr.data-sv-drop-target-page]=\"model.pagesController.page2Display.name\" [model]=\"model.pagesController.page2Display\" [survey]=\"survey\" [creator]=\"creator\"></svc-page>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: PageDesignerComponent, selector: "svc-page", inputs: ["model", "survey", "creator", "isGhost"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DesignerPagesComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-designer-pages",
                        templateUrl: "./designer-pages.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var PageNavigatorItemComponent = /** @class */ (function (_super) {
        __extends(PageNavigatorItemComponent, _super);
        function PageNavigatorItemComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PageNavigatorItemComponent.prototype.getModel = function () {
            return this.model;
        };
        Object.defineProperty(PageNavigatorItemComponent.prototype, "anyModel", {
            get: function () {
                return this.model;
            },
            enumerable: false,
            configurable: true
        });
        PageNavigatorItemComponent.prototype.click = function (event) {
            this.getModel().action();
            event.stopPropagation();
            event.preventDefault();
        };
        return PageNavigatorItemComponent;
    }(i1.BaseAngular));
    PageNavigatorItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PageNavigatorItemComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    PageNavigatorItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PageNavigatorItemComponent, selector: "svc-page-navigator-item", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-page-navigator-item\">\n    <div class=\"svc-page-navigator-item-content\" (click)=\"click($event)\" [key2click]\n      [class.svc-page-navigator-item--selected]=\"model.active\"\n      [class.svc-page-navigator-item--disabled]=\"anyModel.disabled\">\n      <div class=\"svc-page-navigator-item__dot\" [attr.title]=\"model.title\"></div>\n\n      <div class=\"svc-page-navigator-item__banner svc-item__banner\">\n        <span class=\"svc-text svc-text--small svc-text--bold\">{{model.title}}</span>\n        <span class=\"svc-page-navigator-item__dot\"></span>\n      </div>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], directives: [{ type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PageNavigatorItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-page-navigator-item",
                        templateUrl: "./page-navigator-item.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var PageNavigatorComponent = /** @class */ (function (_super) {
        __extends(PageNavigatorComponent, _super);
        function PageNavigatorComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PageNavigatorComponent.prototype.createModel = function () {
            this.model = new surveyCreatorCore.PageNavigatorViewModel(this.pagesController, this.pageEditMode);
        };
        PageNavigatorComponent.prototype.getModel = function () {
            return this.model;
        };
        PageNavigatorComponent.prototype.getPropertiesToTrack = function () {
            return ["pagesController", "pageEditMode"];
        };
        PageNavigatorComponent.prototype.ngAfterViewInit = function () {
            var _a, _b;
            if (this.pageEditMode !== "bypage") {
                var el = this.container.nativeElement;
                if (!!el && !!((_b = (_a = el.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.parentElement)) {
                    var self_1 = this;
                    var scrollableViewPort = el.parentElement.parentElement.parentElement;
                    scrollableViewPort.onscroll = function (ev) {
                        return self_1.model.onContainerScroll(ev.currentTarget);
                    };
                    self_1.model.setScrollableContainer(scrollableViewPort);
                    self_1.model.setItemsContainer(el.parentElement);
                }
            }
        };
        PageNavigatorComponent.prototype.ngOnDestroy = function () {
            var _a, _b;
            _super.prototype.ngOnDestroy.call(this);
            var el = this.container.nativeElement;
            if (!!el && !!((_b = (_a = el.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.parentElement)) {
                el.parentElement.parentElement.parentElement.onscroll = undefined;
            }
            this.model.stopItemsContainerHeightObserver();
            this.model.dispose();
        };
        return PageNavigatorComponent;
    }(CreatorModelComponent));
    PageNavigatorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PageNavigatorComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    PageNavigatorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PageNavigatorComponent, selector: "svc-page-navigator", inputs: { pagesController: "pagesController", pageEditMode: "pageEditMode" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-page-navigator\" #container>\n    <ng-container *ngIf=\"model.visible\">\n      <div class=\"svc-page-navigator__selector\"\n          (click)=\"model.togglePageSelector($event)\" [key2click] [attr.title]=\"model.pageSelectorCaption\" [class.svc-page-navigator__selector--opened]=\"model.isPopupOpened\">\n          <svg class=\"svc-page-navigator__navigator-icon\" [iconName]=\"model.icon\" [size]=\"24\" sv-ng-svg-icon></svg>\n          <sv-ng-popup [popupModel]=\"model.popupModel\"></sv-ng-popup>\n      </div>\n      <div>\n        <svc-page-navigator-item *ngFor=\"let item of model.visibleItems\" [model]=\"item\"></svc-page-navigator-item>\n      </div>\n    </ng-container>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }, { type: i1__namespace.PopupComponent, selector: "sv-ng-popup, '[sv-ng-popup]'", inputs: ["popupModel"] }, { type: PageNavigatorItemComponent, selector: "svc-page-navigator-item", inputs: ["model"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PageNavigatorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-page-navigator",
                        templateUrl: "./page-navigator.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { pagesController: [{
                    type: i0.Input
                }], pageEditMode: [{
                    type: i0.Input
                }], container: [{
                    type: i0.ViewChild,
                    args: ["container"]
                }] } });

    var DesignerSurveyComponent = /** @class */ (function (_super) {
        __extends(DesignerSurveyComponent, _super);
        function DesignerSurveyComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DesignerSurveyComponent.prototype.getModel = function () {
            return this.model.survey;
        };
        Object.defineProperty(DesignerSurveyComponent.prototype, "creator", {
            get: function () {
                return this.model.creator;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DesignerSurveyComponent.prototype, "survey", {
            get: function () {
                return this.creator.survey;
            },
            enumerable: false,
            configurable: true
        });
        return DesignerSurveyComponent;
    }(i1.BaseAngular));
    DesignerSurveyComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DesignerSurveyComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    DesignerSurveyComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: DesignerSurveyComponent, selector: "svc-designer-survey", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div [class]=\"model.designerCss\" [style.maxWidth]=\"survey.renderedWidth\">\n    <div *ngIf=\"creator.allowEditSurveyTitle\" class=\"svc-designer-header\">\n      <div *ngIf=\"survey.renderedHasHeader\" [class]=\"survey.css.header\" [survey]=\"survey\" sv-ng-survey-header></div>\n    </div>\n\n    <!-- ko if: survey.isShowProgressBarOnTop -->\n    <!-- ko component: { name: 'sv-progress-' + survey.progressBarType, params: { model: survey } } -->\n    <!-- /ko -->\n    <!-- /ko -->\n    <ng-container *ngIf=\"creator.pageEditMode !== 'bypage'\">\n      <ng-container *ngFor=\"let page of survey.pages\">\n        <svc-page class=\"svc-page\" *ngIf=\"!model.showNewPage || page !== model.newPage\"\n          [attr.data-sv-drop-target-survey-element]=\"page.name\" [attr.data-sv-drop-target-page]=\"page.name\"\n          [model]=\"page\" [survey]=\"survey\" [creator]=\"creator\"></svc-page>\n      </ng-container>\n      <svc-page *ngIf=\"model.showNewPage && model.newPage\" class=\"svc-page\"\n        [attr.data-sv-drop-target-survey-element]=\"'newGhostPage'\" [model]=\"model.newPage\" [survey]=\"survey\"\n        [creator]=\"creator\" [isGhost]=\"true\"></svc-page>\n    </ng-container>\n    <ng-container *ngIf=\"model.pagesController.page2Display && creator.pageEditMode === 'bypage'\">\n      <svc-designer-pages [model]=\"model\"></svc-designer-pages>\n    </ng-container>\n\n    <!-- ko if: survey.isShowProgressBarOnBottom -->\n    <!-- ko component: { name: 'sv-progress-' + survey.progressBarType, params: { model: survey } } -->\n    <!-- /ko -->\n    <!-- /ko -->\n  </div>\n\n  <div *ngIf=\"creator.showPageNavigator\" class=\"svc-tab-designer__page-navigator\">\n    <svc-page-navigator [pagesController]=\"model.pagesController\" [pageEditMode]=\"creator.pageEditMode\">\n    </svc-page-navigator>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SurveyHeaderComponent, selector: "'[sv-ng-survey-header]'", inputs: ["survey"] }, { type: PageDesignerComponent, selector: "svc-page", inputs: ["model", "survey", "creator", "isGhost"] }, { type: DesignerPagesComponent, selector: "svc-designer-pages", inputs: ["model"] }, { type: PageNavigatorComponent, selector: "svc-page-navigator", inputs: ["pagesController", "pageEditMode"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DesignerSurveyComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-designer-survey",
                        templateUrl: "./designer-survey.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var DesignerTabComponent = /** @class */ (function (_super) {
        __extends(DesignerTabComponent, _super);
        function DesignerTabComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(DesignerTabComponent.prototype, "survey", {
            get: function () {
                return this.creator.survey;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DesignerTabComponent.prototype, "creator", {
            get: function () {
                return this.model.creator;
            },
            enumerable: false,
            configurable: true
        });
        DesignerTabComponent.prototype.getModel = function () {
            return this.model;
        };
        return DesignerTabComponent;
    }(i1.BaseAngular));
    DesignerTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DesignerTabComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    DesignerTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: DesignerTabComponent, selector: "svc-tab-designer", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-flex-column\">\n    <svc-adaptive-toolbox *ngIf=\"model.isToolboxVisible\" [creator]=\"creator\"></svc-adaptive-toolbox>\n  </div>\n  <div class=\"svc-tab-designer\" [class]=\"model.getRootCss()\" (click)=\"model.clickDesigner()\">\n    <div class=\"svc-tab-designer_content\">\n      <ng-container *ngIf=\"model.showPlaceholder\">\n        <div *ngIf=\"creator.showHeaderInEmptySurvey && creator.allowEditSurveyTitle\" class=\"svc-designer-header\">\n          <div *ngIf=\"survey.renderedHasHeader\" [class]=\"survey.css.header\" [survey]=\"survey\" sv-ng-survey-header></div>\n        </div>\n        <div class=\"svc-designer__placeholder-container\" [attr.data-sv-drop-target-survey-element]=\"'newGhostPage'\">\n          <span class=\"svc-designer-placeholder-text svc-text svc-text--normal\">\n            {{ model.placeholderText }}\n          </span>\n          <svc-page class=\"svc-designer-placeholder-page\" [model]=\"model.newPage\" [survey]=\"survey\" [creator]=\"creator\"></svc-page>\n        </div>\n      </ng-container>\n\n      <ng-container *ngIf=\"!model.showPlaceholder\">\n        <svc-designer-survey [model]=\"model\"></svc-designer-survey>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: AdaptiveToolboxComponent, selector: "svc-adaptive-toolbox", inputs: ["creator"] }, { type: i1__namespace.SurveyHeaderComponent, selector: "'[sv-ng-survey-header]'", inputs: ["survey"] }, { type: PageDesignerComponent, selector: "svc-page", inputs: ["model", "survey", "creator", "isGhost"] }, { type: DesignerSurveyComponent, selector: "svc-designer-survey", inputs: ["model"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: DesignerTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-tab-designer",
                        templateUrl: "./designer.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-tab-designer", DesignerTabComponent);

    var TabbedMenuItemComponent = /** @class */ (function (_super) {
        __extends(TabbedMenuItemComponent, _super);
        function TabbedMenuItemComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TabbedMenuItemComponent.prototype.getModel = function () {
            return this.model;
        };
        return TabbedMenuItemComponent;
    }(i1.BaseAngular));
    TabbedMenuItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TabbedMenuItemComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    TabbedMenuItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TabbedMenuItemComponent, selector: "svc-tabbed-menu-item", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div\n    class=\"svc-tabbed-menu-item\"\n    [class.svc-tabbed-menu-item--selected]=\"model.active\"\n    [class.svc-tabbed-menu-item--disabled]=\"model.disabled\"\n    (click)=\"model.action()\" [key2click]\n  >\n    <span\n      class=\"svc-text svc-text--normal svc-tabbed-menu-item__text\"\n      [class.svc-text--bold]=\"model.active\"\n    >\n    {{model.title}}\n  </span>\n  </div>\n</ng-template>\n", styles: [":host { display: none; }"], directives: [{ type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TabbedMenuItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-tabbed-menu-item",
                        templateUrl: "./tabbed-menu-item.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-tabbed-menu-item", TabbedMenuItemComponent);

    var ObjectSelectorComponent = /** @class */ (function (_super) {
        __extends(ObjectSelectorComponent, _super);
        function ObjectSelectorComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ObjectSelectorComponent.prototype.getModel = function () {
            return this.model;
        };
        return ObjectSelectorComponent;
    }(i1.BaseAngular));
    ObjectSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ObjectSelectorComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    ObjectSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ObjectSelectorComponent, selector: "svc-object-selector", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n    <ng-container *ngIf=\"model.isVisible\">\n        <sv-ng-list [model]=\"model.list\"></sv-ng-list>\n    </ng-container>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.ListComponent, selector: "sv-ng-list, '[sv-ng-list]'", inputs: ["model"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ObjectSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-object-selector",
                        templateUrl: "./object-selector.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-object-selector", ObjectSelectorComponent);

    var PropertyGridComponent = /** @class */ (function (_super) {
        __extends(PropertyGridComponent, _super);
        function PropertyGridComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PropertyGridComponent.prototype.getModel = function () {
            return this.model;
        };
        PropertyGridComponent.prototype.getPropertiesToUpdateSync = function () {
            return ["survey"];
        };
        return PropertyGridComponent;
    }(i1.BaseAngular));
    PropertyGridComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PropertyGridComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    PropertyGridComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PropertyGridComponent, selector: "svc-property-grid", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n    <survey-content *ngIf=\"!!model.survey\" [model]=\"model.survey\"></survey-content>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SurveyContentComponent, selector: "survey-content", inputs: ["model"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PropertyGridComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-property-grid",
                        templateUrl: "./property-grid.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("buttongroup-question", i1.ButtonGroupQuestionComponent);
    i1.AngularComponentFactory.Instance.registerComponent("svc-property-grid", PropertyGridComponent);

    var TextareaJsonEditorComponent = /** @class */ (function (_super) {
        __extends(TextareaJsonEditorComponent, _super);
        function TextareaJsonEditorComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TextareaJsonEditorComponent.prototype.getModel = function () {
            return this.model;
        };
        TextareaJsonEditorComponent.prototype.ngOnInit = function () {
            this.model.canShowErrors = false;
            _super.prototype.ngOnInit.call(this);
        };
        return TextareaJsonEditorComponent;
    }(i1.BaseAngular));
    TextareaJsonEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TextareaJsonEditorComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    TextareaJsonEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TextareaJsonEditorComponent, selector: "svc-tab-json-editor-textarea", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-creator-tab__content\">\n    <div class=\"svc-json-editor-tab__content\">\n      <textarea class=\"svc-json-editor-tab__content-area\"\n        [attr.aria-label]=\"model.ariaLabel\"\n        [disabled]=\"model.readOnly\"\n        [(ngModel)]=\"model.text\"\n        (keydown)=\"model.checkKey(model, $event)\">\n      </textarea>\n      <button type=\"button\" *ngIf=\"model.userFriendlyErrors.length !== 0\" class=\"svc-json-editor-tab__errros_button\"\n        (click)=\"model.toggleErrors()\">{{model.errorButtonText}}</button>\n      <ng-container *ngIf=\"model.canShowErrors\">\n        <div class=\"svc-json-editor-tab__content-errors\" *ngFor=\"let error of model.userFriendlyErrors\">\n          <span><b>Error:</b></span>\n          <span>{{error}}</span>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], directives: [{ type: i1__namespace$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TextareaJsonEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-tab-json-editor-textarea",
                        templateUrl: "./json-editor-textarea.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-tab-json-editor-textarea", TextareaJsonEditorComponent);

    var AceJsonEditorComponent = /** @class */ (function (_super) {
        __extends(AceJsonEditorComponent, _super);
        function AceJsonEditorComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AceJsonEditorComponent.prototype.getModel = function () {
            return this.model;
        };
        AceJsonEditorComponent.prototype.ngAfterViewInit = function () {
            //todo fix ts 
            this.model.init(window.ace.edit(this.inputEl.nativeElement));
        };
        return AceJsonEditorComponent;
    }(i1.BaseAngular));
    AceJsonEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AceJsonEditorComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    AceJsonEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: AceJsonEditorComponent, selector: "svc-tab-json-editor-ace", inputs: { model: "model" }, viewQueries: [{ propertyName: "inputEl", first: true, predicate: ["inputEl"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n    <div class=\"svc-creator-tab__content\">\n        <div class=\"svc-json-editor-tab__content\">\n            <div class=\"svc-json-editor-tab__ace-editor\" #inputEl></div>\n        </div>\n    </div>\n</ng-template>", styles: [":host { display: none; }"] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AceJsonEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-tab-json-editor-ace",
                        templateUrl: "./json-editor-ace.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }], inputEl: [{
                    type: i0.ViewChild,
                    args: ["inputEl"]
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-tab-json-editor-ace", AceJsonEditorComponent);

    var LogicAddButtonComponent = /** @class */ (function (_super) {
        __extends(LogicAddButtonComponent, _super);
        function LogicAddButtonComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LogicAddButtonComponent.prototype.getModel = function () {
            return this.model;
        };
        LogicAddButtonComponent.prototype.onClick = function (event) {
            event.stopPropagation();
            this.model.action();
        };
        return LogicAddButtonComponent;
    }(i1.BaseAngular));
    LogicAddButtonComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: LogicAddButtonComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    LogicAddButtonComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: LogicAddButtonComponent, selector: "svc-tab-logic-add-btn", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div role=\"button\" class=\"svc-logic-tab__content-action svc-btn\"\n        (click)=\"onClick($event)\" [key2click] [class.svc-logic-tab__content-action--disabled]=\"model.enabled !== undefined && !model.enabled\">\n        <span class=\"svc-text svc-text--normal svc-text--bold\">\n          {{model.title}}\n        </span>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], directives: [{ type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: LogicAddButtonComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-tab-logic-add-btn",
                        templateUrl: "./logic-add-btn.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var LogicTabComponent = /** @class */ (function (_super) {
        __extends(LogicTabComponent, _super);
        function LogicTabComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LogicTabComponent.prototype.getModel = function () {
            return this.model;
        };
        return LogicTabComponent;
    }(i1.BaseAngular));
    LogicTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: LogicTabComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    LogicTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: LogicTabComponent, selector: "svc-tab-logic", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-creator-tab__content\">\n    <div class=\"svc-plugin-tab__content svc-logic-tab__content\" [class.svc-logic-tab__empty]=\"!model.hasItems\">\n      <survey-content [model]=\"model.itemsSurvey\"></survey-content>\n      <div *ngIf=\"!model.hasItems\" class=\"svc-logic-tab__content-empty\">\n        <span class=\"svc-text\">{{model.emptyTabPlaceholder}}</span>\n      </div>\n      <ng-container *ngIf=\"!model.readOnly\">\n        <svc-tab-logic-add-btn [model]=\"model.addNewButton\"></svc-tab-logic-add-btn>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SurveyContentComponent, selector: "survey-content", inputs: ["model"] }, { type: LogicAddButtonComponent, selector: "svc-tab-logic-add-btn", inputs: ["model"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: LogicTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-tab-logic",
                        templateUrl: "./logic.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-tab-logic", LogicTabComponent);

    var ActionButtonComponent = /** @class */ (function (_super) {
        __extends(ActionButtonComponent, _super);
        function ActionButtonComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.classes = "";
            _this.selected = false;
            _this.disabled = false;
            _this.text = "";
            _this.title = "";
            _this.allowBubble = false;
            return _this;
        }
        ActionButtonComponent.prototype.onClick = function (event) {
            this.click();
            if (!this.allowBubble) {
                event.stopPropagation();
            }
        };
        return ActionButtonComponent;
    }(i1.EmbeddedViewContentComponent));
    ActionButtonComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ActionButtonComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    ActionButtonComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ActionButtonComponent, selector: "svc-action-button", inputs: { classes: "classes", click: "click", selected: "selected", disabled: "disabled", text: "text", title: "title", allowBubble: "allowBubble" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <span *ngIf=\"disabled\" class=\"svc-action-button svc-action-button--disabled\"\n    [class]=\"classes\" [attr.title]=\"title\">{{text}}</span>\n  <span *ngIf=\"!disabled\" role=\"button\" class=\"svc-action-button\"\n    (click)=\"onClick($event)\" [key2click] [attr.title]=\"title\" [class.svc-action-button--selected]=\"selected\" [class]=\"classes\">{{text}}</span>\n</ng-template>", styles: [":host { display: none; }"], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ActionButtonComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-action-button",
                        templateUrl: "./action-button.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { classes: [{
                    type: i0.Input
                }], click: [{
                    type: i0.Input
                }], selected: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], text: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], allowBubble: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-action-button", ActionButtonComponent);

    var LinkValueQuestionComponent = /** @class */ (function (_super) {
        __extends(LinkValueQuestionComponent, _super);
        function LinkValueQuestionComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(LinkValueQuestionComponent.prototype, "clearCaption", {
            get: function () {
                return surveyCreatorCore.editorLocalization.getString("pe.clear");
            },
            enumerable: false,
            configurable: true
        });
        return LinkValueQuestionComponent;
    }(i1.QuestionAngular));
    LinkValueQuestionComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: LinkValueQuestionComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    LinkValueQuestionComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: LinkValueQuestionComponent, selector: "svc-link-value", usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <svc-action-button [text]=\"model.linkValueText\" [click]=\"model.doLinkClick.bind(model)\" [selected]=\"model.isSelected\"\n    [disabled]=\"!model.isClickable\" [classes]=\"model.linkSetButtonCssClasses\" [title]=\"model.tooltip\">\n  </svc-action-button>\n  <ng-container *ngIf=\"!model.isReadOnly && model.showClear\">\n    <svc-action-button [text]=\"clearCaption\" [click]=\"model.doClearClick.bind(model)\" [selected]=\"model.isSelected\"\n      [disabled]=\"false\" [classes]=\"model.linkClearButtonCssClasses\">\n    </svc-action-button>\n  </ng-container>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: ActionButtonComponent, selector: "svc-action-button", inputs: ["classes", "click", "selected", "disabled", "text", "title", "allowBubble"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: LinkValueQuestionComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-link-value",
                        templateUrl: "./question-link-value.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }] });
    i1.AngularComponentFactory.Instance.registerComponent("linkvalue-question", LinkValueQuestionComponent);

    var EmbeddedSurveyQuestionComponent = /** @class */ (function (_super) {
        __extends(EmbeddedSurveyQuestionComponent, _super);
        function EmbeddedSurveyQuestionComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(EmbeddedSurveyQuestionComponent.prototype, "survey", {
            get: function () {
                return this.model.embeddedSurvey;
            },
            enumerable: false,
            configurable: true
        });
        EmbeddedSurveyQuestionComponent.prototype.onModelChanged = function () {
            var _this = this;
            _super.prototype.onModelChanged.call(this);
            if (!!this.model) {
                this.model.onEmbeddedSurveyValueChanged = function () {
                    _this.detectChanges();
                };
            }
        };
        return EmbeddedSurveyQuestionComponent;
    }(i1.QuestionAngular));
    EmbeddedSurveyQuestionComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EmbeddedSurveyQuestionComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    EmbeddedSurveyQuestionComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: EmbeddedSurveyQuestionComponent, selector: "svc-embeddedsurvey-question", usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <ng-container *ngIf=\"!!model && !!survey && survey.currentPage\">\n    <page [model]=\"survey.currentPage\" [survey]=\"survey\"></page>\n  </ng-container>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.PageComponent, selector: "page, sv-ng-page", inputs: ["model", "survey"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: EmbeddedSurveyQuestionComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-embeddedsurvey-question",
                        templateUrl: "./question-embedded-survey.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }] });
    i1.AngularComponentFactory.Instance.registerComponent("embeddedsurvey-question", EmbeddedSurveyQuestionComponent);

    var TranslationTabComponent = /** @class */ (function (_super) {
        __extends(TranslationTabComponent, _super);
        function TranslationTabComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TranslationTabComponent.prototype.getModel = function () {
            return this.model;
        };
        return TranslationTabComponent;
    }(i1.BaseAngular));
    TranslationTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TranslationTabComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    TranslationTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TranslationTabComponent, selector: "svc-tab-translation", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-creator-tab__content svc-translation-tab\">\n    <div class=\"st-content\">\n      <div *ngIf=\"model.isEmpty\" class=\"st-no-strings\">\n        <span>{{model.noStringsText}}</span>\n      </div>\n      <div *ngIf=\"!model.isEmpty\" class=\"svc-flex-column st-strings-wrapper\">\n        <div class=\"svc-flex-row st-strings-header\">\n          <survey-content [model]=\"model.stringsHeaderSurvey\"></survey-content>\n        </div>\n        <div class=\"svc-flex-row svc-plugin-tab__content st-strings\">\n          <survey-content [model]=\"model.stringsSurvey\"></survey-content>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SurveyContentComponent, selector: "survey-content", inputs: ["model"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TranslationTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-tab-translation",
                        templateUrl: "./translation.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-tab-translation", TranslationTabComponent);

    var TranslationSkeletonComponent = /** @class */ (function (_super) {
        __extends(TranslationSkeletonComponent, _super);
        function TranslationSkeletonComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TranslationSkeletonComponent;
    }(i1.EmbeddedViewContentComponent));
    TranslationSkeletonComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TranslationSkeletonComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    TranslationSkeletonComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TranslationSkeletonComponent, selector: "sd-translation-line-skeleton", usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"sd-translation-line-skeleton\"></div>\n</ng-template>", styles: [":host { display: none; }"] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TranslationSkeletonComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "sd-translation-line-skeleton",
                        templateUrl: "./translation-line-skeleton.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }] });
    i1.AngularComponentFactory.Instance.registerComponent("sd-translation-line-skeleton", TranslationSkeletonComponent);

    var SimulatorComponent = /** @class */ (function (_super) {
        __extends(SimulatorComponent, _super);
        function SimulatorComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SimulatorComponent.prototype.getModel = function () {
            return this.model;
        };
        Object.defineProperty(SimulatorComponent.prototype, "simulatorFrame", {
            get: function () {
                return this.model.simulatorFrame;
            },
            enumerable: false,
            configurable: true
        });
        SimulatorComponent.prototype.activateZoom = function () {
            if (this.model.device !== "desktop") {
                this.model.activateZoom();
            }
        };
        SimulatorComponent.prototype.deactivateZoom = function () {
            if (this.model.device !== "desktop") {
                this.model.deactivateZoom();
            }
        };
        return SimulatorComponent;
    }(i1.BaseAngular));
    SimulatorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SimulatorComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    SimulatorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SimulatorComponent, selector: "survey-simulator", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div [class]=\"model.getRootCss()\" (keydown)=\"model.tryToZoom($event, $event)\" (mouseover)=\"activateZoom()\" (mouseout)=\"deactivateZoom()\">\n    <div *ngIf=\"model.hasFrame\" class=\"svd-simulator-wrapper\" id=\"svd-simulator-wrapper\" [style.width]=\"simulatorFrame.frameWidth + 'px'\" [style.height]=\"simulatorFrame.frameHeight + 'px'\">\n      <div class=\"svd-simulator-frame\" [style.width]=\"simulatorFrame.landscapedFrameWidth + 'px'\" [style.height]=\"simulatorFrame.landscapedFrameHeight + 'px'\" [class]=\"simulatorFrame.cssClass\"></div>\n      <div class=\"svd-simulator\" [style.width]=\"simulatorFrame.deviceWidth + 'px'\" [style.height]=\"simulatorFrame.deviceHeight + 'px'\" [style.transform]=\"'scale(' + simulatorFrame.scale + ') translate(-50%, -50%)'\">\n        <div class=\"svd-simulator-content\">\n          <ng-template [component]=\"{ name: 'survey-widget', data: { model: model.survey } }\"></ng-template>\n        </div>\n      </div>\n    </div>\n    <div *ngIf=\"!model.hasFrame\" class=\"svd-simulator-content\">\n      <ng-template [component]=\"{ name: 'survey-widget', data: { model: model.survey } }\"></ng-template>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SimulatorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "survey-simulator",
                        templateUrl: "./simulator.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var TestAgainActionComponent = /** @class */ (function (_super) {
        __extends(TestAgainActionComponent, _super);
        function TestAgainActionComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TestAgainActionComponent.prototype.getModel = function () {
            return this.model;
        };
        return TestAgainActionComponent;
    }(i1.BaseAngular));
    TestAgainActionComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TestAgainActionComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    TestAgainActionComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TestAgainActionComponent, selector: "survey-test-again", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div role=\"button\" class=\"svc-preview__test-again svc-btn\" (click)=\"model.action()\" [key2click]>\n    <span class=\"svc-text svc-text--normal svc-text--bold\">\n      {{model.title}}\n    </span>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], directives: [{ type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TestAgainActionComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "survey-test-again",
                        templateUrl: "./test-again.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var SurveyResultsTableRowComponent = /** @class */ (function (_super) {
        __extends(SurveyResultsTableRowComponent, _super);
        function SurveyResultsTableRowComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SurveyResultsTableRowComponent.prototype.getModel = function () {
            return this.model;
        };
        return SurveyResultsTableRowComponent;
    }(i1.BaseAngular));
    SurveyResultsTableRowComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SurveyResultsTableRowComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    SurveyResultsTableRowComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SurveyResultsTableRowComponent, selector: "survey-results-table-row", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <tr (click)=\"model.toggle()\" [key2click]>\n    <td class=\"svd-dark-border-color\"\n        [style.paddingLeft]=\"model.textMargin \">\n        <span *ngIf=\"model.isNode\" class=\"svd-test-results__marker\"\n              [class.svd-test-results__marker--expanded]=\"!model.collapsed\"\n                         [style.left]=\"model.markerMargin\">\n            <svg [iconName]=\"'icon-expand_16x16'\" [size]=\"16\" sv-ng-svg-icon></svg>\n        </span>\n        <span >{{model.title}}</span></td>\n    <td [class.svd-test-results__node-value]=\"model.isNode\" [class.svd-dark-border-color]=\"!model.isNode\">\n      {{model.getString(model.displayValue)}}\n    </td>\n  </tr>\n  <ng-container *ngIf=\"model.isNode && !model.collapsed\">\n    <ng-container *ngFor=\"let row of model.data\">\n      <survey-results-table-row [model]=\"row\"></survey-results-table-row>\n    </ng-container>\n  </ng-container>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }, { type: SurveyResultsTableRowComponent, selector: "survey-results-table-row", inputs: ["model"] }], directives: [{ type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SurveyResultsTableRowComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "survey-results-table-row",
                        templateUrl: "./survey-results-row.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });

    var SurveyResultsComponent = /** @class */ (function (_super) {
        __extends(SurveyResultsComponent, _super);
        function SurveyResultsComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SurveyResultsComponent.prototype.createModel = function () {
            if (!!this.survey) {
                this.model = new surveyCreatorCore.SurveyResultsModel(this.survey);
            }
        };
        SurveyResultsComponent.prototype.getModel = function () {
            return this.model;
        };
        SurveyResultsComponent.prototype.getPropertiesToTrack = function () {
            return ["survey"];
        };
        return SurveyResultsComponent;
    }(CreatorModelComponent));
    SurveyResultsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SurveyResultsComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    SurveyResultsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SurveyResultsComponent, selector: "survey-results", inputs: { survey: "survey" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n<div class=\"svd-test-results\">\n  <div class=\"svd-test-results__header\">\n      <div class=\"svd-test-results__header-text\">{{model.surveyResultsText}}</div>\n      <div class=\"svd-test-results__header-types\">\n        <svc-action-button [text]=\"model.surveyResultsTableText\" [click]=\"model.selectTableClick\" [disabled]=\"false\" [selected]=\"model.isTableSelected\"></svc-action-button>\n        <svc-action-button [text]=\"model.surveyResultsJsonText\" [click]=\"model.selectJsonClick\" [disabled]=\"false\" [selected]=\"model.isJsonSelected\"></svc-action-button>\n      </div>\n  </div>\n  <div class=\"svd-test-results__text svd-light-bg-color\" [visible]=\"model.resultViewType === 'text'\">\n      <div>{{model.resultText}}</div>\n  </div>\n  <div class=\"svd-test-results__table svd-light-bg-color\" [visible]=\"model.resultViewType === 'table'\">\n      <table>\n          <thead>\n              <tr class=\"svd-light-background-color\">\n                  <th class=\"svd-dark-border-color\">{{model.resultsTitle}}</th>\n                  <th class=\"svd-dark-border-color\">{{model.resultsDisplayValue}}</th>\n              </tr>\n          </thead>\n          <tbody>\n            <ng-container *ngFor=\"let row of model.resultData\">\n              <survey-results-table-row [model]=\"row\"></survey-results-table-row>\n            </ng-container>\n          </tbody>\n      </table>\n  </div>\n</div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: ActionButtonComponent, selector: "svc-action-button", inputs: ["classes", "click", "selected", "disabled", "text", "title", "allowBubble"] }, { type: SurveyResultsTableRowComponent, selector: "survey-results-table-row", inputs: ["model"] }], directives: [{ type: i1__namespace.VisibleDirective, selector: "[visible]", inputs: ["visible"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SurveyResultsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "survey-results",
                        templateUrl: "./survey-results.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { survey: [{
                    type: i0.Input
                }] } });

    var TestTabComponent = /** @class */ (function (_super) {
        __extends(TestTabComponent, _super);
        function TestTabComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TestTabComponent.prototype.getModel = function () {
            return this.model;
        };
        return TestTabComponent;
    }(i1.BaseAngular));
    TestTabComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TestTabComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    TestTabComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TestTabComponent, selector: "svc-tab-test", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-creator-tab__content svc-test-tab__content\" [class.svc-creator-tab__content--with-toolbar]=\"model.isPageToolbarVisible\">\n    <div class=\"svc-plugin-tab__content\">\n      <survey-simulator [model]=\"model.simulator\"></survey-simulator>\n      <ng-container *ngIf=\"!model.isRunning\">\n        <survey-test-again [model]=\"model.testAgainAction\"></survey-test-again>\n        <survey-results [survey]=\"model.survey\"></survey-results>\n      </ng-container>\n    </div>\n    <div *ngIf=\"model.isPageToolbarVisible\" class=\"svc-plugin-tab__content-actions svc-test-tab__content-actions\">\n      <sv-action-bar [model]=\"model.pages\"></sv-action-bar>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: SimulatorComponent, selector: "survey-simulator", inputs: ["model"] }, { type: TestAgainActionComponent, selector: "survey-test-again", inputs: ["model"] }, { type: SurveyResultsComponent, selector: "survey-results", inputs: ["survey"] }, { type: i1__namespace.ActionBarComponent, selector: "sv-action-bar, sv-ng-action-bar", inputs: ["model", "handleClick"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TestTabComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-tab-test",
                        templateUrl: "./test.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-tab-test", TestTabComponent);

    var QuestionDesignerComponent = /** @class */ (function (_super) {
        __extends(QuestionDesignerComponent, _super);
        function QuestionDesignerComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.adornerComponent = "";
            return _this;
        }
        Object.defineProperty(QuestionDesignerComponent.prototype, "creator", {
            get: function () {
                return this.componentData.data;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuestionDesignerComponent.prototype, "model", {
            get: function () {
                return this.componentData.model;
            },
            enumerable: false,
            configurable: true
        });
        QuestionDesignerComponent.prototype.createModel = function () {
            if (this.componentData) {
                this.adorner = new surveyCreatorCore.QuestionAdornerViewModel(this.creator, this.model, null);
            }
        };
        QuestionDesignerComponent.prototype.getPropertiesToTrack = function () {
            return ["model", "creator"];
        };
        QuestionDesignerComponent.prototype.getModel = function () {
            return this.adorner;
        };
        Object.defineProperty(QuestionDesignerComponent.prototype, "placeholderComponent", {
            get: function () {
                return "";
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuestionDesignerComponent.prototype, "placeholderComponentData", {
            get: function () {
                return null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuestionDesignerComponent.prototype, "showPlaceholderComponent", {
            get: function () {
                return false;
            },
            enumerable: false,
            configurable: true
        });
        QuestionDesignerComponent.prototype.selectQuestionType = function (event) {
            var _a;
            event.stopPropagation();
            (_a = this.adorner.questionTypeSelectorModel) === null || _a === void 0 ? void 0 : _a.action(this.adorner.questionTypeSelectorModel, event);
        };
        QuestionDesignerComponent.prototype.addNewQuestion = function (event) {
            event.stopPropagation();
            this.adorner.addNewQuestion();
        };
        return QuestionDesignerComponent;
    }(CreatorModelComponent));
    QuestionDesignerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionDesignerComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    QuestionDesignerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: QuestionDesignerComponent, selector: "svc-question", inputs: { componentName: "componentName", componentData: "componentData" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div *ngIf=\"adorner\" class=\"svc-question__adorner\" [class]=\"adorner.rootCss()\"\n    (mouseover)=\"adorner.hover($event, $event.currentTarget)\" (mouseleave)=\"adorner.hover($event, $event.currentTarget)\"\n    [attr.data-sv-drop-target-survey-element]=\"adorner.element.name || null\" #container>\n\n    <div [class]=\"adorner.css()\" [key2click] (click)=\"adorner.select(adorner, $event)\">\n      <div *ngIf=\"adorner.allowDragging\" class=\"svc-question__drag-area\" (pointerdown)=\"adorner.onPointerDown($event)\">\n        <svg class=\"svc-question__drag-element\" [iconName]=\"'icon-drag-area-indicator_24x16'\" [size]=\"24\"\n          sv-ng-svg-icon></svg>\n      </div>\n\n      <ng-template [component]=\"{ name: componentName, data: componentData }\"></ng-template>\n\n      <div *ngIf=\"adorner.isEmptyElement && !showPlaceholderComponent\" class=\"svc-panel__placeholder_frame\">\n        <div class=\"svc-panel__placeholder\">{{ adorner.placeholderText }}</div>\n      </div>\n      <ng-template *ngIf=\"adorner.isEmptyElement && !!showPlaceholderComponent\"\n        [component]=\"{ name: placeholderComponent, data: placeholderComponentData }\">\n      </ng-template>\n\n      <ng-template *ngIf=\"adornerComponent\"\n        [component]=\"{ name: adornerComponent, data: { adorner: adorner, question: model } }\">\n      </ng-template>\n\n      <div class=\"svc-question__content-actions\">\n        <sv-action-bar [model]=\"adorner.actionContainer\" [handleClick]=\"false\"></sv-action-bar>\n      </div>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }, { type: i1__namespace.ActionBarComponent, selector: "sv-action-bar, sv-ng-action-bar", inputs: ["model", "handleClick"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }, { type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionDesignerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-question",
                        templateUrl: "./question.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { componentName: [{
                    type: i0.Input
                }], componentData: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-question", QuestionDesignerComponent);

    var ItemValueDesignerComponent = /** @class */ (function (_super) {
        __extends(ItemValueDesignerComponent, _super);
        function ItemValueDesignerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ItemValueDesignerComponent.prototype, "creator", {
            get: function () {
                return this.componentData.data.creator;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemValueDesignerComponent.prototype, "question", {
            get: function () {
                return this.componentData.question;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ItemValueDesignerComponent.prototype, "item", {
            get: function () {
                return this.componentData.model;
            },
            enumerable: false,
            configurable: true
        });
        ItemValueDesignerComponent.prototype.onBlur = function (event) {
            this.adorner.onFocusOut(event);
        };
        ItemValueDesignerComponent.prototype.createModel = function () {
            if (this.componentData) {
                this.adorner = new surveyCreatorCore.ItemValueWrapperViewModel(this.creator, this.question, this.item);
            }
        };
        ItemValueDesignerComponent.prototype.getPropertiesToTrack = function () {
            return ["creator", "question", "item"];
        };
        ItemValueDesignerComponent.prototype.getModel = function () {
            return this.adorner;
        };
        return ItemValueDesignerComponent;
    }(CreatorModelComponent));
    ItemValueDesignerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ItemValueDesignerComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    ItemValueDesignerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ItemValueDesignerComponent, selector: "svc-item-value", inputs: { componentName: "componentName", componentData: "componentData" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-item-value-wrapper\" (pointerdown)=\"adorner.onPointerDown($event)\"\n    [attr.data-sv-drop-target-item-value]=\"adorner.isDraggable ? item.value : null\"\n    [ngClass]=\"{'svc-item-value--new': adorner.isNew, 'svc-item-value--dragging': adorner.isDragging, 'svc-item-value--ghost': adorner.isDragDropGhost, 'svc-item-value--movedown': adorner.isDragDropMoveDown, 'svc-item-value--moveup': adorner.isDragDropMoveUp}\">\n    <div class=\"svc-item-value__ghost\"></div>\n    <div class=\"svc-item-value-controls\">\n      <span *ngIf=\"adorner.isDraggable\" class=\"svc-item-value-controls__button svc-item-value-controls__drag\">\n        <svg class=\"svc-item-value-controls__drag-icon\" [iconName]=\"'icon-drag-area-indicator'\" [size]=\"24\"\n          [attr.title]=\"adorner.dragTooltip\" sv-ng-svg-icon></svg>\n      </span>\n      <span *ngIf=\"adorner.allowAdd\" class=\"svc-item-value-controls__button svc-item-value-controls__add\" [key2click]\n        (click)=\"adorner.add(adorner)\" [attr.aria-label]=\"undefined\"><svg [iconName]=\"'icon-add_16x16'\" [size]=\"16\"\n          [attr.title]=\"undefined\" sv-ng-svg-icon></svg></span>\n      <span *ngIf=\"adorner.allowRemove\" class=\"svc-item-value-controls__button svc-item-value-controls__remove\"\n        [key2click] (click)=\"adorner.remove(adorner)\" (blur)=\"onBlur($event)\" [attr.aria-label]=\"undefined\"><svg\n          [iconName]=\"'icon-remove_16x16'\" [size]=\"16\" [attr.title]=\"undefined\" sv-ng-svg-icon></svg></span>\n    </div>\n\n    <div class=\"svc-item-value__item\" (click)=\"adorner.select(adorner, $event)\">\n      <ng-template [component]=\"{ name: componentName, data: componentData }\"></ng-template>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }], directives: [{ type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }, { type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ItemValueDesignerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-item-value",
                        templateUrl: "./item-value.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { componentName: [{
                    type: i0.Input
                }], componentData: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-item-value", ItemValueDesignerComponent);

    var ImageItemValueDesignerComponent = /** @class */ (function (_super) {
        __extends(ImageItemValueDesignerComponent, _super);
        function ImageItemValueDesignerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ImageItemValueDesignerComponent.prototype, "creator", {
            get: function () {
                return this.componentData.data.creator;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImageItemValueDesignerComponent.prototype, "question", {
            get: function () {
                return this.componentData.question;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImageItemValueDesignerComponent.prototype, "item", {
            get: function () {
                return this.componentData.model;
            },
            enumerable: false,
            configurable: true
        });
        ImageItemValueDesignerComponent.prototype.createModel = function () {
            if (this.componentData) {
                this.adorner = new surveyCreatorCore.ImageItemValueWrapperViewModel(this.creator, this.question, this.item, null, null);
            }
        };
        ImageItemValueDesignerComponent.prototype.getPropertiesToTrack = function () {
            return ["creator", "question", "item"];
        };
        ImageItemValueDesignerComponent.prototype.getModel = function () {
            return this.adorner;
        };
        Object.defineProperty(ImageItemValueDesignerComponent.prototype, "showDragDropGhostOnTop", {
            get: function () {
                return this.adorner.ghostPosition === "top";
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImageItemValueDesignerComponent.prototype, "showDragDropGhostOnBottom", {
            get: function () {
                return this.adorner.ghostPosition === "bottom";
            },
            enumerable: false,
            configurable: true
        });
        ImageItemValueDesignerComponent.prototype.blockEvent = function (event) {
            event.stopPropagation();
        };
        ImageItemValueDesignerComponent.prototype.getNewItemStyle = function () {
            var needStyle = !this.adorner.getIsNewItemSingle();
            return { width: needStyle ? this.question.renderedImageWidth : undefined, height: needStyle ? this.question.renderedImageHeight : undefined };
        };
        ImageItemValueDesignerComponent.prototype.ngAfterViewInit = function () {
            this.adorner.itemsRoot = this.container.nativeElement;
        };
        return ImageItemValueDesignerComponent;
    }(CreatorModelComponent));
    ImageItemValueDesignerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ImageItemValueDesignerComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    ImageItemValueDesignerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ImageItemValueDesignerComponent, selector: "svc-image-item-value", inputs: { componentName: "componentName", componentData: "componentData" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true, read: i0.ElementRef }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div (pointerdown)=\"adorner.onPointerDown($event)\" [class]=\"adorner.getRootCss()\" [attr.data-sv-drop-target-item-value]=\"adorner.isDraggable ? this.item.value : null\" #container>\n    <div class=\"svc-image-item-value-wrapper__ghost\" [style]=\"getNewItemStyle()\"></div>\n\n    <div class=\"svc-image-item-value-wrapper__content\">\n      <input type=\"file\" aria-hidden=\"true\" tabindex=\"-1\" accept=\"image/*\" class=\"svc-choose-file-input\" />\n\n      <ng-container *ngIf=\"!adorner.isNew\">\n        <div *ngIf=\"!adorner.isNew\" class=\"svc-image-item-value__item\">\n          <ng-template [component]=\"{ name: componentName, data: componentData }\"></ng-template>\n        </div>\n        <span class=\"svc-image-item-value-controls__button svc-image-item-value-controls__drag-area-indicator\" (pointerdown)=\"adorner.onPointerDown($event)\" [attr.title]=\"undefined\" [attr.aria-label]=\"undefined\">\n          <svg [iconName]=\"'icon-drag-area-indicator'\" [size]=\"24\" sv-ng-svg-icon></svg>\n        </span>\n        <div class=\"svc-image-item-value-controls\" data-bind=\"event: { pointerdown: blockEvent }\">\n          <ng-container *ngIf=\"adorner.allowRemove && !adorner.isUploading\">\n            <span class=\"svc-image-item-value-controls__button svc-image-item-value-controls__choose-file\" (click)=\"adorner.chooseFile(adorner)\" [key2click] [attr.title]=\"undefined\" [attr.aria-label]=\"undefined\">\n              <svg [iconName]=\"'icon-file'\" [size]=\"24\" sv-ng-svg-icon></svg>\n            </span>\n            <span class=\"svc-image-item-value-controls__button svc-image-item-value-controls__remove\" (click)=\"adorner.remove(adorner)\" [key2click] [attr.title]=\"undefined\" [attr.aria-label]=\"undefined\">\n              <svg [iconName]=\"'icon-delete'\" [size]=\"24\" sv-ng-svg-icon></svg>\n            </span>\n          </ng-container>\n        </div>\n      </ng-container>\n\n      <ng-container *ngIf=\"adorner.isNew\">\n        <div class=\"svc-image-item-value__item\"\n          data-bind=\"event: { dragover: dragover, drop: drop, dragleave: dragleave }\">\n          <div class=\"sd-imagepicker__item sd-imagepicker__item--inline\">\n            <label class=\"sd-imagepicker__label\">\n              <div [style]=\"getNewItemStyle()\" class=\"sd-imagepicker__image\"></div>\n            </label>\n          </div>\n        </div>\n\n        <div class=\"svc-image-item-value-controls\" data-bind=\"event: { pointerdown: blockEvent }\">\n          <span class=\"svc-image-item-value-controls__button svc-image-item-value-controls__add\" [key2click] (click)=\"adorner.chooseNewFile(adorner)\" [attr.title]=\"undefined\" [attr.aria-label]=\"undefined\">\n            <svg *ngIf=\"adorner.allowAdd && !adorner.isUploading\" [iconName]=\"'icon-add-lg'\" [size]=\"24\" sv-ng-svg-icon></svg>\n          </span>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }, { type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ImageItemValueDesignerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-image-item-value",
                        templateUrl: "./image-item-value.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { componentName: [{
                    type: i0.Input
                }], componentData: [{
                    type: i0.Input
                }], container: [{
                    type: i0.ViewChild,
                    args: ["container", { read: i0.ElementRef }]
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-image-item-value", ImageItemValueDesignerComponent);

    var QuestionDropdownDesignerComponent = /** @class */ (function (_super) {
        __extends(QuestionDropdownDesignerComponent, _super);
        function QuestionDropdownDesignerComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.adornerComponent = "svc-dropdown-question-adorner";
            return _this;
        }
        QuestionDropdownDesignerComponent.prototype.createModel = function () {
            if (this.componentData) {
                this.adorner = new surveyCreatorCore.QuestionDropdownAdornerViewModel(this.creator, this.model, null);
            }
        };
        return QuestionDropdownDesignerComponent;
    }(QuestionDesignerComponent));
    QuestionDropdownDesignerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionDropdownDesignerComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    QuestionDropdownDesignerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: QuestionDropdownDesignerComponent, selector: "svc-dropdown-question", usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div *ngIf=\"adorner\" class=\"svc-question__adorner\" [class]=\"adorner.rootCss()\"\n    (mouseover)=\"adorner.hover($event, $event.currentTarget)\" (mouseleave)=\"adorner.hover($event, $event.currentTarget)\"\n    [attr.data-sv-drop-target-survey-element]=\"adorner.element.name || null\" #container>\n\n    <div [class]=\"adorner.css()\" [key2click] (click)=\"adorner.select(adorner, $event)\">\n      <div *ngIf=\"adorner.allowDragging\" class=\"svc-question__drag-area\" (pointerdown)=\"adorner.onPointerDown($event)\">\n        <svg class=\"svc-question__drag-element\" [iconName]=\"'icon-drag-area-indicator_24x16'\" [size]=\"24\"\n          sv-ng-svg-icon></svg>\n      </div>\n\n      <ng-template [component]=\"{ name: componentName, data: componentData }\"></ng-template>\n\n      <div *ngIf=\"adorner.isEmptyElement && !showPlaceholderComponent\" class=\"svc-panel__placeholder_frame\">\n        <div class=\"svc-panel__placeholder\">{{ adorner.placeholderText }}</div>\n      </div>\n      <ng-template *ngIf=\"adorner.isEmptyElement && !!showPlaceholderComponent\"\n        [component]=\"{ name: placeholderComponent, data: placeholderComponentData }\">\n      </ng-template>\n\n      <ng-template *ngIf=\"adornerComponent\"\n        [component]=\"{ name: adornerComponent, data: { adorner: adorner, question: model } }\">\n      </ng-template>\n\n      <div class=\"svc-question__content-actions\">\n        <sv-action-bar [model]=\"adorner.actionContainer\" [handleClick]=\"false\"></sv-action-bar>\n      </div>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }, { type: i1__namespace.ActionBarComponent, selector: "sv-action-bar, sv-ng-action-bar", inputs: ["model", "handleClick"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }, { type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionDropdownDesignerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-dropdown-question",
                        templateUrl: "../question.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }] });
    i1.AngularComponentFactory.Instance.registerComponent("svc-dropdown-question", QuestionDropdownDesignerComponent);
    var QuestionDropdownAdornerDesignerComponent = /** @class */ (function (_super) {
        __extends(QuestionDropdownAdornerDesignerComponent, _super);
        function QuestionDropdownAdornerDesignerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        QuestionDropdownAdornerDesignerComponent.prototype.getItemValueComponentName = function (item) {
            return this.question.getItemValueWrapperComponentName(item) || "sv-ng-selectbase-item";
        };
        QuestionDropdownAdornerDesignerComponent.prototype.getItemValueComponentData = function (item) {
            return {
                componentName: "sv-ng-selectbase-item",
                componentData: {
                    question: this.question,
                    model: item,
                    inputType: "radio",
                    data: this.question.getItemValueWrapperComponentData(item)
                }
            };
        };
        return QuestionDropdownAdornerDesignerComponent;
    }(i1.EmbeddedViewContentComponent));
    QuestionDropdownAdornerDesignerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionDropdownAdornerDesignerComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    QuestionDropdownAdornerDesignerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: QuestionDropdownAdornerDesignerComponent, selector: "svc-dropdown-question-adorner", inputs: { adorner: "adorner", question: "question" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-question__dropdown-choices--wrapper\">\n    <div class=\"svc-question__dropdown-choices\">\n      <div *ngFor=\"let item of adorner.getRenderedItems()\" [class]=\"adorner.getChoiceCss()\"\n        data-bind=\"css: $parent.getChoiceCss()\">\n        <ng-template [component]=\"{ name: getItemValueComponentName(item), data: getItemValueComponentData(item) }\">\n        </ng-template>\n      </div>\n    </div>\n    <svc-action-button *ngIf=\"adorner.needToCollapse\" [text]=\"adorner.getButtonText()\"\n      [click]=\"adorner.switchCollapse.bind(adorner)\" [allowBubble]=\"true\"> \n    </svc-action-button>\n    <!-- ko if: needToCollapse -->\n    <!-- <svc-action-button params=\"text: getButtonText(), click: switchCollapse, allowBubble: true\">\n    </svc-action-button> -->\n    <!-- /ko -->\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: ActionButtonComponent, selector: "svc-action-button", inputs: ["classes", "click", "selected", "disabled", "text", "title", "allowBubble"] }], directives: [{ type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionDropdownAdornerDesignerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-dropdown-question-adorner",
                        templateUrl: "./question-dropdown.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { adorner: [{
                    type: i0.Input
                }], question: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-dropdown-question-adorner", QuestionDropdownAdornerDesignerComponent);

    var QuestionImageDesignerComponent = /** @class */ (function (_super) {
        __extends(QuestionImageDesignerComponent, _super);
        function QuestionImageDesignerComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.adornerComponent = "svc-image-question-adorner";
            return _this;
        }
        QuestionImageDesignerComponent.prototype.createModel = function () {
            var _a;
            if (this.componentData) {
                this.adorner = new surveyCreatorCore.QuestionImageAdornerViewModel(this.creator, this.model, null, (_a = this.viewContainerRef) === null || _a === void 0 ? void 0 : _a.element.nativeElement.nextSibling);
            }
        };
        Object.defineProperty(QuestionImageDesignerComponent.prototype, "placeholderComponent", {
            get: function () {
                return "file-question";
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuestionImageDesignerComponent.prototype, "placeholderComponentData", {
            get: function () {
                return { model: this.adorner.filePresentationModel };
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuestionImageDesignerComponent.prototype, "showPlaceholderComponent", {
            get: function () {
                return !!this.placeholderComponentData;
            },
            enumerable: false,
            configurable: true
        });
        QuestionImageDesignerComponent.prototype.ngAfterViewInit = function () {
            this.adorner.questionRoot = this.container.nativeElement;
        };
        return QuestionImageDesignerComponent;
    }(QuestionDesignerComponent));
    QuestionImageDesignerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionImageDesignerComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    QuestionImageDesignerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: QuestionImageDesignerComponent, selector: "svc-image-question", viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true, read: i0.ElementRef }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div *ngIf=\"adorner\" class=\"svc-question__adorner\" [class]=\"adorner.rootCss()\"\n    (mouseover)=\"adorner.hover($event, $event.currentTarget)\" (mouseleave)=\"adorner.hover($event, $event.currentTarget)\"\n    [attr.data-sv-drop-target-survey-element]=\"adorner.element.name || null\" #container>\n\n    <div [class]=\"adorner.css()\" [key2click] (click)=\"adorner.select(adorner, $event)\">\n      <div *ngIf=\"adorner.allowDragging\" class=\"svc-question__drag-area\" (pointerdown)=\"adorner.onPointerDown($event)\">\n        <svg class=\"svc-question__drag-element\" [iconName]=\"'icon-drag-area-indicator_24x16'\" [size]=\"24\"\n          sv-ng-svg-icon></svg>\n      </div>\n\n      <ng-template [component]=\"{ name: componentName, data: componentData }\"></ng-template>\n\n      <div *ngIf=\"adorner.isEmptyElement && !showPlaceholderComponent\" class=\"svc-panel__placeholder_frame\">\n        <div class=\"svc-panel__placeholder\">{{ adorner.placeholderText }}</div>\n      </div>\n      <ng-template *ngIf=\"adorner.isEmptyElement && !!showPlaceholderComponent\"\n        [component]=\"{ name: placeholderComponent, data: placeholderComponentData }\">\n      </ng-template>\n\n      <ng-template *ngIf=\"adornerComponent\"\n        [component]=\"{ name: adornerComponent, data: { adorner: adorner, question: model } }\">\n      </ng-template>\n\n      <div class=\"svc-question__content-actions\">\n        <sv-action-bar [model]=\"adorner.actionContainer\" [handleClick]=\"false\"></sv-action-bar>\n      </div>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }, { type: i1__namespace.ActionBarComponent, selector: "sv-action-bar, sv-ng-action-bar", inputs: ["model", "handleClick"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }, { type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionImageDesignerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-image-question",
                        templateUrl: "../question.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { container: [{
                    type: i0.ViewChild,
                    args: ["container", { read: i0.ElementRef }]
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-image-question", QuestionImageDesignerComponent);
    var QuestionImageAdornerDesignerComponent = /** @class */ (function (_super) {
        __extends(QuestionImageAdornerDesignerComponent, _super);
        function QuestionImageAdornerDesignerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return QuestionImageAdornerDesignerComponent;
    }(i1.EmbeddedViewContentComponent));
    QuestionImageAdornerDesignerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionImageAdornerDesignerComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    QuestionImageAdornerDesignerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: QuestionImageAdornerDesignerComponent, selector: "svc-image-question-adorner", inputs: { adorner: "adorner", question: "question" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-image-question-controls\">\n    <ng-container *ngIf=\"adorner.allowEdit && !adorner.isUploading && !adorner.isEmptyElement\">\n      <input type=\"file\" aria-hidden=\"true\" tabindex=\"-1\" accept=\"image/*\" class=\"svc-choose-file-input\" />\n      <span class=\"svc-image-question-controls__button\" [key2click] [attr.title]=\"undefined\" [attr.aria-label]=\"undefined\">\n        <svg  [iconName]=\"'icon-file'\" [size]=\"24\" (click)=\"adorner.chooseFile(adorner)\" sv-ng-svg-icon></svg>\n      </span>\n    </ng-container>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionImageAdornerDesignerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-image-question-adorner",
                        templateUrl: "./question-image.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { adorner: [{
                    type: i0.Input
                }], question: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-image-question-adorner", QuestionImageAdornerDesignerComponent);

    var PanelDesignerComponent = /** @class */ (function (_super) {
        __extends(PanelDesignerComponent, _super);
        function PanelDesignerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PanelDesignerComponent;
    }(QuestionDesignerComponent));
    PanelDesignerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PanelDesignerComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    PanelDesignerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PanelDesignerComponent, selector: "svc-panel", usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div *ngIf=\"adorner\" class=\"svc-question__adorner\" [class]=\"adorner.rootCss()\"\n    (mouseover)=\"adorner.hover($event, $event.currentTarget)\" (mouseleave)=\"adorner.hover($event, $event.currentTarget)\"\n    [attr.data-sv-drop-target-survey-element]=\"adorner.element.name || null\" #container>\n\n    <div [class]=\"adorner.css()\" [key2click]\n      (click)=\"adorner.element.isInteractiveDesignElement ? adorner.select(adorner, $event) : null\"\n      [attr.tabindex]=\"adorner.element.isInteractiveDesignElement ? undefined : -1\">\n      <div *ngIf=\"adorner.allowDragging && adorner.element.isInteractiveDesignElement\" class=\"svc-question__drag-area\"\n        (pointerdown)=\"adorner.onPointerDown($event)\">\n        <svg class=\"svc-question__drag-element\" [iconName]=\"'icon-drag-area-indicator_24x16'\" [size]=\"24\"\n          sv-ng-svg-icon></svg>\n      </div>\n\n      <ng-template [component]=\"{ name: componentName, data: componentData }\"></ng-template>\n\n      <div *ngIf=\"adorner.isEmptyElement\" class=\"svc-panel__placeholder_frame\">\n        <div class=\"svc-panel__placeholder\">{{ adorner.placeholderText }}</div>\n        <div *ngIf=\"adorner.showAddQuestionButton\" class=\"svc-panel__add-new-question svc-action-button\" [key2click]\n          (click)=\"addNewQuestion($event)\">\n          <span class=\"svc-text svc-text--normal svc-text--bold\">\n            {{ adorner.addNewQuestionText }}\n          </span>\n        </div>\n      </div>\n\n      <ng-template *ngIf=\"adornerComponent && adorner.element.isInteractiveDesignElement\"\n        [component]=\"{ name: adornerComponent, data: { adorner: adorner, question: model } }\">\n      </ng-template>\n\n      <div *ngIf=\"!adorner.isEmptyElement && adorner.showAddQuestionButton\"\n        class=\"svc-panel__add-new-question-container\">\n        <div class=\"svc-panel__add-new-question svc-action-button\" [key2click] (click)=\"addNewQuestion($event)\">\n          <span class=\"svc-text svc-text--normal svc-text--bold\">\n            {{ adorner.addNewQuestionText }}\n          </span>\n        </div>\n        <button type=\"button\" [attr.title]=\"adorner.addNewQuestionText\" [key2click] (click)=\"selectQuestionType($event)\"\n          class=\"svc-panel__question-type-selector\">\n          <svg class=\"svc-panel__question-type-selector-icon\" [iconName]=\"adorner.questionTypeSelectorModel.iconName\"\n            [size]=\"24\" sv-ng-svg-icon></svg>\n          <sv-ng-popup [popupModel]=\"adorner.questionTypeSelectorModel.popupModel\"></sv-ng-popup>\n        </button>\n      </div>\n\n      <div *ngIf=\"adorner.element.isInteractiveDesignElement\" class=\"svc-question__content-actions\">\n        <sv-action-bar [model]=\"adorner.actionContainer\" [handleClick]=\"false\"></sv-action-bar>\n      </div>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }, { type: i1__namespace.PopupComponent, selector: "sv-ng-popup, '[sv-ng-popup]'", inputs: ["popupModel"] }, { type: i1__namespace.ActionBarComponent, selector: "sv-action-bar, sv-ng-action-bar", inputs: ["model", "handleClick"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }, { type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: PanelDesignerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-panel",
                        templateUrl: "./panel.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }] });
    i1.AngularComponentFactory.Instance.registerComponent("svc-panel", PanelDesignerComponent);

    var ToolboxItemComponent = /** @class */ (function (_super) {
        __extends(ToolboxItemComponent, _super);
        function ToolboxItemComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.isCompact = false;
            return _this;
        }
        ToolboxItemComponent.prototype.getModel = function () {
            return this.viewModel;
        };
        Object.defineProperty(ToolboxItemComponent.prototype, "item", {
            get: function () {
                return this.model;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ToolboxItemComponent.prototype, "ariaLabel", {
            get: function () {
                return this.item.tooltip + " " + surveyCreatorCore.editorLocalization.getString("toolbox") + " item";
            },
            enumerable: false,
            configurable: true
        });
        return ToolboxItemComponent;
    }(i1.BaseAngular));
    ToolboxItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ToolboxItemComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    ToolboxItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ToolboxItemComponent, selector: "svc-toolbox-item", inputs: { creator: "creator", model: "model", isCompact: "isCompact", viewModel: "viewModel" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-toolbox__item\" role=\"button\" [attr.aria-label]=\"ariaLabel\"\n    [class]=\"'svc-toolbox__item--' + item.iconName\" (click)=\"viewModel.click($event)\" [key2click]>\n    <span class=\"svc-toolbox__item-container\">\n      <svg [iconName]=\"item.iconName\" [size]=\"24\" [title]=\"ariaLabel\" sv-ng-svg-icon></svg>\n    </span>\n    <span *ngIf=\"isCompact\" class=\"svc-toolbox__item-banner svc-item__banner\">\n      <svg [iconName]=\"item.iconName\" [size]=\"24\" [title]=\"ariaLabel\" class=\"svc-toolbox__item-icon\" sv-ng-svg-icon></svg>\n      <span class=\"svc-toolbox__item-title\">{{item.title}}</span>\n    </span>\n    <span *ngIf=\"!isCompact\" class=\"svc-toolbox__item-title\">\n      {{item.title}}\n    </span>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }], directives: [{ type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ToolboxItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-toolbox-item",
                        templateUrl: "./toolbox-item.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { creator: [{
                    type: i0.Input
                }], model: [{
                    type: i0.Input
                }], isCompact: [{
                    type: i0.Input
                }], viewModel: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-toolbox-item", ToolboxItemComponent);

    var StringEditorComponent = /** @class */ (function (_super) {
        __extends(StringEditorComponent, _super);
        function StringEditorComponent(cdr, vcr, ngZone) {
            var _this = _super.call(this, cdr, vcr) || this;
            _this.ngZone = ngZone;
            _this.justFocused = false;
            _this.onChangeHandler = function () {
                _this.detectChanges();
            };
            return _this;
        }
        StringEditorComponent.prototype.createModel = function () {
            var _this = this;
            this.baseModel = new surveyCreatorCore.StringEditorViewModelBase(this.locString, this.creator);
            this.baseModel.blurEditor = function () {
                _this.container.nativeElement.blur();
                _this.container.nativeElement.spellcheck = false;
            };
            this.baseModel.getEditorElement = function () { return _this.container.nativeElement; };
            this.ngZone.runOutsideAngular(function () {
                setTimeout(function () { return _this.baseModel.afterRender(); });
            });
        };
        Object.defineProperty(StringEditorComponent.prototype, "locString", {
            get: function () {
                return this.model.locStr;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StringEditorComponent.prototype, "creator", {
            get: function () {
                return this.model.creator;
            },
            enumerable: false,
            configurable: true
        });
        StringEditorComponent.prototype.getModel = function () {
            return this.baseModel;
        };
        StringEditorComponent.prototype.getPropertiesToTrack = function () {
            return ["creator", "locString"];
        };
        Object.defineProperty(StringEditorComponent.prototype, "placeholder", {
            get: function () {
                return this.baseModel.placeholder;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StringEditorComponent.prototype, "contentEditable", {
            get: function () {
                return this.baseModel.contentEditable;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StringEditorComponent.prototype, "characterCounter", {
            get: function () {
                return this.baseModel.characterCounter;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StringEditorComponent.prototype, "showCharacterCounter", {
            get: function () {
                return this.baseModel.showCharacterCounter;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StringEditorComponent.prototype, "getCharacterCounterClass", {
            get: function () {
                return this.baseModel.getCharacterCounterClass;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StringEditorComponent.prototype, "className", {
            get: function () {
                return this.baseModel.className(this.locString.renderedHtml);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StringEditorComponent.prototype, "errorText", {
            get: function () {
                return this.baseModel.errorText;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StringEditorComponent.prototype, "editValue", {
            get: function () {
                return this.baseModel.focused && this.baseModel.editAsText && this.locString.text || this.locString.renderedHtml;
            },
            enumerable: false,
            configurable: true
        });
        StringEditorComponent.prototype.onBlur = function (event) {
            this.container.nativeElement.spellcheck = false;
            this.locString.__isEditing = false;
            this.justFocused = false;
            this.baseModel.onBlur(event);
            return this.baseModel.errorText;
        };
        StringEditorComponent.prototype.onFocus = function (event) {
            this.baseModel.onFocus(event);
            this.justFocused = true;
        };
        StringEditorComponent.prototype.done = function (event) {
            this.baseModel.done(event);
            this.locString.__isEditing = false;
        };
        StringEditorComponent.prototype.edit = function (event) {
            this.container.nativeElement.focus();
            this.locString.__isEditing = true;
            this.baseModel.onClick(event);
        };
        StringEditorComponent.prototype.ngOnInit = function () {
            var _a;
            _super.prototype.ngOnInit.call(this);
            if (this.locString.__isEditing) {
                this.container.nativeElement.focus();
            }
            (_a = this.locString) === null || _a === void 0 ? void 0 : _a.onStringChanged.add(this.onChangeHandler);
        };
        StringEditorComponent.prototype.ngOnDestroy = function () {
            var _a;
            (_a = this.locString) === null || _a === void 0 ? void 0 : _a.onStringChanged.remove(this.onChangeHandler);
            _super.prototype.ngOnDestroy.call(this);
        };
        return StringEditorComponent;
    }(CreatorModelComponent));
    StringEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: StringEditorComponent, deps: [{ token: i0__namespace.ChangeDetectorRef }, { token: i0__namespace.ViewContainerRef }, { token: i0__namespace.NgZone }], target: i0__namespace.ɵɵFactoryTarget.Component });
    StringEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: StringEditorComponent, selector: "svc-string-edtior", inputs: { model: "model" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <span [class]=\"className\">\n    <span class=\"svc-string-editor__content\">\n        <div class=\"svc-string-editor__border\">\n          <svg [iconName]=\"'icon-arrow-up'\" class=\"svc-string-editor__button svc-string-editor__button--edit\" [size]=\"24\" sv-ng-svg-icon \n            (click)=\"edit($event)\" [iconName]=\"'icon-edit'\" [size]=\"16\"></svg>\n        </div>\n        <span class=\"svc-string-editor__input\">\n          <span role=\"textbox\" *ngIf=\"!locString.hasHtml\" class=\"sv-string-editor\" spellcheck=\"false\"\n              (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\"  (input)=\"baseModel.onInput($event)\" (keydown)=\"baseModel.onKeyDown($event)\" (keyup)=\"baseModel.onKeyUp($event)\" (mouseup)=\"baseModel.onMouseUp($event)\" (click)=\"edit($event)\" [textContent]=\"editValue\" [attr.aria-placeholder]=\"placeholder\" [attr.contenteditable]=\"contentEditable\" #container></span>\n          <span role=\"textbox\" *ngIf=\"locString.hasHtml\" class=\"sv-string-editor sv-string-editor--html\" spellcheck=\"false\"\n          (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\" (keydown)=\"baseModel.onKeyDown($event)\" (keyup)=\"baseModel.onKeyUp($event)\" (mouseup)=\"baseModel.onMouseUp($event)\"\n          (click)=\"edit($event)\" [attr.aria-placeholder]=\"placeholder\" [attr.contenteditable]=\"contentEditable\" [innerHtml]=\"editValue\" #container></span>\n          <sv-ng-character-counter *ngIf=\"showCharacterCounter\" [counter]=\"characterCounter\" [remainingCharacterCounter]=\"getCharacterCounterClass\"></sv-ng-character-counter>\n        </span>\n    </span>\n    <span *ngIf=\"errorText\" class=\"svc-string-editor__error\">{{errorText}}</span>\n  </span>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }, { type: i1__namespace.CharacterCounterComponent, selector: "sv-ng-character-counter", inputs: ["counter", "remainingCharacterCounter"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: StringEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-string-edtior",
                        templateUrl: "./string-editor.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ChangeDetectorRef }, { type: i0__namespace.ViewContainerRef }, { type: i0__namespace.NgZone }]; }, propDecorators: { model: [{
                    type: i0.Input
                }], container: [{
                    type: i0.ViewChild,
                    args: ["container"]
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent(surveyCreatorCore.editableStringRendererName, StringEditorComponent);

    var LogicOperatorComponent = /** @class */ (function (_super) {
        __extends(LogicOperatorComponent, _super);
        function LogicOperatorComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(LogicOperatorComponent.prototype, "dropdownModel", {
            get: function () {
                return this.dropdownListModel;
            },
            enumerable: false,
            configurable: true
        });
        LogicOperatorComponent.prototype.click = function (event) {
            var _a;
            (_a = this.dropdownListModel) === null || _a === void 0 ? void 0 : _a.onClick(event);
        };
        LogicOperatorComponent.prototype.clear = function (event) {
            var _a;
            (_a = this.dropdownListModel) === null || _a === void 0 ? void 0 : _a.onClear(event);
        };
        LogicOperatorComponent.prototype.keyup = function (event) {
            var _a;
            (_a = this.dropdownListModel) === null || _a === void 0 ? void 0 : _a.keyHandler(event);
        };
        LogicOperatorComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this.dropdownListModel = this.model.dropdownListModel || new surveyCore.DropdownListModel(this.model);
        };
        return LogicOperatorComponent;
    }(i1.QuestionAngular));
    LogicOperatorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: LogicOperatorComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    LogicOperatorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: LogicOperatorComponent, selector: "svc-logic-operator", usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div [class]=\"model.cssClasses.selectWrapper\">\n    <ng-container *ngIf=\"!model.isReadOnly\">\n      <div [class]=\"model.getControlClass()\"  (click)=\"click($event)\" (keyup)=\"keyup($event)\"\n        [attr.id]=\"model.inputId\" \n        [attr.required]=\"model.isRequired\" \n        [attr.tabindex]= \"model.isInputReadOnly ? undefined : 0\"\n        [attr.disabled]=\"model.isInputReadOnly\"\n        [attr.role]=\"model.ariaRole\"\n        [attr.aria-required]=\"model.ariaRequired\" \n        [attr.aria-label]=\"model.ariaLabel\" \n        [attr.aria-invalid]=\"model.ariaInvalid\" \n        [attr.aria-describedby]= \"model.ariaDescribedBy\" \n      >\n        <div [class]=\"model.cssClasses.controlValue\">\n          <sv-ng-string *ngIf=\"model.selectedItemLocText\" [model]=\"model.selectedItemLocText\"></sv-ng-string>\n          <div>{{model.readOnlyText}}</div>\n        </div>\n        <div *ngIf=\"model.allowClear && model.cssClasses.cleanButtonIconId\" [class]=\"model.cssClasses.cleanButton\" (click)=\"clear\" [visible]=\"!model.isEmpty()\">\n          <svg [class]=\"model.cssClasses.cleanButtonSvg\" [iconName]=\"model.cssClasses.cleanButtonIconId\" [size]=\"'auto'\" [title]=\"model.clearCaption\" [size]=\"24\" sv-ng-svg-icon></svg>\n        </div>\n      </div>\n        <sv-ng-popup [popupModel]=\"model.popupModel\"></sv-ng-popup>\n    </ng-container>\n    <div disabled *ngIf=\"model.isReadOnly\" [class]=\"model.getControlClass()\" [attr.id]=\"model.inputId\">\n      <sv-ng-string *ngIf=\"model.selectedItemLocText\" [model]=\"model.selectedItemLocText\"></sv-ng-string>\n      <div>{{model.readOnlyText}}</div>\n    </div>\n  </div>\n</ng-template>\n", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SurveyStringComponent, selector: "sv-ng-string, '[sv-ng-string]'", inputs: ["model"] }, { type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }, { type: i1__namespace.PopupComponent, selector: "sv-ng-popup, '[sv-ng-popup]'", inputs: ["popupModel"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.VisibleDirective, selector: "[visible]", inputs: ["visible"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: LogicOperatorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-logic-operator",
                        templateUrl: "./logic-operator.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }] });
    i1.AngularComponentFactory.Instance.registerComponent("sv-logic-operator", LogicOperatorComponent);
    surveyCore.RendererFactory.Instance.registerRenderer("dropdown", "logicoperator", "sv-logic-operator");

    var MatrixCellComponent = /** @class */ (function (_super) {
        __extends(MatrixCellComponent, _super);
        function MatrixCellComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(MatrixCellComponent.prototype, "creator", {
            get: function () {
                return this.componentData.creator;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MatrixCellComponent.prototype, "question", {
            get: function () {
                return this.componentData.question;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MatrixCellComponent.prototype, "isSupportCellEditor", {
            get: function () {
                return this.adorner.isSupportCellEditor;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MatrixCellComponent.prototype, "column", {
            get: function () {
                return this.componentData.column;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MatrixCellComponent.prototype, "element", {
            get: function () {
                return this.componentData.element;
            },
            enumerable: false,
            configurable: true
        });
        MatrixCellComponent.prototype.selectContext = function (event) {
            this.adorner.selectContext(this.adorner, event);
        };
        Object.defineProperty(MatrixCellComponent.prototype, "row", {
            get: function () {
                return this.componentData.row;
            },
            enumerable: false,
            configurable: true
        });
        MatrixCellComponent.prototype.createModel = function () {
            if (this.componentData) {
                this.adorner = new surveyCreatorCore.MatrixCellWrapperViewModel(this.creator, this.element, this.question, this.row, this.column);
            }
        };
        MatrixCellComponent.prototype.getPropertiesToTrack = function () {
            return ["creator", "row", "column", "question"];
        };
        MatrixCellComponent.prototype.getModel = function () {
            return this.adorner;
        };
        return MatrixCellComponent;
    }(CreatorModelComponent));
    MatrixCellComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MatrixCellComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    MatrixCellComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: MatrixCellComponent, selector: "svc-matrix-cell", inputs: { componentName: "componentName", componentData: "componentData", contentTempl: "contentTempl" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div tabindex=\"-1\" class=\"svc-matrix-cell\" (click)=\"selectContext($event)\"\n    (mouseover)=\"adorner.hover($event, $event.currentTarget)\"\n    (mouseleave)=\"adorner.hover($event, $event.currentTarget)\">\n    <div class=\"svc-matrix-cell--selected\" [class.svc-visible]=\"adorner.isSelected\"></div>\n    <ng-container *ngTemplateOutlet=\"contentTempl\"></ng-container>\n    <div *ngIf=\"isSupportCellEditor\" class=\"svc-matrix-cell__question-controls\">\n      <span class=\"svc-matrix-cell__question-controls-button\" (click)=\"adorner.editQuestion(adorner)\" [key2click]>\n        <svg [iconName]=\"'icon-edit'\" [size]=\"24\" [size]=\"24\" sv-ng-svg-icon></svg>\n      </span>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }], directives: [{ type: i2__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MatrixCellComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-matrix-cell",
                        templateUrl: "./matrix-cell.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { componentName: [{
                    type: i0.Input
                }], componentData: [{
                    type: i0.Input
                }], contentTempl: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-matrix-cell", MatrixCellComponent);

    var QuestionEditorComponent = /** @class */ (function (_super) {
        __extends(QuestionEditorComponent, _super);
        function QuestionEditorComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(QuestionEditorComponent.prototype, "question", {
            get: function () {
                return this.survey.getAllQuestions()[0];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuestionEditorComponent.prototype, "elementComponentName", {
            get: function () {
                return this.question.isPanel ? "panel" : "question";
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuestionEditorComponent.prototype, "componentName", {
            get: function () {
                var survey = this.survey;
                if (!!survey) {
                    var name = survey.getElementWrapperComponentName(this.question);
                    if (!!name) {
                        return name;
                    }
                }
                return this.elementComponentName;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuestionEditorComponent.prototype, "componentData", {
            get: function () {
                var survey = this.survey;
                var data;
                if (!!survey) {
                    data = survey.getElementWrapperComponentData(this.question);
                }
                return {
                    componentName: this.elementComponentName,
                    componentData: {
                        model: this.question,
                        data: data
                    }
                };
            },
            enumerable: false,
            configurable: true
        });
        return QuestionEditorComponent;
    }(i1.EmbeddedViewContentComponent));
    QuestionEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionEditorComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    QuestionEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: QuestionEditorComponent, selector: "svc-question-editor-content", inputs: { survey: "survey" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <ng-template [component]=\"{ name: componentName, data: componentData }\"></ng-template>\n</ng-template>", directives: [{ type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-question-editor-content",
                        templateUrl: "./question-editor.component.html"
                    }]
            }], propDecorators: { survey: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-question-editor-content", QuestionEditorComponent);

    var CellQuestionComponent = /** @class */ (function (_super) {
        __extends(CellQuestionComponent, _super);
        function CellQuestionComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CellQuestionComponent.prototype.getModel = function () {
            return this.model;
        };
        Object.defineProperty(CellQuestionComponent.prototype, "model", {
            get: function () {
                return this.componentData.model;
            },
            enumerable: false,
            configurable: true
        });
        return CellQuestionComponent;
    }(i1.BaseAngular));
    CellQuestionComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CellQuestionComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    CellQuestionComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CellQuestionComponent, selector: "svc-cell-question", inputs: { componentName: "componentName", componentData: "componentData" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-question__adorner\">\n    <div class=\"svc-question__content svc-question__content--selected-no-border\">\n      <ng-template [component]=\"{ name: componentName, data: componentData }\"></ng-template>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], directives: [{ type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CellQuestionComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-cell-question",
                        templateUrl: "./cell-question.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { componentName: [{
                    type: i0.Input
                }], componentData: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-cell-question", CellQuestionComponent);

    var CellQuestionDropdownComponent = /** @class */ (function (_super) {
        __extends(CellQuestionDropdownComponent, _super);
        function CellQuestionDropdownComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CellQuestionDropdownComponent.prototype.getItemValueComponentName = function (item) {
            return this.model.getItemValueWrapperComponentName(item) || "sv-ng-selectbase-item";
        };
        CellQuestionDropdownComponent.prototype.getItemValueComponentData = function (item) {
            return {
                componentName: "sv-ng-selectbase-item",
                componentData: {
                    question: this.model,
                    model: item,
                    inputType: "radio",
                    data: this.model.getItemValueWrapperComponentData(item)
                }
            };
        };
        return CellQuestionDropdownComponent;
    }(CellQuestionComponent));
    CellQuestionDropdownComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CellQuestionDropdownComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    CellQuestionDropdownComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CellQuestionDropdownComponent, selector: "svc-cell-dropdown-question", usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-question__adorner\">\n    <div class=\"svc-question__content svc-question__content--selected-no-border\">\n      <ng-template [component]=\"{ name: componentName, data: componentData }\"></ng-template>\n      <div class=\"svc-question__dropdown-choices\">\n          <div *ngFor=\"let item of model.visibleChoices\"class=\"svc-question__dropdown-choice\">\n            <ng-template [component]=\"{ name: getItemValueComponentName(item), data: getItemValueComponentData(item) }\"></ng-template>\n          </div>\n    </div>\n\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], directives: [{ type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CellQuestionDropdownComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-cell-dropdown-question",
                        templateUrl: "./cell-question-dropdown.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }] });
    i1.AngularComponentFactory.Instance.registerComponent("svc-cell-dropdown-question", CellQuestionDropdownComponent);

    var CreatorRowComponent = /** @class */ (function (_super) {
        __extends(CreatorRowComponent, _super);
        function CreatorRowComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CreatorRowComponent.prototype, "row", {
            get: function () {
                return this.componentData.row;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CreatorRowComponent.prototype, "creator", {
            get: function () {
                return this.componentData.creator;
            },
            enumerable: false,
            configurable: true
        });
        CreatorRowComponent.prototype.getModel = function () {
            return this.model;
        };
        CreatorRowComponent.prototype.createModel = function () {
            this.model = new surveyCreatorCore.RowViewModel(this.creator, this.row, undefined);
        };
        CreatorRowComponent.prototype.getPropertiesToTrack = function () {
            return ["creator", "row"];
        };
        return CreatorRowComponent;
    }(CreatorModelComponent));
    CreatorRowComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreatorRowComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    CreatorRowComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CreatorRowComponent, selector: "svc-row", inputs: { componentData: "componentData" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div [class]=\"model.cssClasses\">\n    <sv-ng-row [row]=\"row\"></sv-ng-row>\n  </div>\n</ng-template>", components: [{ type: i1__namespace.RowComponent, selector: "sv-ng-row", inputs: ["row"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreatorRowComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-row",
                        templateUrl: "./row.component.html"
                    }]
            }], propDecorators: { componentData: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-row", CreatorRowComponent);

    var QuestionWidgetDesignerComponent = /** @class */ (function (_super) {
        __extends(QuestionWidgetDesignerComponent, _super);
        function QuestionWidgetDesignerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        QuestionWidgetDesignerComponent.prototype.createModel = function () {
            if (this.componentData) {
                this.adorner = new surveyCreatorCore.QuestionAdornerViewModel(this.creator, this.model, null);
            }
        };
        return QuestionWidgetDesignerComponent;
    }(QuestionDesignerComponent));
    QuestionWidgetDesignerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionWidgetDesignerComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    QuestionWidgetDesignerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: QuestionWidgetDesignerComponent, selector: "svc-widget-question", usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div *ngIf=\"adorner\" class=\"svc-question__adorner\" [class]=\"adorner.rootCss()\" (mouseover)=\"adorner.hover($event, $event.currentTarget)\" (mouseleave)=\"adorner.hover($event, $event.currentTarget)\" [attr.data-sv-drop-target-survey-element]=\"adorner.element.name || null\">\n    <div *ngIf=\"adorner.element.isInteractiveDesignElement\" class=\"svc-question__content\" [class]=\"adorner.css()\" [key2click] (click)=\"adorner.select(adorner, $event)\" data-bind=\"clickBubble: false\">\n      <div *ngIf=\"adorner.allowDragging\" class=\"svc-question__drag-area\" (pointerdown)=\"adorner.onPointerDown($event)\">\n        <svg class=\"svc-question__drag-element\" [iconName]=\"'icon-drag-area-indicator_24x16'\" [size]=\"24\" sv-ng-svg-icon></svg>\n      </div>\n      <div class=\"svc-widget__content\">\n        <ng-template [component]=\"{ name: componentName, data: componentData }\"></ng-template>\n      </div>\n      <div *ngIf=\"adorner.isEmptyElement\" class=\"svc-panel__placeholder_frame\">\n            <div class=\"svc-panel__placeholder\" data-bind=\"text: placeholderText\"></div>\n        </div>\n      <div class=\"svc-question__content-actions\">\n        <sv-action-bar [model]=\"adorner.actionContainer\" [handleClick]=\"false\"></sv-action-bar>\n      </div>\n    </div>\n\n    <ng-container *ngIf=\"!adorner.element.isInteractiveDesignElement\">\n      <ng-template [component]=\"{ name: componentName, data: componentData }\"></ng-template>\n      <div *ngIf=\"adorner.isEmptyElement\" class=\"svc-panel__placeholder_frame\">\n        <div class=\"svc-panel__placeholder\">{{ adorner.placeholderText }}</div>\n      </div>\n    </ng-container>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }, { type: i1__namespace.ActionBarComponent, selector: "sv-action-bar, sv-ng-action-bar", inputs: ["model", "handleClick"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }, { type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionWidgetDesignerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-widget-question",
                        templateUrl: "./question-widget.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }] });
    i1.AngularComponentFactory.Instance.registerComponent("svc-widget-question", QuestionWidgetDesignerComponent);

    var ToolboxComponent = /** @class */ (function (_super) {
        __extends(ToolboxComponent, _super);
        function ToolboxComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ToolboxComponent.prototype, "toolbox", {
            get: function () {
                return this.model.toolbox;
            },
            enumerable: false,
            configurable: true
        });
        ToolboxComponent.prototype.getModel = function () {
            return this.toolbox;
        };
        return ToolboxComponent;
    }(i1.BaseAngular));
    ToolboxComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ToolboxComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    ToolboxComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ToolboxComponent, selector: "svc-toolbox", inputs: { model: "model" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-toolbox\">\n    <div class=\"svc-toolbox__container\">\n      <ng-container *ngIf=\"!(toolbox.categories.length == 1 || !toolbox.showCategoryTitles)\">\n        <svc-toolbox-category *ngFor=\"let category of toolbox.categories\" [category]=\"category\" [toolbox]=\"toolbox\"></svc-toolbox-category>\n      </ng-container>\n      <ng-container *ngIf=\"toolbox.categories.length == 1 || !toolbox.showCategoryTitles\">\n        <div class=\"svc-toolbox__category\">\n          <svc-toolbox-tool *ngFor=\"let item of toolbox.visibleActions\" [creator]=\"model\" [item]=\"item\" [isCompact]=\"toolbox.isCompact\"></svc-toolbox-tool>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: ToolboxCategoryComponent, selector: "svc-toolbox-category ", inputs: ["category", "toolbox"] }, { type: ToolboxToolComponent, selector: "svc-toolbox-tool", inputs: ["creator", "item", "isCompact"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: ToolboxComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-toolbox",
                        templateUrl: "./toolbox.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { model: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-toolbox", ToolboxComponent);

    var QuestionRatingDesignerComponent = /** @class */ (function (_super) {
        __extends(QuestionRatingDesignerComponent, _super);
        function QuestionRatingDesignerComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.adornerComponent = "";
            return _this;
        }
        return QuestionRatingDesignerComponent;
    }(QuestionDesignerComponent));
    QuestionRatingDesignerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionRatingDesignerComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    QuestionRatingDesignerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: QuestionRatingDesignerComponent, selector: "svc-rating-question", usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div *ngIf=\"adorner\" class=\"svc-question__adorner\" [class]=\"adorner.rootCss()\"\n    (mouseover)=\"adorner.hover($event, $event.currentTarget)\" (mouseleave)=\"adorner.hover($event, $event.currentTarget)\"\n    [attr.data-sv-drop-target-survey-element]=\"adorner.element.name || null\" #container>\n\n    <div [class]=\"adorner.css()\" [key2click] (click)=\"adorner.select(adorner, $event)\">\n      <div *ngIf=\"adorner.allowDragging\" class=\"svc-question__drag-area\" (pointerdown)=\"adorner.onPointerDown($event)\">\n        <svg class=\"svc-question__drag-element\" [iconName]=\"'icon-drag-area-indicator_24x16'\" [size]=\"24\"\n          sv-ng-svg-icon></svg>\n      </div>\n\n      <ng-template [component]=\"{ name: componentName, data: componentData }\"></ng-template>\n\n      <div *ngIf=\"adorner.isEmptyElement && !showPlaceholderComponent\" class=\"svc-panel__placeholder_frame\">\n        <div class=\"svc-panel__placeholder\">{{ adorner.placeholderText }}</div>\n      </div>\n      <ng-template *ngIf=\"adorner.isEmptyElement && !!showPlaceholderComponent\"\n        [component]=\"{ name: placeholderComponent, data: placeholderComponentData }\">\n      </ng-template>\n\n      <ng-template *ngIf=\"adornerComponent\"\n        [component]=\"{ name: adornerComponent, data: { adorner: adorner, question: model } }\">\n      </ng-template>\n\n      <div class=\"svc-question__content-actions\">\n        <sv-action-bar [model]=\"adorner.actionContainer\" [handleClick]=\"false\"></sv-action-bar>\n      </div>\n    </div>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }, { type: i1__namespace.ActionBarComponent, selector: "sv-action-bar, sv-ng-action-bar", inputs: ["model", "handleClick"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }, { type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionRatingDesignerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-rating-question",
                        templateUrl: "../question.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }] });
    i1.AngularComponentFactory.Instance.registerComponent("svc-rating-question", QuestionRatingDesignerComponent);
    var QuestionRatingAdornerDesignerComponent = /** @class */ (function (_super) {
        __extends(QuestionRatingAdornerDesignerComponent, _super);
        function QuestionRatingAdornerDesignerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        QuestionRatingAdornerDesignerComponent.prototype.createModel = function () {
            if (this.componentData) {
                this.adorner = new surveyCreatorCore.QuestionRatingAdornerViewModel(this.componentData.data, this.componentData.model, null);
            }
        };
        QuestionRatingAdornerDesignerComponent.prototype.getPropertiesToTrack = function () {
            return ["model", "creator"];
        };
        QuestionRatingAdornerDesignerComponent.prototype.getModel = function () {
            return this.adorner;
        };
        return QuestionRatingAdornerDesignerComponent;
    }(CreatorModelComponent));
    QuestionRatingAdornerDesignerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionRatingAdornerDesignerComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    QuestionRatingAdornerDesignerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: QuestionRatingAdornerDesignerComponent, selector: "svc-rating-question-content", inputs: { componentName: "componentName", componentData: "componentData" }, usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-rating-question-content\">\n    <div class=\"svc-rating-question-controls svc-item-value-controls\">\n      <svg *ngIf=\"adorner.allowRemove\" [iconName]=\"'icon-remove_16x16'\" [size]=\"16\" [key2click] (click)=\"adorner.removeItem(adorner)\"\n      [class]=\"adorner.removeClassNames\" [attr.title]=\"adorner.removeTooltip\" [attr.aria-label]=\"adorner.removeTooltip\" sv-ng-svg-icon></svg>\n      <svg *ngIf=\"adorner.allowAdd\" [iconName]=\"'icon-add_16x16'\" [size]=\"16\" [key2click] (click)=\"adorner.addItem(adorner)\"\n      [class]=\"adorner.addClassNames\" [attr.title]=\"adorner.addTooltip\" [attr.aria-label]=\"adorner.addTooltip\"sv-ng-svg-icon></svg>\n    </div>\n    <ng-template [component]=\"{ name: componentName, data: componentData }\"></ng-template>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }, { type: i1__namespace.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionRatingAdornerDesignerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-rating-question-content",
                        templateUrl: "./question-rating.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { componentName: [{
                    type: i0.Input
                }], componentData: [{
                    type: i0.Input
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-rating-question-content", QuestionRatingAdornerDesignerComponent);

    var CreatorLogoImageComponent = /** @class */ (function (_super) {
        __extends(CreatorLogoImageComponent, _super);
        function CreatorLogoImageComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CreatorLogoImageComponent.prototype.createModel = function () {
            this.model = new surveyCreatorCore.LogoImageViewModel(this.creator, null);
        };
        CreatorLogoImageComponent.prototype.getModel = function () {
            return this.model;
        };
        CreatorLogoImageComponent.prototype.getPropertiesToTrack = function () {
            return ["data"];
        };
        Object.defineProperty(CreatorLogoImageComponent.prototype, "creator", {
            get: function () {
                return this.data;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CreatorLogoImageComponent.prototype, "survey", {
            get: function () {
                return this.creator.survey;
            },
            enumerable: false,
            configurable: true
        });
        CreatorLogoImageComponent.prototype.ngAfterViewInit = function () {
            this.model.root = this.container.nativeElement;
        };
        return CreatorLogoImageComponent;
    }(CreatorModelComponent));
    CreatorLogoImageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreatorLogoImageComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    CreatorLogoImageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CreatorLogoImageComponent, selector: "svc-logo-image", inputs: { data: "data" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true, read: i0.ElementRef }], usesInheritance: true, ngImport: i0__namespace, template: "<ng-template #template>\n  <div class=\"svc-logo-image\" #container>\n    <input type=\"file\" aria-hidden=\"true\" tabindex=\"-1\" accept=\"image/*\" class=\"svc-choose-file-input\" />\n    <ng-container *ngIf=\"!survey.locLogo.renderedHtml\">\n      <ng-container *ngIf=\"model.allowEdit && !model.isUploading\">\n        <div class=\"svc-logo-image-placeholder\" (click)=\"model.chooseFile(model)\" [key2click]>\n          <svg>\n            <use xlink:href=\"#icon-logo\"></use>\n          </svg>\n        </div>\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"survey.locLogo.renderedHtml\">\n      <div [class]=\"model.containerCss\" (click)=\"model.chooseFile(model)\" [key2click]>\n        <sv-logo-image [data]=\"survey\"></sv-logo-image>\n      </div>\n    </ng-container>\n  </div>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1__namespace.LogoImageComponent, selector: "sv-logo-image", inputs: ["data"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: CreatorLogoImageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-logo-image",
                        templateUrl: "./logo-image.component.html",
                        styles: [":host { display: none; }"]
                    }]
            }], propDecorators: { data: [{
                    type: i0.Input
                }], container: [{
                    type: i0.ViewChild,
                    args: ["container", { read: i0.ElementRef }]
                }] } });
    i1.AngularComponentFactory.Instance.registerComponent("svc-logo-image", CreatorLogoImageComponent);

    var QuestionSpinEditorComponent = /** @class */ (function (_super) {
        __extends(QuestionSpinEditorComponent, _super);
        function QuestionSpinEditorComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return QuestionSpinEditorComponent;
    }(i1.QuestionAngular));
    QuestionSpinEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionSpinEditorComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    QuestionSpinEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: QuestionSpinEditorComponent, selector: "ng-component", usesInheritance: true, ngImport: i0__namespace, template: "<div [class]=\"model.cssClasses.root\" (keydown)=\"model.onKeyDown($event)\">\n  <input \n    autocomplete=\"off\"\n    [disabled]=\"model.isInputReadOnly\" \n    [attr.id]=\"model.inputId\"\n    [attr.placeholder]=\"model.renderedPlaceholder\" \n    [attr.aria-required]=\"model.ariaRequired\"\n    [attr.aria-label]=\"model.ariaLabel\" \n    [attr.aria-invalid]=\"model.ariaInvalid\"\n    [attr.aria-describedby]=\"model.ariaDescribedBy\" \n    (change)=\"model.onChange($event)\" \n    (keydown)=\"model.onInputKeyDown($event)\" \n    (blur)=\"model.onBlur($event)\" \n    (focus)=\"model.onFocus($event)\" \n    (beforeinput)=\"model.onBeforeInput($event)\"\n    [value]=\"model.renderedValue\"\n    [class]=\"model.cssClasses.control\"/>\n  <span [class]=\"model.cssClasses.buttonsContainer\">\n    <button\n      [class]=\"model.cssClasses.arrowButton\" (mousedown)=\"model.onDownButtonMouseDown()\" (mouseup)=\"model.onButtonMouseUp()\" (blur)=\"model.onBlur($event)\" (focus)=\"model.onFocus($event)\">\n      <svg [iconName]=\"model.cssClasses.decreaseButtonIcon\" [size]=\"'auto'\" sv-ng-svg-icon></svg>\n    </button>\n    <button\n    [class]=\"model.cssClasses.arrowButton\" (mousedown)=\"model.onUpButtonMouseDown()\" (mouseup)=\"model.onButtonMouseUp()\" (blur)=\"model.onBlur($event)\" (focus)=\"model.onFocus($event)\">\n    <svg [iconName]=\"model.cssClasses.increaseButtonIcon\" [size]=\"'auto'\" sv-ng-svg-icon></svg>\n  </button>\n  </span>\n</div>", components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionSpinEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        templateUrl: "./spin-editor.component.html"
                    }]
            }] });
    i1.AngularComponentFactory.Instance.registerComponent("spinedit-question", QuestionSpinEditorComponent);

    var QuestionColorComponent = /** @class */ (function (_super) {
        __extends(QuestionColorComponent, _super);
        function QuestionColorComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return QuestionColorComponent;
    }(i1.QuestionAngular));
    QuestionColorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionColorComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    QuestionColorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: QuestionColorComponent, selector: "svc-color", usesInheritance: true, ngImport: i0__namespace, template: "<div [class]=\"model.cssClasses.root\">\n  <span [class]=\"model.cssClasses.swatch\" [style]=\"model.getSwatchStyle()\"></span>\n  <input autocomplete=\"off\" \n    [disabled]=\"model.isInputReadOnly\" \n    [attr.id]=\"model.inputId\" \n    [placeholder]=\"model.renderedPlaceholder\" \n    [attr.aria-required]=\"model.ariaRequired\" \n    [attr.aria-label]=\"model.ariaLabel\" \n    [attr.aria-invalid]=\"model.ariaInvalid\" \n    [attr.aria-describedby]=\"model.ariaDescribedBy\" \n    (change)=\"model.onChange($event)\" \n    (blur)=\"model.onBlur($event)\" \n    (beforeinput)=\"model.onBeforeInput($event)\"\n    [value]=\"model.renderedValue\"\n    [class]=\"model.cssClasses.control\"/>  \n    <label [class]=\"model.cssClasses.colorDropdown\">\n      <svg [iconName]=\"model.cssClasses.colorDrodownIcon\" [size]=\"'auto'\" sv-ng-svg-icon></svg>\n    <input type=\"color\" [class]=\"model.cssClasses.colorInput\" [value]=\"model.renderedValue\" (change)=\"model.onColorInputChange($event)\"/>\n  </label>\n</div>", components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionColorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        templateUrl: "color.component.html",
                        selector: "svc-color"
                    }]
            }] });
    i1.AngularComponentFactory.Instance.registerComponent("color-question", QuestionColorComponent);

    var QuestionFileEditorComponent = /** @class */ (function (_super) {
        __extends(QuestionFileEditorComponent, _super);
        function QuestionFileEditorComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return QuestionFileEditorComponent;
    }(i1.QuestionAngular));
    QuestionFileEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionFileEditorComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    QuestionFileEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: QuestionFileEditorComponent, selector: "svc-file-editor", usesInheritance: true, ngImport: i0__namespace, template: "<div [class]=\"model.cssClasses.root\" (dragenter)=\"model.onDragEnter($event)\" (dragover)=\"model.onDragOver($event)\"\n  (drop)=\"model.onDrop($event)\" (dragleave)=\"model.onDragLeave($event)\">\n  <input type=\"text\" [class]=\"model.cssClasses.control\" [value]=\"model.value ||''\"\n    (change)=\"model.onInputChange($event)\" (blur)=\"model.onInputBlur($event)\" />\n  <div [class]=\"model.cssClasses.buttonsContainer\">\n    <button type=\"button\" [class]=\"model.cssClasses.clearButton\" [disabled]=\"model.getIsClearButtonDisabled()\"\n      (click)=\"model.doClean($event)\">\n      <svg [iconName]=\"model.cssClasses.clearButtonIcon\" size=\"'auto'\" [title]=\"model.clearButtonCaption\"\n        sv-ng-svg-icon></svg>\n    </button>\n    <label tabindex=\"0\" role=\"button\" [class]=\"model.cssClasses.chooseButton\" [attr.for]=\"model.inputId\"\n      [attr.aria-label]=\"model.chooseButtonCaption\">\n      <svg [iconName]=\"model.cssClasses.chooseButtonIcon\" size=\"'auto'\" [title]=\"model.chooseButtonCaption\"\n        sv-ng-svg-icon></svg>\n      <input type=\"file\" tabindex=\"-1\" [class]=\"model.cssClasses.fileInput\" [attr.id]=\"model.inputId\"\n        [attr.aria-required]=\"model.ariaRequired\" [attr.aria-label]=\"model.ariaLabel\"\n        [attr.aria-invalid]=\"model.ariaInvalid\" [attr.aria-describedby]=\"model.ariaDescribedBy\" [attr.multiple]=\"false\"\n        [title]=\"model.inputTitle\" [attr.accept]=\"model.acceptedTypes\" (change)=\"model.doChange($event)\">\n    </label>\n  </div>\n</div>", components: [{ type: i1__namespace.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: QuestionFileEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: "svc-file-editor",
                        templateUrl: "./file.component.html"
                    }]
            }] });
    i1.AngularComponentFactory.Instance.registerComponent("fileedit-question", QuestionFileEditorComponent);

    var SurveyCreatorModule = /** @class */ (function () {
        function SurveyCreatorModule() {
        }
        return SurveyCreatorModule;
    }());
    SurveyCreatorModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SurveyCreatorModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SurveyCreatorModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SurveyCreatorModule, declarations: [CreatorComponent, DesignerTabComponent, PageDesignerComponent, QuestionDesignerComponent, PanelDesignerComponent, SvgBundleComponent, TabbledMenuComponent, TabbedMenuItemComponent, TabbedMenuItemWrapperComponent, SidebarComponent, SidebarTabComponent, ObjectSelectorComponent, PropertyGridComponent, TextareaJsonEditorComponent, AceJsonEditorComponent, LogicTabComponent, LogicAddButtonComponent, ActionButtonComponent, LinkValueQuestionComponent, EmbeddedSurveyQuestionComponent, TranslationTabComponent, TranslationSkeletonComponent, SimulatorComponent, TestTabComponent, TestAgainActionComponent, SurveyResultsComponent, SurveyResultsTableRowComponent,
            AdaptiveToolboxComponent, ToolboxToolComponent, ToolboxItemComponent, ToolboxCategoryComponent, StringEditorComponent, PageNavigatorComponent, PageNavigatorItemComponent,
            QuestionDropdownDesignerComponent, QuestionDropdownAdornerDesignerComponent, QuestionImageDesignerComponent, QuestionImageAdornerDesignerComponent,
            ItemValueDesignerComponent, ImageItemValueDesignerComponent, LogicOperatorComponent, MatrixCellComponent, QuestionEditorComponent, CellQuestionDropdownComponent, CreatorRowComponent, DesignerPagesComponent, DesignerSurveyComponent, CellQuestionComponent, QuestionWidgetDesignerComponent, ToolboxComponent, CreatorLogoImageComponent,
            QuestionRatingAdornerDesignerComponent, QuestionRatingDesignerComponent, QuestionSpinEditorComponent, QuestionColorComponent, QuestionFileEditorComponent], imports: [i2.CommonModule, i1$1.FormsModule, i1.SurveyModule], exports: [CreatorComponent, DesignerTabComponent, PageDesignerComponent, QuestionDesignerComponent, PanelDesignerComponent, SvgBundleComponent, TabbledMenuComponent, TabbedMenuItemComponent, TabbedMenuItemWrapperComponent, SidebarComponent, SidebarTabComponent, ObjectSelectorComponent, PropertyGridComponent, TextareaJsonEditorComponent, AceJsonEditorComponent, LogicTabComponent, LogicAddButtonComponent, ActionButtonComponent, LinkValueQuestionComponent, EmbeddedSurveyQuestionComponent, TranslationTabComponent, TranslationSkeletonComponent, SimulatorComponent, TestTabComponent, TestAgainActionComponent, SurveyResultsComponent, SurveyResultsTableRowComponent,
            AdaptiveToolboxComponent, ToolboxToolComponent, ToolboxItemComponent, ToolboxCategoryComponent, StringEditorComponent, PageNavigatorComponent, PageNavigatorItemComponent,
            QuestionDropdownDesignerComponent, QuestionDropdownAdornerDesignerComponent, QuestionImageDesignerComponent, QuestionImageAdornerDesignerComponent,
            ItemValueDesignerComponent, ImageItemValueDesignerComponent, LogicOperatorComponent, MatrixCellComponent, QuestionEditorComponent, CellQuestionDropdownComponent, CreatorRowComponent, DesignerPagesComponent, DesignerSurveyComponent, CellQuestionComponent, QuestionWidgetDesignerComponent, ToolboxComponent, CreatorLogoImageComponent,
            QuestionRatingAdornerDesignerComponent, QuestionRatingDesignerComponent, QuestionSpinEditorComponent, QuestionColorComponent, QuestionFileEditorComponent] });
    SurveyCreatorModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SurveyCreatorModule, providers: [], imports: [[
                i2.CommonModule, i1$1.FormsModule, i1.SurveyModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: SurveyCreatorModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [CreatorComponent, DesignerTabComponent, PageDesignerComponent, QuestionDesignerComponent, PanelDesignerComponent, SvgBundleComponent, TabbledMenuComponent, TabbedMenuItemComponent, TabbedMenuItemWrapperComponent, SidebarComponent, SidebarTabComponent, ObjectSelectorComponent, PropertyGridComponent, TextareaJsonEditorComponent, AceJsonEditorComponent, LogicTabComponent, LogicAddButtonComponent, ActionButtonComponent, LinkValueQuestionComponent, EmbeddedSurveyQuestionComponent, TranslationTabComponent, TranslationSkeletonComponent, SimulatorComponent, TestTabComponent, TestAgainActionComponent, SurveyResultsComponent, SurveyResultsTableRowComponent,
                            AdaptiveToolboxComponent, ToolboxToolComponent, ToolboxItemComponent, ToolboxCategoryComponent, StringEditorComponent, PageNavigatorComponent, PageNavigatorItemComponent,
                            QuestionDropdownDesignerComponent, QuestionDropdownAdornerDesignerComponent, QuestionImageDesignerComponent, QuestionImageAdornerDesignerComponent,
                            ItemValueDesignerComponent, ImageItemValueDesignerComponent, LogicOperatorComponent, MatrixCellComponent, QuestionEditorComponent, CellQuestionDropdownComponent, CreatorRowComponent, DesignerPagesComponent, DesignerSurveyComponent, CellQuestionComponent, QuestionWidgetDesignerComponent, ToolboxComponent, CreatorLogoImageComponent,
                            QuestionRatingAdornerDesignerComponent, QuestionRatingDesignerComponent, QuestionSpinEditorComponent, QuestionColorComponent, QuestionFileEditorComponent],
                        imports: [
                            i2.CommonModule, i1$1.FormsModule, i1.SurveyModule
                        ],
                        exports: [
                            CreatorComponent, DesignerTabComponent, PageDesignerComponent, QuestionDesignerComponent, PanelDesignerComponent, SvgBundleComponent, TabbledMenuComponent, TabbedMenuItemComponent, TabbedMenuItemWrapperComponent, SidebarComponent, SidebarTabComponent, ObjectSelectorComponent, PropertyGridComponent, TextareaJsonEditorComponent, AceJsonEditorComponent, LogicTabComponent, LogicAddButtonComponent, ActionButtonComponent, LinkValueQuestionComponent, EmbeddedSurveyQuestionComponent, TranslationTabComponent, TranslationSkeletonComponent, SimulatorComponent, TestTabComponent, TestAgainActionComponent, SurveyResultsComponent, SurveyResultsTableRowComponent,
                            AdaptiveToolboxComponent, ToolboxToolComponent, ToolboxItemComponent, ToolboxCategoryComponent, StringEditorComponent, PageNavigatorComponent, PageNavigatorItemComponent,
                            QuestionDropdownDesignerComponent, QuestionDropdownAdornerDesignerComponent, QuestionImageDesignerComponent, QuestionImageAdornerDesignerComponent,
                            ItemValueDesignerComponent, ImageItemValueDesignerComponent, LogicOperatorComponent, MatrixCellComponent, QuestionEditorComponent, CellQuestionDropdownComponent, CreatorRowComponent, DesignerPagesComponent, DesignerSurveyComponent, CellQuestionComponent, QuestionWidgetDesignerComponent, ToolboxComponent, CreatorLogoImageComponent,
                            QuestionRatingAdornerDesignerComponent, QuestionRatingDesignerComponent, QuestionSpinEditorComponent, QuestionColorComponent, QuestionFileEditorComponent
                        ],
                        providers: [],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AceJsonEditorComponent = AceJsonEditorComponent;
    exports.ActionButtonComponent = ActionButtonComponent;
    exports.AdaptiveToolboxComponent = AdaptiveToolboxComponent;
    exports.CellQuestionComponent = CellQuestionComponent;
    exports.CellQuestionDropdownComponent = CellQuestionDropdownComponent;
    exports.CreatorComponent = CreatorComponent;
    exports.CreatorLogoImageComponent = CreatorLogoImageComponent;
    exports.CreatorRowComponent = CreatorRowComponent;
    exports.DesignerPagesComponent = DesignerPagesComponent;
    exports.DesignerSurveyComponent = DesignerSurveyComponent;
    exports.DesignerTabComponent = DesignerTabComponent;
    exports.EmbeddedSurveyQuestionComponent = EmbeddedSurveyQuestionComponent;
    exports.ImageItemValueDesignerComponent = ImageItemValueDesignerComponent;
    exports.ItemValueDesignerComponent = ItemValueDesignerComponent;
    exports.LinkValueQuestionComponent = LinkValueQuestionComponent;
    exports.LogicAddButtonComponent = LogicAddButtonComponent;
    exports.LogicOperatorComponent = LogicOperatorComponent;
    exports.LogicTabComponent = LogicTabComponent;
    exports.MatrixCellComponent = MatrixCellComponent;
    exports.ObjectSelectorComponent = ObjectSelectorComponent;
    exports.PageDesignerComponent = PageDesignerComponent;
    exports.PageNavigatorComponent = PageNavigatorComponent;
    exports.PageNavigatorItemComponent = PageNavigatorItemComponent;
    exports.PanelDesignerComponent = PanelDesignerComponent;
    exports.PropertyGridComponent = PropertyGridComponent;
    exports.QuestionColorComponent = QuestionColorComponent;
    exports.QuestionDesignerComponent = QuestionDesignerComponent;
    exports.QuestionDropdownAdornerDesignerComponent = QuestionDropdownAdornerDesignerComponent;
    exports.QuestionDropdownDesignerComponent = QuestionDropdownDesignerComponent;
    exports.QuestionEditorComponent = QuestionEditorComponent;
    exports.QuestionFileEditorComponent = QuestionFileEditorComponent;
    exports.QuestionImageAdornerDesignerComponent = QuestionImageAdornerDesignerComponent;
    exports.QuestionImageDesignerComponent = QuestionImageDesignerComponent;
    exports.QuestionRatingAdornerDesignerComponent = QuestionRatingAdornerDesignerComponent;
    exports.QuestionRatingDesignerComponent = QuestionRatingDesignerComponent;
    exports.QuestionSpinEditorComponent = QuestionSpinEditorComponent;
    exports.QuestionWidgetDesignerComponent = QuestionWidgetDesignerComponent;
    exports.SidebarComponent = SidebarComponent;
    exports.SidebarTabComponent = SidebarTabComponent;
    exports.SimulatorComponent = SimulatorComponent;
    exports.StringEditorComponent = StringEditorComponent;
    exports.SurveyCreatorModule = SurveyCreatorModule;
    exports.SurveyResultsComponent = SurveyResultsComponent;
    exports.SurveyResultsTableRowComponent = SurveyResultsTableRowComponent;
    exports.SvgBundleComponent = SvgBundleComponent;
    exports.TabbedMenuItemComponent = TabbedMenuItemComponent;
    exports.TabbedMenuItemWrapperComponent = TabbedMenuItemWrapperComponent;
    exports.TabbledMenuComponent = TabbledMenuComponent;
    exports.TestAgainActionComponent = TestAgainActionComponent;
    exports.TestTabComponent = TestTabComponent;
    exports.TextareaJsonEditorComponent = TextareaJsonEditorComponent;
    exports.ToolboxCategoryComponent = ToolboxCategoryComponent;
    exports.ToolboxComponent = ToolboxComponent;
    exports.ToolboxItemComponent = ToolboxItemComponent;
    exports.ToolboxToolComponent = ToolboxToolComponent;
    exports.TranslationSkeletonComponent = TranslationSkeletonComponent;
    exports.TranslationTabComponent = TranslationTabComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=survey-creator-angular.umd.js.map
