import * as Survey from "survey-core";
import { Base, SurveyModel, Question, PageModel, IElement, JsonObjectProperty, ActionContainer, AdaptiveActionContainer, IAction, Action, IPanel, SurveyElement, ItemValue, QuestionSelectBase, LocalizableString, ILocalizableString, ILocalizableOwner, PopupBaseViewModel, EventBase } from "survey-core";
import { ISurveyCreatorOptions, ICollectionItemAllowOperations } from "./creator-settings";
import { DragDropSurveyElements, DragDropChoices } from "survey-core";
import { QuestionToolbox } from "./toolbox";
import { PropertyGridModel } from "./property-grid";
import { ICreatorSelectionOwner } from "./selection-owner";
import { SelectionHistory } from "./selection-history";
import { SurveyLogic } from "./components/tabs/logic";
import { UndoRedoManager } from "./plugins/undo-redo/undo-redo-manager";
import { UndoRedoController } from "./plugins/undo-redo/undo-redo-controller";
import { SidebarModel } from "./components/side-bar/side-bar-model";
import { ICreatorOptions } from "./creator-options";
export interface IKeyboardShortcut {
    name?: string;
    hotKey: {
        ctrlKey?: boolean;
        keyCode: number;
    };
    macOsHotkey?: {
        shiftKey?: boolean;
        keyCode: number;
    };
    execute: (context: any) => void;
}
export interface ICreatorPlugin {
    activate: () => void;
    update?: () => void;
    deactivate?: () => boolean;
    canDeactivateAsync?: (onSuccess: () => void) => void;
    dispose?: () => void;
    onDesignerSurveyPropertyChanged?: (obj: Base, propName: string) => void;
    model: Base;
}
export declare class CreatorAction extends Action {
}
export interface ITabbedMenuItem extends IAction {
    componentContent: string;
    renderTab?: () => any;
}
export declare class TabbedMenuItem extends Action implements ITabbedMenuItem {
    constructor(item: ITabbedMenuItem);
    componentContent: string;
    renderTab?: () => any;
}
export declare class TabbedMenuContainer extends AdaptiveActionContainer<TabbedMenuItem> {
    constructor();
}
export declare class ToolbarActionContainer extends ActionContainer {
    private creator;
    constructor(creator: CreatorBase);
    protected getRenderedActions(): Array<Action>;
}
export declare type toolboxLocationType = "left" | "right" | "sidebar";
export declare class CreatorEvent extends EventBase<CreatorBase, any> {
}
/**
 * Base class for Survey Creator.
 */
export declare class CreatorBase extends Base implements ISurveyCreatorOptions, ICreatorSelectionOwner, ILocalizableOwner {
    protected options: ICreatorOptions;
    getMarkdownHtml(text: string, name: string): string;
    getRenderer(name: string): string;
    getRendererContext(locStr: LocalizableString): any;
    getProcessedText(text: string): string;
    getLocale(): string;
    /**
     * Specifies whether to display the Designer tab.
     *
     * Default value: `true`
     */
    showDesignerTab: boolean;
    /**
     * Specifies whether to display the JSON Editor tab.
     *
     * Default value: `true`
     */
    showJSONEditorTab: boolean;
    /**
     * Obsolete. Please use showPreviewTab property
     * @see showPreviewTab
     */
    showTestSurveyTab: boolean;
    /**
     * Specifies whether to display the Preview tab.
     *
     * Default value: `true`
     */
    get showPreviewTab(): boolean;
    set showPreviewTab(val: boolean);
    /**
     * Specifies whether to display the Embed Survey tab.
     *
     * Default value: `false`
     */
    showEmbeddedSurveyTab: boolean;
    /**
     * Specifies whether to display the Translation tab.
     *
     * Default value: `false`
     */
    showTranslationTab: boolean;
    /**
     * Specifies whether to display the Logic tab.
     *
     * Default value: `false`
     */
    showLogicTab: boolean;
    useTableViewInLogicTab: boolean;
    /**
     * Set delay for page hover
     */
    pageHoverDelay: number;
    /**
     * You need to set this property to true if you want to inplace edit item values instead of texts.
     */
    inplaceEditForValues: boolean;
    /**
    * Obsolete. Use the [`showSurveyTitle`](https://surveyjs.io/Documentation/Survey-Creator?id=surveycreator#showSurveyTitle) property instead.
    */
    get allowEditSurveyTitle(): boolean;
    set allowEditSurveyTitle(val: boolean);
    /**
     * Specifies whether users can see and edit the survey title and related survey properties.
     *
     * Default value: `true`
     */
    get showSurveyTitle(): boolean;
    set showSurveyTitle(val: boolean);
    /**
     * Removes the Free Trial bar.
     *
     * Default value: `false`
     *
     * > You can enable this property only if you have a Survey Creator commercial license. It is illegal to enable this property without a license.
     */
    haveCommercialLicense: boolean;
    get licenseText(): string;
    /**
     * Specifies whether to call the [saveSurveyFunc](https://surveyjs.io/Documentation/Survey-Creator?id=surveycreator#saveSurveyFunc) each time survey settings are changed.
     *
     * Default value: `false`
     */
    isAutoSave: boolean;
    showOptions: boolean;
    showSearch: boolean;
    generateValidJSON: boolean;
    currentAddQuestionType: string;
    /**
     * Specifies the orientation of the selected device in the Preview tab.
     *
     * Possible values:
     * - `"landscape"` (default)
     * - `"portrait"`
     */
    previewOrientation: "landscape" | "portrait";
    private isRTLValue;
    private alwaySaveTextInPropertyEditorsValue;
    private toolbarValue;
    private responsivityManager;
    footerToolbar: ActionContainer;
    private changePageModifications;
    private pageEditModeValue;
    /**
     * Contains the value of the [`pageEditMode`](https://surveyjs.io/Documentation/Survey-Creator?id=ICreatorOptions#pageEditMode) property specified in the constructor.
     */
    get pageEditMode(): "standard" | "single" | "bypage";
    set pageEditMode(val: "standard" | "single" | "bypage");
    surveyValue: SurveyModel;
    get toolbarItems(): Array<Action>;
    get toolbar(): ActionContainer;
    dragDropSurveyElements: DragDropSurveyElements;
    dragDropChoices: DragDropChoices;
    private selectedElementValue;
    private newQuestions;
    private newPanels;
    private newQuestionChangedNames;
    private selectionHistoryControllerValue;
    private saveSurveyFuncValue;
    viewType: string;
    /**
     * Returns the current show view name. The possible returns values are:
     * "designer", "editor", "test", "embed", "logic" and "translation".
     * @see showDesigner
     * @see showPreview
     * @see showJsonEditor
     * @see showLogicEditor
     * @see showTranslationEditor
     * @see showEmbedEditor
     */
    get showingViewName(): string;
    get isDesignerShowing(): boolean;
    showDesigner(): void;
    get isTestSurveyShowing(): boolean;
    /**
     * Return true if Preview tab is currently active
     */
    get isPreviewShowing(): boolean;
    showTestSurvey(): void;
    /**
     * Show Preview tab
     */
    showPreview(): void;
    protected plugins: {
        [name: string]: ICreatorPlugin;
    };
    addPluginTab(name: string, plugin: ICreatorPlugin, title?: string, componentContent?: string, index?: number): void;
    addPlugin(name: string, plugin: ICreatorPlugin): void;
    getPlugin<P extends ICreatorPlugin = ICreatorPlugin>(name: string): P;
    /**
     * The event is called on deleting an element (question/panel/page) from the survey. Typically, when a user click the delete from the element menu.
     *- sender the survey creator object that fires the event
     *- options.element an instance of the deleting element
     *- options.elementType the type of the element: 'question', 'panel' or 'page'.
     *- options.allowing set it to false to cancel the element deleting
     */
    onElementDeleting: CreatorEvent;
    /**
     * The event is called on setting a readOnly property of the property editor. By default the property.readOnly property is used.
     * You may changed it and make the property editor read only or enabled for a particular object.
     *- sender the survey creator object that fires the event
     *- options.obj the survey object, Survey, Page, Panel or Question
     *- options.property the object property (Survey.JsonObjectProperty object). It has name, className, type, visible, readOnly and other properties.
     *- options.readOnly a boolean value. It has value equals to options.readOnly property by default. You may change it.
     *- options.parentObj the parent object. It is null for non-nested properties. It is not null for itemvalue or column objects. The parent object is a question (dropdown, radigroup, checkbox, matrices and so on).
     *- options.parentProperty the parent property (Survey.JsonObjectProperty object). It is null for non-nested properties. It is not null for itemvalue or column objects. The parent object is choices, columns, rows, triggers and so on.
     */
    onGetPropertyReadOnly: CreatorEvent;
    /**
     * The event is fired when the survey creator creates a survey object (Survey.Survey).
     *- sender the survey creator object that fires the event
     *- options.survey the survey object showing in the creator.
     *- options.reason indicates what component of the creator requests the survey. There are several reason types: "designer" - survey for designer survey, "test" - survey for "Preview" tab and "conditionEditor", "defaultValueEditor", "restfulEditor" - surveys for different property editors.
     */
    onSurveyInstanceCreated: CreatorEvent;
    /**
     * An event that is raised when Survey Creator obtains a survey element name to display it in the UI.
     *
     * Handle this event to replace survey element names in the UI with custom display texts.
     * If you only want to replace the names with survey element titles, enable the [`showObjectTitles`](https://surveyjs.io/survey-creator/documentation/surveycreator#showObjectTitles) property instead of handling this event.
     *
     * The event handler accepts the following arguments:
     *
     * - `sender`- A Survey Creator instance that raised the event.
     * - `options.obj` - The instance of a survey element (survey, page, question, or panel) whose name has been requested.
     * - `options.area` - A Survey Creator UI element that requests the display name.
     *   - `"page-selector"` - Page selector on the design surface
     *   - `"condition-editor"` - Condition pop-up window or drop-down menus that allow users to select questions in the Logic tab
     *   - `"logic-tab:question-filter"` - Question filter in the Logic tab
     *   - `"logic-tab:question-selector"` - Question selector on editing actions in the Logic tab
     *   - `"preview-tab:page-list"` - Page list in the Preview tab
     *   - `"preview-tab:selected-page"` - Selected page name in the Preview tab
     *   - `"property-grid:property-editor"` - Property editors in the Property Grid
     *   - `"property-grid-header:element-list"` - Survey element list in the header of the Property Grid
     *   - `"property-grid-header:selected-element"` - Selected survey element in the header of the Property Grid
     *   - `"translation-tab"` - Translation tab
     * - `options.displayName` - Modify this property to set a custom display text for the survey element.
     * - `options.reason` - Obsolete. Use the `options.area` property instead.
     *   - `"condition"` - Use the `"condition-editor"` value of `options.area` instead.
     *   - `"survey-tester"` - Use the `"preview-tab:page-list"` value of `options.area` instead.
     *   - `"survey-tester-selected"` - Use the `"preview-tab:selected-page"` value of `options.area` instead.
     *   - `"survey-translation"` - Use the `"translation-tab"` value of `options.area` instead.
     *   - `"property-editor"` - Use the `"property-grid:property-editor"` value of `options.area` instead.
     *   - `"property-grid"` - Use the `"property-grid-header:element-list"` value of `options.area` instead.
     *   - `"property-grid-title"` - Use the `"property-grid-header:selected-element"` value of `options.area` instead.
     */
    onGetObjectDisplayName: CreatorEvent;
    /**
     * This event is raised after a user has edited a text value on the design surface. This value may include HTML markup. You can handle the `onHtmlToMarkdown` event to convert the HTML markup to Markdown.
     *
     * The event handler accepts the following arguments:
     *
     * - `sender` - A Survey Creator instance that raised the event.
     * - `options.element` - The instance of a survey element (survey, page, panel, question) that the user configures.
     * - `options.name` - The name of a property whose value has been edited.
     * - `options.html` - HTML content. Pass this field's value to an HTML-to-Markdown converter.
     * - `options.text` - A text string that may contain Markdown. Assign the result of the HTML-to-Markdown conversion to this field.
     */
    onHtmlToMarkdown: CreatorEvent;
    /**
     * Use this event to disable user interactions with a question or panel on the design surface.
     *
     * The event handler accepts the following arguments:
     *
     * - `sender`- A Survey Creator instance that raised the event.
     * - `options.obj` - A survey element instance (question or panel) for which you can disable user interactions.
     * - `options.allowAddToToolbox` - Allows users to save the current survey element configuration in the Toolbox.
     * - `options.allowChangeRequired` - Allows users to make the survey element required.
     * - `options.allowChangeType` - Allows users to change the survey element type.
     * - `options.allowChangeInputType` - Allows users to change the [`inputType`](https://surveyjs.io/form-library/documentation/api-reference/text-entry-question-model#inputType) property of Single-Line Input questions.
     * - `options.allowCopy` - Allows users to duplicate the survey element.
     * - `options.allowDelete` - Allows users to delete the survey element.
     * - `options.allowDragging` - Allows users to drag and drop the survey element.
     * - `options.allowEdit` - Allows users to edit survey element properties on the design surface. If you disable this property, users can edit the properties only in the Property Grid.
     *
     * To disable a user interaction, set the correponding `allow...` property to `false`.
     */
    onElementAllowOperations: CreatorEvent;
    /**
     * Use this event to add/remove/modify the element (question/panel) menu items.
     *- sender the survey creator object that fires the event
     *- options.obj the survey object which property is edited in the Property Editor.
     *- options.items the list of menu items. It has two required fields: text and onClick: function(obj: Survey.Base) {} and optional name field.
     * @see onElementAllowOperations
     */
    onDefineElementMenuItems: CreatorEvent;
    /**
     * The event is called before showing a property in the Properties Grid or in the Question Editor.
     *- sender the survey creator object that fires the event
     *- options.obj the survey object, Survey, Page, Panel or Question
     *- options.property the object property (Survey.JsonObjectProperty object). It has name, className, type, visible, readOnly and other properties.
     *- options.canShow a boolean value. It is true by default. Set it false to hide the property from the Properties Grid and in the Question Editor.
     *- options.parentObj the parent object. It is null for non-nested properties. It is not null for itemvalue or column objects. The parent object is a question (dropdown, radigroup, checkbox, matrices and so on).
     *- options.parentProperty the parent property (Survey.JsonObjectProperty object). It is null for non-nested properties. It is not null for itemvalue or column objects. The parent object is choices, columns, rows, triggers and so on.
     *
     * [Example: Hide a category in the Properties Grid](https://surveyjs.io/Examples/Survey-Creator?id=hidecategoryinpropertiesgrid)
     */
    onShowingProperty: CreatorEvent;
    /**
     * @Deprecated Obsolete, please use onShowingProperty event.
     * The event is called before showing a property in the Property Grid or in Question Editor.
     *- sender the survey creator object that fires the event
     *- options.obj the survey object, Survey, Page, Panel or Question
     *- options.property the object property (Survey.JsonObjectProperty object). It has name, className, type, visible, readOnly and other properties.
     *- options.canShow a boolean value. It is true by default. Set it false to hide the property from the Property Grid or in Question Editor
     *- options.parentObj the parent object. It is null for non-nested properties. It is not null for itemvalue or column objects. The parent object is a question (dropdown, radigroup, checkbox, matrices and so on).
     *- options.parentProperty the parent property (Survey.JsonObjectProperty object). It is null for non-nested properties. It is not null for itemvalue or column objects. The parent object is choices, columns, rows, triggers and so on.
     */
    onCanShowProperty: CreatorEvent;
    /**
     * The event is called after a survey that represents the Property Grid is created and all its questions (property editors) are setup.
     * You can use this event to modify this survey to change the property grid behavior
     *- options.obj the survey object that is currently editing in the property grid
     *- options.survey the property grid survey
     */
    onPropertyGridSurveyCreated: CreatorEvent;
    /**
      * The event is called after a property editor (in fact a survey question) has been created and all it's properties have been assign.
      * You can use this event to modify the property editor properties or set event handlers to customize it's behavior
      *- options.obj the survey object that is currently editing in the property grid
      *- options.property the property that the current property editor is editing
      *- options.editor the property editor. In fact it is a survey question. We are using a heavily customizable survey as a property grid in Creator V2. It means that every property editor is a question.
      */
    onPropertyEditorCreated: CreatorEvent;
    /**
     * The event is called after a property editor setups its title actions.
     * You can use this event to modify the property editor title actions
     *- options.obj the survey object that is currently editing in the property grid
     *- options.property the property that the current property editor is editing
     *- options.editor the property editor. In fact it is a survey question. We are using a heavily customizable survey as a property grid in Creator V2. It means that every property editor is a question.
     *- options.titleActions the list of title actions.
     */
    onPropertyEditorUpdateTitleActions: CreatorEvent;
    /**
     * An event that is raised before Survey Creator displays a pop-up window called from the Property Grid. This window allows users to edit choices, conditions, and so on.
     *
     * Use this event to customize the pop-up window, for example, add custom action buttons.
     *
     * Parameters:
     *
     * - `sender` - A Survey Creator instance that raised the event.
     * - `options.obj` - An instance of a survey element (question or panel) that users are configuring in the Property Grid.
     * - `options.property`- A `JsonObjectProperty` object with metadata about the property being edited.
     * - `options.editor` - A property editor. It is an object of the [`Question`](https://surveyjs.io/form-library/documentation/question) type because the Property Grid is [built upon a regular survey](https://surveyjs.io/survey-creator/documentation/creator-v2-whats-new#survey-creator-ui-elements-are-surveys).
     * - `options.popupEditor` - An editor inside the pop-up window.
     * - `options.popupModel` - A `PopupBaseViewModel` object that describes the pop-up window model. Use `options.popupModel.footerToolbar` to access the actions at the bottom of the window.
     */
    onPropertyGridShowModal: CreatorEvent;
    /**
      * The event is called before rendering a delete button in the Property Grid or in Question Editor.
      * @Deprecated Obsolete, please use onCollectionItemAllowOperations
      *- sender the survey creator object that fires the event
      *- options.obj the survey Question
      *- options.item the object property (Survey.JsonObjectProperty object). It has name, className, type, visible, readOnly and other properties
      *- options.canDelete a boolean value. It is true by default. Set it false to remove delete button from the Property Grid or in Question Editor
      * @see onCollectionItemAllowOperations
      */
    onCanDeleteItem: CreatorEvent;
    /**
     * The event is called on deleting a collection item from the Property Editor. For example: column in columns editor or item in choices and so on.
     * @Deprecated Obsolete, please use onCollectionItemAllowOperations
     *- sender the survey creator object that fires the event
     *- options.obj the survey object: Question, Panel, Page or Survey
     *- options.property the collection property (Survey.JsonObjectProperty object). It has name, className, type, visible, readOnly and other properties
     *- options.propertyName the collection property name
     *- options.collection the editing collection where deleting item is located. It is can be columns in the matrices or choices in dropdown question and so on.
     *- options.item the collection item that we are going to delete
     *- options.allowDelete a boolean value. It is true by default. Set it false to abondome the element removing from the collection
     * @see onCollectionItemAllowOperations
     */
    onCollectionItemDeleting: CreatorEvent;
    /**
     * The event is called before rendering a collection item in a property editor. For example: a column in a column editor, or an item in Choices and so on.
     * Use this event to prevent a collection item from being edited or removed from a collection.
     *- sender the survey creator object that fires the event
     *- options.obj the survey object: Question, Panel, Page or Survey
     *- options.property the collection property (Survey.JsonObjectProperty object). It has name, className, type, visible, readOnly and other properties
     *- options.propertyName the collection property name
     *- options.collection a collection where a target item is located. It is can be Columns in Matrices or Choices in Dropdown question and so on.
     *- options.item a target collection item
     *- options.allowDelete a boolean value. It is `true` by default. Set it false to prevent an item from being removed from the collection
     *- options.allowAdd a boolean value. It is `true` by default. Set it false to prevent an item from being added to the collection
     *- options.allowEdit a boolean value. It is `true` by default. Set it `false` to disable editing.
     */
    onCollectionItemAllowOperations: CreatorEvent;
    /**
      * The event is called on adding a new Survey.ItemValue object. It uses as an element in choices array in Radiogroup, checkbox and dropdown questions or Matrix columns and rows properties.
      * Use this event, to set ItemValue.value and ItemValue.text properties by default or set a value to the custom property.
      *- sender the survey creator object that fires the event
      *- options.obj the object that contains the itemsValues array, for example selector, rating and single choice matrix questions.
      *- options.propertyName  the object property Name. It can be "choices" for selector questions or rateValues for rating question or columns/rows for single choice matrix.
      *- options.newItem a new created Survey.ItemValue object.
      *- options.itemValues an editing Survey.ItemValue array. newItem object is not added yet into this array.
      */
    onItemValueAdded: CreatorEvent;
    /**
     * The event is called when a user adds a new column into MatrixDropdown or MatrixDynamic questions. Use it to set some properties of Survey.MatrixDropdownColumn by default, for example name or a custom property.
     *- sender the survey creator object that fires the event
     *- options.matrix a matrix question where column is located, matrix.columns.
     *- options.newColumn a new created Survey.MatrixDropdownColumn object.
     *- options.columns editable columns objects. They can be different from options.matrix.columns. options.columns and options.matrix.columns are equal after user press Apply or Cancel and options.columns will be set to options.matrix.columns or reset to initial state.
     */
    onMatrixColumnAdded: CreatorEvent;
    /**
     * Use this event to control Property Editors UI.
     *- sender the survey creator object that fires the event
     *- options.obj the survey object which property is edited in the Property Editor.
     *- options.propertyName  the name of the edited property.
     *- options.editorOptions  options that can be changed.
     *- options.editorOptions.allowAddRemoveItems a boolean property, true by default. Set it false to disable add/remove items in array properties. For example 'choices', 'columns', 'rows'.
     *- options.editorOptions.allowRemoveAllItems a boolean property, true by default. Set it false to disable remove all items in array properties. For example 'choices', 'columns', 'rows'.
     *- options.editorOptions.allowBatchEdit a boolean property, true by default. Set it false to hide the "Edit" button for the "choices" property.
     *- options.editorOptions.itemsEntryType a string property, 'form' by default. Set it 'fast' to show "Manual Entry" tab for "choices" property by default.
     */
    onSetPropertyEditorOptions: CreatorEvent;
    /**
     * The event is called on generation a new name for a new created element.
     *- sender the survey creator object that fires the event
     *- options.element a new created survey element. It can be question, panel or page
     *- options.name a new suggested name, that is unique for the current survey. You can suggest your own name. If it is unique, creator will assign it to the element.
     *- options.isUnique a boolean property, set this property to false, if you want to ask Creator to generate another name
     */
    onGenerateNewName: CreatorEvent;
    /**
     * Use this event to show a custom error in the Question Editor on pressing Apply or OK buttons, if the values are not set correctly. The error will be displayed under the property editor.
     *- sender the survey creator object that fires the event
     *- options.obj the survey object which property is edited in the Property Editor.
     *- options.propertyName  the name of the edited property.
     *- options.value the property value.
     *- options.error the error you want to display. Set the empty string (the default value) or null if there is no errors.
     * @see onPropertyValueChanging
     */
    onPropertyValidationCustomError: CreatorEvent;
    /**
     * An event that is raised each time a user modifies a survey object property. Use this event to validate or correct a property value while the user enters it.
     *
     * The event handler accepts the following arguments:
     *
     * - `sender`- A Survey Creator instance that raised the event.
     * - `options.obj` - A survey object instance (question or panel) whose property is being edited.
     * - `options.propertyName` - The name of the property.
     * - `options.value` - An old property value.
     * - `options.newValue` - A new property value. Specify this field if you want to override the entered value.
     * @see onPropertyValidationCustomError
     * @see onSurveyPropertyValueChanged
     */
    onPropertyValueChanging: CreatorEvent;
    /**
     * An event that is raised after a property in a survey object has changed.
     *
     * - `sender`- A Survey Creator instance that raised the event.
     * - `options.obj` - A survey object instance (question or panel) whose property has changed.
     * - `options.propertyName` - The name of the property.
     * - `options.value` - A new property value.
     * @see onPropertyValidationCustomError
     * @see onPropertyValueChanging
     */
    onSurveyPropertyValueChanged: CreatorEvent;
    /**
      * Use this event to modify the list (name and titles) of the questions available in a condition editor.
      *- sender the survey creator object that fires the event
      *- options.obj the survey object which property is edited in the Property Editor.
      *- options.propertyName  the name of the edited property.
      *- options.editor the instance of Property Editor.
      *- options.list the list of the questions available for condition
      *- options.sortOrder "asc" (default) | "none". Change it to "none", if you don't want to sort your condition list
      */
    onConditionQuestionsGetList: CreatorEvent;
    /**
     * Use this event to modify the title in a condition editor. The title is changing during editing. In case of empty or incorrect expression it tells that expression is incorrect
     *- sender the survey creator object that fires the event.
     *- options.expression the current expression. If the expression is empty or incorrect then the value is empty.
     *- options.title the default value of the title. You can change the default value.
     */
    onConditionGetTitle: CreatorEvent;
    /**
     * Use this event to modify the display text of a logic item in the Logic tab.
     *
     * The event handler accepts the following arguments:
     *
     * - `sender` - A Survey Creator instance that raised the event.
     * - `options.expression` - A logical expression associated with the logic item.
     * - `options.expressionText` - The same expression in a user-friendly format. It may contain question titles instead of question names.
     * - `options.logicItem` - A logic item object. Contains an array of actions and other properties.
     * - `options.text` - The expression and actions in a user-friendly format. Redefine this property if you want to change the display text.
     */
    onLogicItemDisplayText: CreatorEvent;
    /**
      * The event is called when a survey is changed in the designer. A new page/question/page is added or existing is removed, a property is changed and so on.
      *- sender the survey creator object that fires the event
      * options object contains the information about certain modifications
      *- options.type contains string constant describing certain modification
      * Available values:
      *
      *- options.type: "ADDED_FROM_TOOLBOX"
      *- options.question: newly added question
      *
      *- options.type: "PAGE_ADDED"
      *- options.newValue: newly created page
      *
      *- options.type: "PAGE_MOVED"
      *- options.page: page has been moved
      *- options.indexFrom: pevious index
      *- options.indexTo: new index
      *
      *- options.type: "QUESTION_CONVERTED"
      *- options.className: the converted class name
      *- options.oldValue: pevious object
      *- options.newValue: the new object, converted from oldVale to the given class name
      *
      *- options.type: "QUESTION_CHANGED_BY_EDITOR"
      *- options.question: question has been edited in the popup question editor
      *
      *- options.type: "PROPERTY_CHANGED"
      *- options.name: the name of the property has been changed
      *- options.target: the object containing the changed property
      *- options.oldValue: the previous value of the changed property
      *- options.newValue: the new value of the changed property
      *
      *- options.type: "OBJECT_DELETED"
      *- options.target: deleted object
      *
      *- options.type: "VIEW_TYPE_CHANGED"
      *- options.newType: new type of the creator view: editor or designer
      *
      *- options.type: "DO_DROP"
      *- options.page: the page of the drap/drop operation
      *- options.source: the source dragged object
      *- options.target: the drop target
      *- options.newElement: a new element. It is defined if a user drops question or panel from the toolbox
      *
      *- options.type: "TRANSLATIONS_CHANGED"
      *- options.type: "JSON_EDITOR"
      */
    onModified: CreatorEvent;
    /**
     * The event is called on adding a new question into the survey. Typically, when a user dropped a Question from the Question Toolbox into designer Survey area.
     *- sender the survey creator object that fires the event
     *- options.question a new added survey question. Survey.Question object
     *- options.page the survey Page object where question has been added.
     *- options.reason how question has been added via UI: ADDED_FROM_TOOLBOX, ADDED_FROM_PAGEBUTTON, ELEMENT_COPIED.
     */
    onQuestionAdded: CreatorEvent;
    /**
     * The event is called on adding a new panel into the survey.  Typically, when a user dropped a Panel from the Question Toolbox into designer Survey area.
     *- sender the survey creator object that fires the event
     *- options.panel a new added survey panel. Survey.Panel object
     *- options.page the survey Page object where question has been added.
     */
    onPanelAdded: CreatorEvent;
    /**
     * The event is called on adding a new page into the survey.
     *- sender the survey creator object that fires the event
     *- options.page the new survey Page object.
     */
    onPageAdded: CreatorEvent;
    /**
     * The event is fired when the survey creator is initialized and a survey object (Survey.Survey) is created.
     *- sender the survey creator object that fires the event
     *- options.survey  the survey object showing in the creator.
     */
    onDesignerSurveyCreated: CreatorEvent;
    /**
     * The event is fired when the survey creator creates survey in Preview tab for testing.
     *- sender the survey creator object that fires the event
     *- options.survey  the survey object showing in the "Preview" tab.
     */
    onPreviewSurveyCreated: CreatorEvent;
    /**
      * Obsolete. Please use onPreviewSurveyCreated event.
      * @see onPreviewSurveyCreated
      */
    onTestSurveyCreated: CreatorEvent;
    /**
     * The event is called in case of UI notifications. By default all notifications are done via built-in alert () function.
     * In case of any subscriptions to this event all notifications will be redirected into the event handler.
     *- options.message is a message to show.
     */
    onNotify: CreatorEvent;
    /**
     * The event is called on changing the selected element. You may change the new selected element by changing the property options.newSelectedElement to your own
     *- options.newSelectedElement the element that is going to be selected in the survey desiger: question, panel, page or survey.
     */
    onSelectedElementChanging: CreatorEvent;
    /**
     * The event is called after the selected element is changed.
     *- options.newSelectedElement the new selected element in the survey desiger: question, panel, page or survey.
     */
    onSelectedElementChanged: CreatorEvent;
    /**
     * The event is fired then one need to choose files.
     *
     * - `sender` - the survey creator object that fires the event
     * - `options.input` - file input HTML element
     * - `options.callback` - need to be called after files has been chosen
     * @see uploadFiles
     */
    onOpenFileChooser: CreatorEvent;
    /**
     * The event is fired on uploading the files.
     *
     * - `sender` - the survey creator object that fires the event
     * - `options.files` - the Javascript File objects array
     * - `options.callback(status, imageLink)` - called on upload complete
     * @see uploadFiles
     */
    onUploadFile: CreatorEvent;
    /**
     * Use this event to modify the list of the strings available in the Translation tab.
     *
     * The event handler accepts the following arguments:
     *
     * - `sender` - A Survey Creator instance that raised the event.
     * - `options.obj` - A survey object instance (survey, page, panel, question) whose string translations are being edited in the Translation tab.
     * - `options.propertyName` - The name of a property being translated.
     * - `options.visible` - A Boolean value that specifies the property visibility. Set it to `false` to hide the property.
     */
    onTranslationStringVisibility: CreatorEvent;
    /**
     * Use this event to define is the locale initially selected (default value) and ready for translaion or it is unselected.
     *
     * The event handler accepts the following arguments:
     *
     * - `sender` - A Survey Creator instance that raised the event.
     * - `options.locale` - the locale name, like 'en', 'de' and so on.
     * - `options.isSelected` - it is true by default. Set it to false to make the translation unselected.
     */
    onTranslationLocaleInitiallySelected: CreatorEvent;
    /**
     * Use this event to modify the imported localizable text. To block importing a particular localization text, set the options.text into undefined.
     *
     * The event handler accepts the following arguments:
     *
     * - `sender` - A Survey Creator instance that raised the event.
     * - `options.locale` - the locale name, like 'en', 'de' and so on.
     * - `options.name` - The full name of the localizable string, it can be: "survey.page1.question2.title"
     * - `options.text` - The imported text for the locale for this item. Set it to undefined or empty string to block importing for this item
     */
    onTranslationImportItem: CreatorEvent;
    /**
    * The event is called when the translation from csv file is imported.
    * @see translation
    * @see showTranslationTab
    */
    onTranslationImported: CreatorEvent;
    /**
     * Use this event to modify a translated string before it is exported to CSV.
     *
     * The event handler accepts the following arguments:
     *
     * - `sender` - A Survey Creator instance that raised the event.
     * - `options.obj` - A survey object instance (survey, page, panel, question) whose string translations are being exported to CSV.
     * - `options.locale` - The current locale identifier (`"en"`, `"de"`, etc.). Contains an empty string if the default locale is used.
     * - `options.name` - A full name of the translated string. It is composed of names of all parent elements, for example: `"mySurvey.page1.question2.title"`.
     * - `options.locString` - A `LocalizableString` instance. Call the `options.locString.getLocaleText(locale)` method if you need to get a text string for a specific locale.
     * - `options.text` - A text string to be exported. The string is taken from the current locale. Redefine this property if you want to export a different string.
     */
    onTranslationExportItem: CreatorEvent;
    /**
     * An event that is raised before a string translation is changed. Use this event to override a new translation value.
     *
     * Parameters:
     *
     * - `sender`: `CreatorBase`\
     * A Survey Creator instance that raised the event.
     * - `options.obj`: `any`\
     * A survey object instance (survey, page, panel, question) whose string translation is being changed.
     * - `options.locale`: `String`\
     * The current locale identifier (`"en"`, `"de"`, etc.). Contains an empty string if the default locale is used.
     * - `options.locString`: `LocalizableString`\
     * An object that you can use to manipulate a localization string. Call the `options.locString.getLocaleText(locale)` method if you need to get a text string for a specific locale.
     * - `options.newText`: `String`\
     * A new value for the string translation.
     *
     * Refer to the following help topics for more information on localization:
     *
     * - [Localization & Globalization in SurveyJS Form Library](https://surveyjs.io/form-library/documentation/survey-localization)
     * - [Localization & Globalization in Survey Creator](https://surveyjs.io/survey-creator/documentation/localization)
     */
    onTranslationItemChanging: CreatorEvent;
    /**
     * Use this event to control drag&drop operations.
     *- sender the survey creator object that fires the event.
     *- options.survey the editing survey object.
     *- options.allow set it to false to disable dragging.
     *- options.target a target element that is dragging.
     *- options.source a source element. It can be null, if it is a new element, dragging from toolbox.
     *- options.parent a page or panel where target element is dragging.
     *- options.insertBefore an element before the target element is dragging. It can be null if parent container (page or panel) is empty or dragging an element under the last element of the container.
     *- options.insertAfter an element after the target element is dragging. It can be null if parent container (page or panel) is empty or dragging element to the top of the parent container.
     */
    onDragDropAllow: CreatorEvent;
    /**
     * This callback is used internally for providing survey JSON text.
     */
    getSurveyJSONTextCallback: () => {
        text: string;
        isModified: boolean;
    };
    /**
     * This callback is used internally for setting survey JSON text.
     */
    setSurveyJSONTextCallback: (text: string) => void;
    /**
     * Limits the number of items in a logical expression.
     *
     * Default value: -1 (unlimited)
     */
    maxLogicItemsInCondition: number;
    /**
     * Specifies whether UI elements display survey, page, and question titles instead of their names.
     *
     * Default value: `false`
     *
     * @see onGetObjectDisplayName
     */
    showObjectTitles: boolean;
    /**
     * Limits the number of visible choices. Users can click "Show more" to view hidden choices.
     *
     * Set this property to -1 if you do not want to hide any choices.
     *
     * Default value: 10
     */
    maxVisibleChoices: number;
    /**
     * Specifies whether to display question titles instead of names when users edit logical expressions.
     *
     * Default value: `false`
     */
    showTitlesInExpressions: boolean;
    /**
     * Specifies whether users can edit expressions in the Logic tab as plain text.
     *
     * If you set this property to `false`, users can only use UI elements to edit logical expressions.
     *
     * Default value: `true`
     *
     * @see showLogicTab
     */
    allowEditExpressionsInTextEditor: boolean;
    /**
     * Limits the number of columns that users can add to [Matrix](https://surveyjs.io/Documentation/Library?id=questionmatrixmodel), [Matrix Dynamic](https://surveyjs.io/Documentation/Library?id=questionmatrixdynamicmodel), and [Matrix Dropdown](https://surveyjs.io/Documentation/Library?id=questionmatrixdropdownmodel) questions.
     *
     * Default value: 0 (unlimited, taken from `settings.propertyGrid.maximumColumnsCount`)
     */
    maximumColumnsCount: number;
    /**
     * Limits the number of choices that users can add to [Checkbox](https://surveyjs.io/Documentation/Library?id=questioncheckboxmodel), [Dropdown](https://surveyjs.io/Documentation/Library?id=questiondropdownmodel), and [Radiogroup](https://surveyjs.io/Documentation/Library?id=questionradiogroupmodel) questions.
     *
     * Default value: 0 (unlimited, taken from `settings.propertyGrid.maximumChoicesCount`)
     */
    maximumChoicesCount: number;
    /**
     * Limits the number of rows that users can add to [Matrix](https://surveyjs.io/Documentation/Library?id=questionmatrixmodel) and [Matrix Dropdown](https://surveyjs.io/Documentation/Library?id=questionmatrixdropdownmodel) questions.
     *
     * Default value: 0 (unlimited, taken from `settings.propertyGrid.maximumRowsCount`)
     */
    maximumRowsCount: number;
    /**
     * Limits the number of rate value that users can add to [Rating](https://surveyjs.io/Documentation/Library?id=questionratingmodel) questions.
     *
     * Default value: 0 (unlimited, taken from `settings.propertyGrid.maximumRateValues`)
     */
    maximumRateValues: number;
    /**
     * Obsolete. Use the [`showPagesInPreviewTab`](https://surveyjs.io/Documentation/Survey-Creator?id=surveycreator#showPagesInPreviewTab) property instead.
     */
    showPagesInTestSurveyTab: boolean;
    /**
     * Specifies whether to show the page selector at the bottom of the Preview tab.
     *
     * Default value: `true`
     */
    get showPagesInPreviewTab(): boolean;
    set showPagesInPreviewTab(val: boolean);
    /**
     * Obsolete. Use the [`showSimulatorInPreviewTab`](https://surveyjs.io/Documentation/Survey-Creator?id=surveycreator#showSimulatorInPreviewTab) property instead.
     */
    showSimulatorInTestSurveyTab: boolean;
    /**
     * Specifies whether the Preview tab displays the Device button that allows users to preview the survey on different device types.
     *
     * Default value: `true`
     */
    get showSimulatorInPreviewTab(): boolean;
    set showSimulatorInPreviewTab(val: boolean);
    /**
     * A [UI theme](https://surveyjs.io/Documentation/Library?id=get-started-react#configure-styles) used to display the survey in the Preview tab.
     *
     * Accepted values: `"modern"`, `"default"`, `"defaultV2"`
     *
     * Default value: `"defaultV2"`
     */
    themeForPreview: string;
    private _allowModifyPages;
    /**
     * Specifies whether users can add, edit, and delete survey pages.
     *
     * Default value: `true`
     */
    get allowModifyPages(): boolean;
    set allowModifyPages(val: boolean);
    /**
     * Obsolete. Use the [`showDefaultLanguageInPreviewTab`](https://surveyjs.io/Documentation/Survey-Creator?id=surveycreator#showDefaultLanguageInPreviewTab) property instead.
     */
    showDefaultLanguageInTestSurveyTab: boolean | string;
    /**
     * Specifies whether the Preview tab displays the language selector.
     *
     * Accepted values:
     *
     * - `"auto"` (default)
     * Display the language selector only if the survey is translated into more than one language.
     *
     * - `true`
     * Always display the language selector regardless of how many languages are used in the survey.
     *
     * - `false`
     * Never display the language selector.
     *
     * - `"all"`
     * Always display the language selector with [all supported languages](https://github.com/surveyjs/survey-creator/tree/master/packages/survey-creator-core/src/localization).
     *
     * **See also**: [Localization & Globalization](https://surveyjs.io/Documentation/Survey-Creator?id=localization)
     */
    get showDefaultLanguageInPreviewTab(): boolean | string;
    set showDefaultLanguageInPreviewTab(val: boolean | string);
    /**
     * Obsolete. Use the [`showInvisibleElementsInPreviewTab`](https://surveyjs.io/Documentation/Survey-Creator?id=surveycreator#showInvisibleElementsInPreviewTab) property instead.
     */
    showInvisibleElementsInTestSurveyTab: boolean;
    /**
     * Specifies whether the Preview tab displays a checkbox that allows users to show or hide invisible survey elements.
     *
     * Default value: `true`
     */
    get showInvisibleElementsInPreviewTab(): boolean;
    set showInvisibleElementsInPreviewTab(val: boolean);
    /**
     * Set this property to true if you want to show "page selector" in the toolabar instead of "pages editor"
     */
    showPageSelectorInToolbar: boolean;
    /**
     * Specifies whether users can switch between UI themes in the Preview tab.
     *
     * Default value: `true`
     *
     * [View Demo](https://surveyjs.io/Examples/Creator?id=theme-switcher (linkStyle))
     */
    allowChangeThemeInPreview: boolean;
    tabbedMenu: AdaptiveActionContainer<TabbedMenuItem>;
    get tabs(): Array<TabbedMenuItem>;
    set tabs(val: Array<TabbedMenuItem>);
    /**
     * Returns the localized string by its id
     * @param str the string id.
     */
    getLocString(str: string): string;
    /**
     * Specifies whether to show an error message if a survey is not saved in the database.
     *
     * Default value: `true`
     */
    showErrorOnFailedSave: boolean;
    protected onSetReadOnly(newVal: boolean): void;
    /**
     * Gets or sets the survey locale. The default value it is empty, this means the 'en' locale is used.
     * You can set it to 'de' - German, 'fr' - French and so on.
     */
    get locale(): string;
    set locale(value: string);
    locStrsChanged(): void;
    private refreshPlugin;
    /**
     * Enables the read-only mode. If you set this property to `true`, users cannot change the initial survey configuration.
     *
     * Default value: `false`
     */
    get readOnly(): boolean;
    set readOnly(newVal: boolean);
    /**
     * Specifies whether to enable support for right-to-left languages.
     *
     * Default value: `false`
     */
    get isRTL(): boolean;
    set isRTL(value: boolean);
    /**
     * The event is called when creator is going to change the active tab.
     *- sender the survey creator object that fires the event
     *- options.tabName the name of new active tab
     */
    onActiveTabChanging: CreatorEvent;
    /**
     * The event is called when creator active tab is changed.
     *- sender the survey creator object that fires the event
     *- options.tabName the name of new active tab
     *- options.model the instance of the model of the new active tab
     */
    onActiveTabChanged: CreatorEvent;
    /**
     * Get/set the active tab.
     * The following values are available: "designer", "editor", "test", "embed", "logic" and "translation".
     * Please note, not all tabs are visible.
     */
    get activeTab(): string;
    set activeTab(val: string);
    /**
     * Change the active view/tab. It will return false if it can't change the current tab.
     * @param viewName name of new active view (tab). The following values are available: "designer", "editor", "test", "embed", "logic" and "translation".
     */
    makeNewViewActive(viewName: string): boolean;
    private switchViewType;
    private canSwitchViewType;
    private activatePlugin;
    private get currentPlugin();
    toolbox: QuestionToolbox;
    get toolboxCategories(): Array<any>;
    sidebar: SidebarModel;
    constructor(options: ICreatorOptions, options2?: ICreatorOptions);
    updateToolboxIsCompact(newVal?: boolean): void;
    showToolboxValue: boolean;
    get showToolbox(): boolean;
    set showToolbox(val: boolean);
    private showSidebarValue;
    onShowSidebarVisibilityChanged: CreatorEvent;
    /**
     * Set this this property grid false to hide the property grid.
     */
    get showSidebar(): boolean;
    set showSidebar(val: boolean);
    setShowSidebar(value: boolean, isManualMode?: boolean): void;
    onShowPropertyGridVisiblityChanged: CreatorEvent;
    get showPropertyGrid(): boolean;
    set showPropertyGrid(val: boolean);
    rightContainerActiveItem(name: string): void;
    leftContainerActiveItem(name: string): void;
    /**
     * The event is called before undo happens.
     *- options.canUndo a boolean value. It is true by default. Set it false to hide prevent undo operation.
     */
    onBeforeUndo: CreatorEvent;
    /**
     * The event is called before redo happens.
     *- options.canRedo a boolean value. It is true by default. Set it false to hide prevent redo operation.
     */
    onBeforeRedo: CreatorEvent;
    /**
     * The event is called after undo happens.
     *- options.state is an undo/redo item.
     */
    onAfterUndo: CreatorEvent;
    /**
     * The event is called after redo happens.
     *- options.state is an undo/redo item.
     */
    onAfterRedo: CreatorEvent;
    get undoRedoManager(): UndoRedoManager;
    get undoRedoController(): UndoRedoController;
    /**
     * This method starts undo/redo transaction: all changes will be stored as one undo/redo item.
     */
    startUndoRedoTransaction(name?: string): void;
    /**
     * This method stops undo/redo transaction.
     */
    stopUndoRedoTransaction(): void;
    /**
     * Returns true if Creator is currently doing undo or redo opertaions
     */
    get isProcessingUndoRedo(): boolean;
    /**
     * This method performs undo uperation if possible.
     */
    undo(): void;
    /**
     * This method performs redo uperation if possible.
     */
    redo(): void;
    get selectionHistoryController(): SelectionHistory;
    get currentPage(): PageModel;
    set currentPage(value: PageModel);
    /**
     * An event that is raised before a new page is added to the survey.
     *
     * Parameters:
     *
     * - `sender`: `CreatorBase`\
     * A Survey Creator instance that raised the event.
     * - `options.page`: [`PageModel`](https://surveyjs.io/form-library/documentation/api-reference/page-model)\
     * An added page.
     * - `options.allow`: `Boolean`\
     * Set this property to `false` if you do not want to add the page.
     */
    onPageAdding: CreatorEvent;
    addPage(pageToAdd?: PageModel, changeSelection?: boolean, beforeAdd?: () => boolean): PageModel;
    private addNewPageIntoSurvey;
    protected initTabs(): void;
    private initPlugins;
    private initFooterToolbar;
    getOptions(): ICreatorOptions;
    protected setOptions(options: ICreatorOptions): void;
    private setPropertyPlaceHolder;
    private setPropertyVisibility;
    private patchMetadata;
    isCanModifyProperty(obj: Base, propertyName: string): boolean;
    onIsPropertyReadOnlyCallback(obj: Base, property: JsonObjectProperty, readOnly: boolean, parentObj: Base, parentProperty: JsonObjectProperty): boolean;
    /**
     * The editing survey object (Survey.Survey)
     */
    get survey(): SurveyModel;
    private existingPages;
    private isInitialSurveyEmptyValue;
    /**
     * Returns true if initial survey was empty. It was not set via JSON property and default new survey is empty as well.
     * @returns true if initial survey doesn't have any elements or properties
     */
    get isInitialSurveyEmpty(): boolean;
    protected initSurveyWithJSON(json: any, clearState: boolean): void;
    private updatePlugin;
    protected initDragDrop(): void;
    /**
     * An event that is raised when users start to drag a survey element within the design surface.
     *
     * Parameters:
     *
     * - `sender`: `CreatorBase`\
     * A Survey Creator instance that raised the event.
     * - `options.draggedElement`: `any`\
     * A survey element being dragged.
     * - `options.fromElement`: `any`\
     * A survey element from which `draggedElement` is being dragged.
     * - `options.toElement`: `any`\
     * A survey element to which `draggedElement` is being dragged.
     * @see onDragEnd
     */
    onDragStart: Survey.Event<() => any, any, any>;
    onBeforeDrop: Survey.Event<() => any, any, any>;
    /**
     * An event that is raised when users finish dragging a survey element within the design surface.
     *
     * Parameters:
     *
     * - `sender`: `CreatorBase`\
     * A Survey Creator instance that raised the event.
     * - `options.draggedElement`: `any`\
     * A survey element that was dragged.
     * - `options.fromElement`: `any`\
     * A survey element from which `draggedElement` was dragged.
     * - `options.toElement`: `any`\
     * A survey element to which `draggedElement` was dragged.
     */
    onDragEnd: Survey.Event<() => any, any, any>;
    onAfterDrop: Survey.Event<() => any, any, any>;
    private initDragDropSurveyElements;
    private initDragDropChoices;
    updateElementsOnLocaleChanged(obj: Base, propertyName: string): void;
    updateConditionsOnNameChanged(obj: Base, propertyName: string, oldValue: any): void;
    private surveyLogicForUpdate;
    private surveyLogicRenaming;
    private getSurveyLogicForUpdate;
    private clearSurveyLogicForUpdate;
    private needClearSurveyLogicForUpdate;
    private updateSurveyLogicValues;
    private updateSurveyLogicItemValue;
    protected createSurveyLogicForUpdate(): SurveyLogic;
    private updateLogicOnQuestionNameChanged;
    private updateLogicOnColumnNameChanged;
    private updateChoicesFromQuestionOnColumnNameChanged;
    isObjQuestion(obj: Base): boolean;
    isObjPage(obj: Base): boolean;
    private isObjThisType;
    private addNewElementReason;
    private doOnQuestionAdded;
    private doOnPanelAdded;
    private doOnPageAdded;
    private getPageByElement;
    private getDefaultSurveyJson;
    protected setSurvey(survey: SurveyModel): void;
    private getSurveyTextFromDesigner;
    protected setTextValue(value: string): void;
    /**
     * Set JSON as text  into survey. Clear undo/redo states optionally.
     * @param value JSON as text
     * @param clearState default false. Set this parameter to true to clear undo/redo states.
     */
    changeText(value: string, clearState?: boolean): void;
    /**
     * The Survey JSON as a text. Use it to get Survey JSON or change it.
     * @see JSON
     */
    get text(): string;
    set text(value: string);
    getSurveyJSON(): any;
    getObjectDisplayName(obj: Base, area: string, reason?: string, displayName?: string): string;
    createSurvey(json?: any, reason?: string): SurveyModel;
    protected createSurveyCore(json: any, reason: string): SurveyModel;
    private _stateValue;
    /**
     * Returns the creator state. It may return empty string or "saving" and "saved".
     */
    get state(): string;
    protected setState(value: string): void;
    onStateChanged: CreatorEvent;
    notifier: Survey.Notifier;
    setModified(options?: any): void;
    notifySurveyPropertyChanged(options: any): void;
    /**
     * This function triggers user notification (via the alert() function if no onNotify event handler added).
     * @see onNotify
     */
    notify(msg: string, type?: "info" | "error"): void;
    protected convertQuestion(obj: Question, className: string): Question;
    private getDefaultElementJSON;
    private singlePageJSON;
    /**
     * The Survey JSON. Use it to get Survey JSON or change it.
     * @see text
     */
    get JSON(): any;
    set JSON(val: any);
    loadSurvey(surveyId: string): void;
    protected doClickQuestionCore(element: IElement, modifiedType?: string, index?: number, panel?: IPanel): void;
    private isRowMultiline;
    private findRowByElement;
    private addElemenMultiline;
    setNewNames(element: Survey.ISurveyElement): void;
    private updateNewElementExpressions;
    protected getAllQuestions(): Array<any>;
    protected getAllPanels(): Array<any>;
    protected addElements(elements: Array<any>, isPanel: boolean, result: Array<any>): void;
    protected getNewName(type: string, isPanel?: boolean): string;
    protected getNewQuestionName(): string;
    protected getNewPanelName(): string;
    protected setNewNamesCore(element: Survey.ISurveyElement): void;
    createNewElement(json: any): IElement;
    copyElement(element: Base): IElement;
    /**
     * Copy a question to the active page
     * @param question A copied Survey.Question
     */
    fastCopyQuestion(question: Base): Survey.IElement;
    /**
     * Get or set the current selected object in the Creator. It can be a question, panel, page or survey itself.
     */
    get selectedElement(): Base;
    set selectedElement(val: Base);
    /**
     * @Deprecated Obsolete. Please use deleteCurrentElement.
     * @see deleteCurrentElement
     */
    deleteCurrentObject(): void;
    /**
     * Delete a currently selected element in the survey. It can be a question, a panel or a page.
     */
    deleteCurrentElement(): void;
    /**
     * Delete an element in the survey. It can be a question, a panel or a page.
     * @param element a survey element.
     */
    deleteElement(element: Base): void;
    /**
     * Create a new page with the same elements and place it next to the current one. It returns the new created Survey.Page
     * @param page A copied Survey.Page
     */
    copyPage(page: PageModel): PageModel;
    protected deleteObjectCore(obj: any): void;
    private getNextPage;
    protected deleteObject(obj: any): void;
    protected updateConditionsOnRemove(obj: any): void;
    isElementSelected(element: Base): boolean;
    selectElement(element: any, propertyName?: string, focus?: boolean | string, startEdit?: boolean): void;
    focusElement(element: any, focus: string | boolean, selEl?: any, propertyName?: string, startEdit?: boolean): void;
    private getSelectedSurveyElement;
    private onSelectingElement;
    protected get designerPropertyGrid(): PropertyGridModel;
    get propertyGrid(): SurveyModel;
    /**
     * Collapse certain property editor tab (category) in properties panel/grid
     * name - tab category name
     * @see collapseAllPropertyGridCategories
     * @see expandPropertyGridCategory
     * @see expandAllPropertyGridCategories
     */
    collapsePropertyGridCategory(name: string): void;
    /**
     * Expand certain property editor tab (category) in properties panel/grid
     * name - tab category name
     * @see collapsePropertyGridCategory
     * @see collapseAllPropertyGridCategories
     * @see expandAllPropertyGridCategories
     */
    expandPropertyGridCategory(name: string): void;
    /**
     * Expand all property editor tabs (categories) in properties panel/grid
     * @see collapsePropertyGridCategory
     * @see expandPropertyGridCategory
     * @see expandAllPropertyGridCategories
     */
    collapseAllPropertyGridCategories(): void;
    /**
     * Expand all property editor tabs (categories) in properties panel/grid
     * @see collapsePropertyGridCategory
     * @see collapseAllPropertyGridCategories
     * @see expandPropertyGridCategory
     */
    expandAllPropertyGridCategories(): void;
    /**
     * @Deprecated Obsolete. Collapse all property editor tabs (categories) in properties panel/grid
     * @see collapseAllPropertyGridCategories
     *
     */
    collapseAllPropertyTabs(): void;
    /**
     * @Deprecated Obsolete. Expand all property editor tabs (categories) in properties panel/grid
     * @see expandAllPropertyGridCategories
     */
    expandAllPropertyTabs(): void;
    /**
     * @Deprecated Obsolete. Expand certain property editor tab (category) in properties panel/grid
     * name - tab category name
     * @see expandPropertyGridCategory
     */
    expandPropertyTab(name: string): void;
    /**
     * @Deprecated Obsolete. Collapse certain property editor tab (category) in properties panel/grid
     * name - tab category name
     * @see collapsePropertyGridCategory
     */
    collapsePropertyTab(name: string): void;
    /**
     * Check for errors in property grid and adorners of the selected elements.
     * Returns true if selected element is null or there is no errors.
     */
    validateSelectedElement(): boolean;
    /**
     * Deletes all custom translation strings for the passed locale from Survey Creator and from the generated survey JSON schema.
     * @param locale A locale code (for example, "en").
     */
    deleteLocaleStrings(locale: string): void;
    private getPropertyGridExpandedCategory;
    private expandCategoryIfNeeded;
    private selectionChanged;
    private getCurrentPageByElement;
    clickToolboxItem(newElement: any, panel?: IPanel, modifiedType?: string): void;
    getJSONForNewElement(json: any): any;
    /**
     * Open file chooser dialog
     * @param input file input element
     * @param onFilesChosen a call back function to process chosen files
     */
    chooseFiles(input: HTMLInputElement, onFilesChosen: (files: File[]) => void): void;
    /**
     * Upload the files on a server
     * @param files files to upload
     * @param uploadingCallback a call back function to get the status on uploading the file and operation result - URI of the uploaded file
     */
    uploadFiles(files: File[], question: Question, uploadingCallback: (status: string, data: any) => any): void;
    initKeyboardShortcuts(rootNode: HTMLElement): void;
    removeKeyboardShortcuts(rootNode: HTMLElement): void;
    protected onKeyDownHandler: (event: KeyboardEvent) => void;
    private shortcuts;
    registerShortcut(name: string, shortcut: IKeyboardShortcut): void;
    unRegisterShortcut(name: string): void;
    protected deletePanelOrQuestion(obj: Base): void;
    protected onCanShowObjectProperty(object: any, property: JsonObjectProperty, showMode: string, parentObj: any, parentProperty: JsonObjectProperty): boolean;
    protected canDeleteItem(object: any, item: Base, allowDelete: boolean): boolean;
    private getErrorOnPropertyChanging;
    protected generateUniqueName(el: Base, newName: string): string;
    protected isNameUnique(el: Base, newName: string): boolean;
    private isNameUniqueInArray;
    protected doPropertyGridChanged(): void;
    get alwaySaveTextInPropertyEditors(): boolean;
    set alwaySaveTextInPropertyEditors(value: boolean);
    onCanShowPropertyCallback(object: any, property: JsonObjectProperty, showMode: string, parentObj: any, parentProperty: JsonObjectProperty): boolean;
    onPropertyGridSurveyCreatedCallback(object: any, survey: SurveyModel): void;
    onPropertyEditorCreatedCallback(object: any, property: JsonObjectProperty, editor: Question): void;
    onPropertyEditorUpdateTitleActionsCallback(object: any, property: JsonObjectProperty, editor: Question, titleActions: IAction[]): void;
    onPropertyGridShowModalCallback(object: any, property: JsonObjectProperty, editor: Question, popupEditor: any, popupModel: PopupBaseViewModel): void;
    onCanDeleteItemCallback(object: any, item: Base, allowDelete: boolean): boolean;
    onCollectionItemDeletingCallback(obj: Base, property: JsonObjectProperty, collection: Array<Base>, item: Base): boolean;
    onCollectionItemAllowingCallback(obj: Base, property: JsonObjectProperty, collection: Array<Base>, item: Base, itemOptions: ICollectionItemAllowOperations): void;
    onItemValueAddedCallback(obj: Base, propertyName: string, itemValue: Survey.ItemValue, itemValues: Array<Survey.ItemValue>): void;
    onMatrixDropdownColumnAddedCallback(matrix: Survey.Question, column: Survey.MatrixDropdownColumn, columns: Array<Survey.MatrixDropdownColumn>): void;
    onSetPropertyEditorOptionsCallback(propertyName: string, obj: Base, editorOptions: any): void;
    onGetErrorTextOnValidationCallback(propertyName: string, obj: Base, value: any): string;
    onValueChangingCallback(options: any): void;
    onGetElementEditorTitleCallback(obj: Base, title: string): string;
    onConditionQuestionsGetListCallback(propertyName: string, obj: Base, editor: any, list: any[]): string;
    onConditionGetTitleCallback(expression: string, title: string): string;
    onLogicGetTitleCallback(expression: string, expressionText: string, text: string, logicItem: any): string;
    getProcessedTranslationItemText(locale: string, locString: ILocalizableString, newText: string, obj: any): string;
    getTranslationExportedText(obj: Base, name: string, locString: ILocalizableString, locale: string, text: string): string;
    /**
     * The delay on saving survey JSON on autoSave in ms. It is 500 ms by default.
     * If during this period of time an end-user modify survey, then the last version will be saved only. Set to 0 to save immediately.
     * @see isAutoSave
     */
    autoSaveDelay: number;
    private autoSaveTimerId;
    protected doAutoSave(): void;
    saveNo: number;
    doSave(): void;
    showSaveButton: boolean;
    /**
     * Assign to this property a function that will be called on clicking the 'Save' button or on any change if isAutoSave equals true.
     * @see isAutoSave
     */
    get saveSurveyFunc(): any;
    set saveSurveyFunc(value: any);
    convertCurrentQuestion(newType: string): void;
    getAddNewQuestionText(currentAddQuestionType?: string): any;
    get addNewQuestionText(): any;
    getQuestionTypeSelectorModel(beforeAdd: (type: string) => void, panel?: IPanel): any;
    addNewQuestionInPage(beforeAdd: (string: any) => void, panel?: IPanel, type?: string): void;
    createIActionBarItemByClass(className: string, title: string, iconName: string, needSeparator: boolean): Action;
    onElementMenuItemsChanged(element: any, items: Action[]): void;
    getElementAllowOperations(element: SurveyElement): any;
    getChoicesItemBaseTitle(): any;
    getNextItemValue(question: QuestionSelectBase): string | number;
    createNewItemValue(question: QuestionSelectBase): ItemValue;
    protected onPropertyValueChanged(name: string, oldValue: any, newValue: any): void;
    initResponsivityManager(container: HTMLDivElement): void;
    resetResponsivityManager(): void;
    showHeaderInEmptySurvey: any;
    showPageNavigator: any;
    showTabs: any;
    showToolbar: any;
    allowCollapseSidebar: any;
    isMobileView: any;
    /**
     * Specifies Toolbox location.
     *
     * Possible values:
     *
     * - `"left"` (default) - Displays Toolbox on the left side of the design surface.
     * - `"right"` - Displays Toolbox on the right side of the design surface.
     * - `"sidebar"` - Displays Toolbox as an overlay on top of Property Grid. Use the [`sidebarLocation`](https://surveyjs.io/survey-creator/documentation/api-reference/survey-creator#sidebarLocation) property to specify Property Grid position.
     */
    toolboxLocation: toolboxLocationType;
    /**
     * Specifies the position of the sidebar that displays Property Grid.
     *
     * Possible values:
     *
     * - `"right"` (default) - Displays the sidebar on the right side of the design surface.
     * - `"left"` - Displays the sidebar on the left side of the design surface.
     * @see toolboxLocation
     */
    sidebarLocation: "left" | "right";
    selectFromStringEditor: boolean;
    isCreatorDisposed: boolean;
    dispose(): void;
}
export declare class SurveyCreatorModel extends CreatorBase {
}
export declare class StylesManager {
    static get currentTheme(): string;
    static set currentTheme(val: string);
    static applyTheme(name?: string): void;
}
export declare function initializeDesignTimeSurveyModel(model: any, creator: CreatorBase): void;
export declare const editableStringRendererName = "svc-string-editor";
export declare function getElementWrapperComponentName(element: any, reason: string, isPopupEditorContent: boolean): string;
export declare function getQuestionContentWrapperComponentName(element: any): string;
export declare function getElementWrapperComponentData(element: any, reason: string, creator: CreatorBase): any;
export declare function getItemValueWrapperComponentName(item: ItemValue, question: QuestionSelectBase): string;
export declare function getItemValueWrapperComponentData(item: ItemValue, question: QuestionSelectBase, creator: CreatorBase): any;
export declare function isStringEditable(element: any, name: string): boolean;
export declare function isTextInput(target: any): boolean;
export declare function registerAdorner(name: any, adorner: any): void;
export declare function removeAdorners(names?: string[]): void;
